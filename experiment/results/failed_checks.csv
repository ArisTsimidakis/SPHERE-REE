Chart,Tool,Alert_ID,Standard_ID,CIS_Cluster,Description,Resource,Original_YAML,Characters
traefik-hub,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/traefik-hub', '']","{'kind': 'ServiceAccount', 'apiVersion': 'v1', 'metadata': {'name': 'traefik-hub', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'automountServiceAccountToken': False}",330
traefik-hub,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/hub-agent-cert', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'type': 'kubernetes.io/tls', 'metadata': {'name': 'hub-agent-cert', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'tls.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLekNDQWhPZ0F3SUJBZ0lRU2UweXdSVHJ1bVU2bU90RUdlUkNqREFOQmdrcWhraUc5dzBCQVFzRkFEQWcKTVI0d0hBWURWUVFERXhWaFpHMXBjM05wYjI0dVpHVm1ZWFZzZEM1emRtTXdIaGNOTWpVd016STVNVFl4TlRBMgpXaGNOTWpZd016STVNVFl4TlRBMldqQWdNUjR3SEFZRFZRUURFeFZoWkcxcGMzTnBiMjR1WkdWbVlYVnNkQzV6CmRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVGk4RG44dE5Dd1NIMVlOZ2YKSVkyeGp2Z1luVDV1MlFIMjdHTS9MRDdZR3YwUTIrV2tnL1NqUm1YcE5KMGxKVHlWR2tScEhnUm9LVzIvekJpNQpGWDV2aHJKRjQxWUN4cTNDWllMK2NOSHUreWU3dk1wZENyT1hLZWNQMDVoTDdmU1ZqTGFVMzRJcG1aVDdZaUZHCmhPMFlERWJEVzNNV0tyOTlxUldLSE1wcVJWaFBWemdUZjFiRldmR21DZE90V1JSRE5rTVcrMGs2K3NkTUU4YTIKV0YxL0UvR212bTFxVkw0SXV2SE91elZNZWluZnErWDlzK2NISDBwRGM1emxpR3pUMHpWQ1dDOEp0eU5hRmlrMwpJMmRPUnV5bnU1cmlKMHBCbk9La3A3aFJQOHJqQ3lEL2dUbFJQMDl0MmtlNEpUczZFc2lyZHhxZDlDNXlWRGI3CkNoaDlBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFnQmdOVkhSRUVHVEFYZ2hWaFpHMXBjM05wYjI0dQpaR1ZtWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUYzNVlQUDZNd3YyY2lTZG5Wcmk4N25KCkZHdFU1dW9qbmVsZ3B2OFF5RkJFZS94MXRTa1V0UWg0elVSTkZMa0RIbVZ2RHpncXhJeWd0L1UrNVRXQmJSakcKditiVUFFd1JLRmMzVXNsWHNxWElWTzExMnJUT1k2TEg3bEhuQzNGZWU3SDMxOG9oYzVaYmtyeS9EU2UyOU5pRAo4SURKTHJDOGVvUzhzK2ZlRjRDUnNNZGVhdDlnMytxRm5yL0VyVTlDZVh2MnFSai9PbG50YktDSFRSOERnR1JOCk9OaC9sUmVuUGpVN0t3RXpWbzV6RktaUEhxMmllYU9zRlhYT0VoQmVobnhVOXB5ckpvVUsxdDd0a0RMRWFlTncKV3dJWlBweVF6NVlZdjhLdzJYM3BFSGJIa2R4cHJIblMrRG9lNTlUcnYyT1RPZWlTY0NKbUc2YnI2SHdReDhZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', 'tls.key': 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMDR2QTUvTFRRc0VoOVdEWUh5R05zWTc0R0owK2J0a0I5dXhqUHl3KzJCcjlFTnZsCnBJUDBvMFpsNlRTZEpTVThsUnBFYVI0RWFDbHR2OHdZdVJWK2I0YXlSZU5XQXNhdHdtV0MvbkRSN3ZzbnU3eksKWFFxemx5bm5EOU9ZUyszMGxZeTJsTitDS1ptVSsySWhSb1R0R0F4R3cxdHpGaXEvZmFrVmloektha1ZZVDFjNApFMzlXeFZueHBnblRyVmtVUXpaREZ2dEpPdnJIVEJQR3RsaGRmeFB4cHI1dGFsUytDTHJ4enJzMVRIb3AzNnZsCi9iUG5CeDlLUTNPYzVZaHMwOU0xUWxndkNiY2pXaFlwTnlOblRrYnNwN3VhNGlkS1FaemlwS2U0VVQvSzR3c2cKLzRFNVVUOVBiZHBIdUNVN09oTElxM2NhbmZRdWNsUTIrd29ZZlFJREFRQUJBb0lCQUFNS2FUVnNTaGtWaVpWcgpWTy90blluRjBrOFlRNE40WHd6YmpQbWxleW5FQ1lzcWZmeUZZUWpQeERzNzVGNWFVS3FiL0F1K3dMVjJrdnRFCnhiNHpUdVB2ZmJSL2RnY0lNQXN4UmxhOTdHYVErWnM3TlhWczUvUHVTRUh6K3Fac3Z5MC9Ib2k1UmJldlczTFoKa0R6aFFEOHVQZjRrM0Z5Zk5LMXJ0c0dMZEdWZW54dW45bm9ONTJIOGhIWEY2TUpxempOUFI1YU1MeTlnTkxTdwo1WnltSjNuWlEwbTk4SjgxclJBaTdVaisvcWtSTzRFMHVaVXBLcUhidEJXY0ZDay9EL1N6czhaQzA0eWlkQWtLCjhLWEs0UjVXYUlmRHRUV29DVjhzYzNhMGlSNFgvNkZvVE9QOEdITjRNQkNKaVZKY0RZMlQvdzU1TkswUFpKeXYKNjZ6dW9Ra0NnWUVBNXdFdlhTSUR4clhpYlhwOE8wN0NJbE9udzRQT3YvRlJSV2NOQk9CdGFzWno3a0t6M1Z6YgphRHZvQXpVcWlWRVBTY1VVeVdZNUZIVUtzRnZLV1RYTGxyMzYxS0FicmE1OStQWTZUMVBDNTJBbVZMSnNSVGpXCmdMRFBOV1VLZTJJRWhqUUxkMXI1MGEzaXN3N1VBbTdaZDB1NHRwd1BSMGs0dE5vdjFPWGtuOGNDZ1lFQTZtK1EKTFFMRm9wSHdtZFVJU1hoQTVuMk96RUpBTFFJVkdtR1orRSs3RllHSFB1Zklzb2FaVkRoeHpHRDJaM3Nzd2hkRQpTQnJQSUFRaEhpc0RqVDdsUmgyTUo1TGF1UEU4UHFNdm8xWXdiQWhZVnp0Y0hVN0FlVmF4eUtkdGRMOFpHZWdXCmFPTEVLVUJFUjJKazRkbC85NnFJcENQOCszckNvVC95UjhMOXpac0NnWUJISE45R3pXVGFORDNiTS95d2lVTk0KSy9LV1JxcEwvbTdsYlo3ZFpIVnFqR005OHJ6S0pYN0pyTDkwMVZZZDVaMU9PV1IzeDRkRTIrOEpjWWh1UkJoRApkSUtXR0IvTkxNMU02Z2Z6U2JiVFlZOExQYzRFMVVWN1luSzNYajZHMHhyUGNaQWlFeGlheXV2aDhXdWt3QmtrCkYyUnFtc285U0xZelBvUEJCM0NGR3dLQmdRQ2dRTGplZTltYmdvVmtzcUlpanNoV2hwZVpldVFob0IzSzFkTUoKVVg5Q2VUTjVSYm9FaDB2Q3JYN2t4WmRLTDRIdC96ZVd6blN0bndVQWVVakpRYWc2WUxKUXp1c2lwd3lXaUxoawp2K01EeGtTVkJLZTRCUUEvTVlyLzdhczl0ZSt6ck5tOHd0NXlrRkxjTlI5ZTMyM0JYOXBkMFpmNlUvVTlndGZjClJDZDRad0tCZ0JEMDAzL29seWg3em5sZ01XTjg2UzZ0NGs2YXJUTXZNNk5KaWRJTmZSUkwrZXNxSVk0SitCNGQKOHpXRE9JVTd2K1dNdFJPK0FsMEdLRDhmQzRjRnNaeVV2c1Z3cWN3WGpKOHdRQ3BDd2h3V09QcjVLc3NxTFBrWgpKekdzMFB4K0lzL0c5OGdpNVo4Sk82LzRoV3piRlRvMUE1eGRxWXVYSVVEWTZjVU5kTHNUCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=='}}",4139
traefik-hub,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/admission', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'admission', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'ports': [{'name': 'https', 'port': 443, 'targetPort': 'admission'}], 'selector': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}}",470
traefik-hub,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/traefik-hub', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'traefik-hub', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'type': 'LoadBalancer', 'allocateLoadBalancerNodePorts': None, 'selector': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}, 'ports': [{'name': 'web', 'port': 80, 'targetPort': 'web'}, {'name': 'websecure', 'port': 443, 'targetPort': 'websecure'}]}}",610
traefik-hub,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/traefik-hub', 'spec/template/spec/containers/0']","{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}",2073
traefik-hub,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/traefik-hub', 'spec/template/spec/containers/0/env/0']","{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}",2073
traefik-hub,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/traefik-hub', 'spec/template/spec/containers/0']","{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}",2073
traefik-hub,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/traefik-hub', 'spec/template/spec/containers/0']","{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}",2073
traefik-hub,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/traefik-hub', 'spec/template/spec/containers/0']","{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}",2073
traefik-hub,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/traefik-hub', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-hub', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}, 'strategy': {'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}, 'type': 'RollingUpdate'}, 'minReadySeconds': 0, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/path': '/metrics', 'prometheus.io/port': '9100'}, 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'traefik-hub', 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'name', 'operator': 'In', 'values': ['traefik']}]}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'topologySpreadConstraints': [{'maxSkew': 2, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'ScheduleAnyway', 'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}}], 'terminationGracePeriodSeconds': 30, 'hostNetwork': False, 'priorityClassName': None, 'automountServiceAccountToken': True, 'containers': [{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}], 'securityContext': {'fsGroup': 65532}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}]}}}}",3777
traefik-hub,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/traefik-hub', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-hub', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}, 'strategy': {'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}, 'type': 'RollingUpdate'}, 'minReadySeconds': 0, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/path': '/metrics', 'prometheus.io/port': '9100'}, 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'traefik-hub', 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'name', 'operator': 'In', 'values': ['traefik']}]}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'topologySpreadConstraints': [{'maxSkew': 2, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'ScheduleAnyway', 'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}}], 'terminationGracePeriodSeconds': 30, 'hostNetwork': False, 'priorityClassName': None, 'automountServiceAccountToken': True, 'containers': [{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}], 'securityContext': {'fsGroup': 65532}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}]}}}}",3777
traefik-hub,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/traefik-hub', 'spec/template/spec/containers/0']","{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}",2073
traefik-hub,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/traefik-hub', 'spec/template/spec/containers/0']","{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}",2073
traefik-hub,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/traefik-hub', 'resource_type']",{},29796
helmchart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/helmchart', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",290
helmchart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/helmchart', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}}",492
helmchart,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/helmchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/helmchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/helmchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/helmchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/helmchart', 'spec/template/spec/containers/0']","{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",313
helmchart,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/helmchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/helmchart-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/helmchart-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/helmchart-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/helmchart-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/helmchart-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/helmchart-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}",83
helmchart,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/helmchart-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/helmchart', 'resource_type']",{},2205
helmchart,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/helmchart-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
ussigw-configuration,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/ussigw-configuration-service', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'ussigw-configuration-service'}, 'spec': {'type': 'NodePort', 'selector': {'app': 'configuration'}, 'ports': [{'name': 'configuration', 'protocol': 'TCP', 'port': 8880, 'targetPort': 8880, 'nodePort': 30180}]}}",271
ussigw-configuration,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/configuration', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/configuration', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/configuration', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/configuration', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/configuration', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/configuration', 'spec/template/spec/containers/0']","{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",550
ussigw-configuration,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/configuration', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ussigw-conf-configmap', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ussigw-conf-configmap', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-weight': '-300', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'data': {'SPRING_PROFILES_ACTIVE': 'local,jdbc', 'SPRING_CONFIG_LOCATION': '/space/ussigw/properties/configuration/', 'SPRING_CONFIG_NAME': 'ussigw-configuration-spring'}}",393
ussigw-configuration,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ussigw-conf-data-configmap', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ussigw-conf-data-configmap', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-weight': '-300', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'data': {'trace.conf': 'set filter product=ussigw:ALL:DEBUG\nset dispatcher file=/space/ussigw/log/ussigw_trace'}}",341
ussigw-configuration,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ussigw-conf-properties-configmap', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ussigw-conf-properties-configmap', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-weight': '-300', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'data': {'ussigw-configuration-spring.properties': ""logging.config = /space/ussigw/properties/configuration/ussigw-configuration-logback.xml\n\nserver.port = 8880\n\nspring.datasource.platform = mysql\nspring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://ussigw-mysql:3306/ussigw_config\nspring.datasource.username = root\nspring.datasource.password = tneu34\n\nspring.datasource.hikari.connection-timeout=5000\nspring.datasource.hikari.maximum-pool-size=10\n\nspring.cloud.config.server.default-profile=local\nspring.cloud.config.server.default-label=master\nspring.cloud.config.server.jdbc.sql=SELECT `key`, `value` FROM `PROPERTIES` WHERE (`application`=? OR `application`='common') AND `profile`=? AND `label`=?;\nspring.cloud.config.server.jdbc.order=0\n\nconfig.table.name=PROPERTIES\nconfig.sql.regex=\nconfig.sql.replacement=\n\nussigw.actuator.refresh.url=http://ussigw-core-service:8098/actuator/refresh\n\ncanvas.flexStat.mongoDbRef=10.35.36.231:27017,10.35.36.234:27017\ncanvas.flexStat.mongoDbUser=admin\ncanvas.flexStat.mongoDbPassword=\ncanvas.flexStat.mongoDbName=USSIGW\ncanvas.flexStat.mongoCollection=statistics\n\nspring.security.user.name=admin\nspring.security.user.password=tneu34\n"", 'ussigw-configuration-logback.xml': '<?xml version=""1.0"" encoding=""UTF-8""?>\n<configuration>\n\n    <property name=""HOME_LOG"" value=""/space/ussigw/log""/>\n\n    <appender name=""CONF-ROLLING"" class=""ch.qos.logback.core.rolling.RollingFileAppender"">\n        <!-- path and name of active log file -->\n        <file>${HOME_LOG}/configuration.log</file>\n\n        <rollingPolicy class=""ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"">\n            <!-- path and name pattern of archived log files -->\n            <fileNamePattern>${HOME_LOG}/configuration-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n\n            <!-- each archived file, size max 50MB -->\n            <maxFileSize>50MB</maxFileSize>\n\n            <!-- total size of all archived files, if total size > 1GB, it will delete old archived file -->\n            <totalSizeCap>1GB</totalSizeCap>\n\n            <!-- 60 days to keep archived files -->\n            <maxHistory>60</maxHistory>\n        </rollingPolicy>\n\n        <encoder>\n            <pattern>%msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name=""com.telenity.ussigw.configuration"" level=""info"" additivity=""false"">\n        <appender-ref ref=""CONF-ROLLING""/>\n    </logger>\n\n    <root level=""info"">\n        <appender-ref ref=""CONF-ROLLING""/>\n    </root>\n\n</configuration>\n'}}",2831
ussigw-configuration,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}",114
ussigw-configuration,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/configuration', 'resource_type']",{},5333
ussigw-configuration,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/dummy-test', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
deis-workflow,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/deis-workflow', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",306
deis-workflow,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/deis-workflow', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}}",516
deis-workflow,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/deis-workflow', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/deis-workflow', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/deis-workflow', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/deis-workflow', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/deis-workflow', 'spec/template/spec/containers/0']","{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",317
deis-workflow,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/deis-workflow', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/deis-workflow-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/deis-workflow-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/deis-workflow-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/deis-workflow-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/deis-workflow-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/deis-workflow-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}",87
deis-workflow,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/deis-workflow-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/deis-workflow', 'resource_type']",{},2497
deis-workflow,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/deis-workflow-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
rclone,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/rclone-rclone-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'rclone-rclone-config', 'labels': {'app': 'rclone'}}, 'data': {'rclone.conf': '# Rclone Config\n'}}",162
rclone,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['CronJob/default/rclone', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['CronJob/default/rclone', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['CronJob/default/rclone', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['CronJob/default/rclone', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['CronJob/default/rclone', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['CronJob/default/rclone', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}",299
rclone,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['CronJob/default/rclone', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
test-helm-app1,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/-deployment', 'spec/template/spec/containers/0']","{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}",110
test-helm-app1,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/-deployment', 'resource_type']",{},553
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/thingsboard-rabbitmq', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'secrets': [{'name': 'thingsboard-rabbitmq'}]}",334
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/thingsboard-rabbitmq', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'data': {'rabbitmq-password': 'cGFzc3dvcmQx', 'rabbitmq-erlang-cookie': 'R0RGU0VLR1pOU0JSU0VJRlNSVE5TRklLU0VLTE1FRVI='}}",418
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/thingsboard-rabbitmq-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'thingsboard-rabbitmq-config', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'rabbitmq.conf': '## Username and password\n##\ndefault_user = admin\ndefault_pass = CHANGEME\n## Clustering\n##\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator = min-masters\n# enable guest user\nloopback_users.guest = false\n#default_vhost = default-vhost\n#disk_free_limit.absolute = 50MB\n#load_definitions = /app/load_definition.json'}}",917
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/thingsboard-rabbitmq-endpoint-reader', '']","{'kind': 'Role', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'thingsboard-rabbitmq-endpoint-reader', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': [''], 'resources': ['endpoints'], 'verbs': ['get']}, {'apiGroups': [''], 'resources': ['events'], 'verbs': ['create']}]}",464
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/thingsboard-rabbitmq-endpoint-reader', '']","{'kind': 'RoleBinding', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'thingsboard-rabbitmq-endpoint-reader', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'thingsboard-rabbitmq'}], 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'Role', 'name': 'thingsboard-rabbitmq-endpoint-reader'}}",518
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/thingsboard-rabbitmq-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'thingsboard-rabbitmq-headless', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'clusterIP': 'None', 'ports': [{'name': 'epmd', 'port': 4369, 'targetPort': 'epmd'}, {'name': 'amqp', 'port': 5672, 'targetPort': 'amqp'}, {'name': 'dist', 'port': 25672, 'targetPort': 'dist'}, {'name': 'http-stats', 'port': 15672, 'targetPort': 'stats'}], 'selector': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}}",653
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/thingsboard-rabbitmq', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'NodePort', 'externalTrafficPolicy': 'Cluster', 'ports': [{'name': 'amqp', 'port': 5672, 'targetPort': 'amqp'}, {'name': 'epmd', 'port': 4369, 'targetPort': 'epmd'}, {'name': 'dist', 'port': 25672, 'targetPort': 'dist'}, {'name': 'http-stats', 'port': 15672, 'targetPort': 'stats'}], 'selector': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}}",679
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/thingsboard', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'thingsboard', 'labels': {'helm.sh/chart': 'thingsboard-0.1.2', 'app.kubernetes.io/name': 'thingsboard', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/version': '2.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'NodePort', 'ports': [{'port': 8080, 'targetPort': 9090, 'protocol': 'TCP', 'name': 'http'}, {'port': 1883, 'targetPort': 1883, 'protocol': 'TCP', 'name': 'mqtt'}, {'port': 5683, 'targetPort': 5683, 'protocol': 'UDP', 'name': 'caop'}], 'selector': {'app': 'thingsboard'}}}",578
thingsboard,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0/env/10']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/thingsboard-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/thingsboard-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/thingsboard-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/thingsboard-rabbitmq', 'spec/template/spec/containers/0']","{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}",2738
thingsboard,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/thingsboard-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/thingsboard', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['StatefulSet/default/thingsboard', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/thingsboard', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/thingsboard', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/thingsboard', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['StatefulSet/default/thingsboard', 'spec/template/spec/containers/0']","{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}",724
thingsboard,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/thingsboard', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/thingsboard-rabbitmq', 'resource_type']",{},10387
thingsboard,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/thingsboard', 'resource_type']",{},10387
pyspark-notebook,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/pyspark-notebook', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",318
pyspark-notebook,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/pyspark-notebook', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'Role', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': [''], 'resources': ['pods'], 'verbs': ['create', 'get', 'delete', 'list', 'watch']}, {'apiGroups': [''], 'resources': ['services'], 'verbs': ['get', 'create']}, {'apiGroups': [''], 'resources': ['pods/log'], 'verbs': ['get', 'list']}, {'apiGroups': [''], 'resources': ['pods/exec'], 'verbs': ['create', 'get']}, {'apiGroups': [''], 'resources': ['configmaps'], 'verbs': ['get', 'create', 'list', 'watch', 'delete']}]}",776
pyspark-notebook,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/pyspark-notebook', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'pyspark-notebook', 'namespace': 'default'}], 'roleRef': {'kind': 'Role', 'name': 'pyspark-notebook', 'apiGroup': 'rbac.authorization.k8s.io'}}",533
pyspark-notebook,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/pyspark-notebook', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'selector': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}, 'ports': [{'name': 'http', 'protocol': 'TCP', 'port': 8888, 'targetPort': 'http'}, {'name': 'blockmanager', 'protocol': 'TCP', 'port': 7777, 'targetPort': 'blockmanager'}, {'name': 'driver', 'protocol': 'TCP', 'port': 2222, 'targetPort': 'driver'}]}}",721
pyspark-notebook,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/pyspark-notebook-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'pyspark-notebook-headless', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true'}}, 'spec': {'clusterIP': 'None', 'publishNotReadyAddresses': True, 'selector': {'app': 'pyspark-notebook'}, 'ports': [{'name': 'http', 'port': 8888}, {'name': 'blockmanager', 'port': 7777}, {'name': 'driver', 'port': 2222}]}}",626
pyspark-notebook,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/pyspark-notebook', 'spec/template/spec/containers/0']","{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}",800
pyspark-notebook,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/pyspark-notebook', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
pyspark-notebook,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/pyspark-notebook', 'spec/template/spec/containers/0']","{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}",800
pyspark-notebook,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/pyspark-notebook', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
pyspark-notebook,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/pyspark-notebook', 'spec/template/spec/containers/0']","{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}",800
pyspark-notebook,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/pyspark-notebook', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
pyspark-notebook,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/pyspark-notebook', 'spec/template/spec/containers/0']","{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}",800
pyspark-notebook,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/pyspark-notebook', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
pyspark-notebook,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/pyspark-notebook', 'resource_type']",{},4912
horizon-satellite,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/horizon-satellite', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",321
horizon-satellite,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/horizon-satellite', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'LoadBalancer', 'ports': [{'port': 22, 'name': 'ssh', 'targetPort': 'ssh', 'protocol': 'TCP'}], 'selector': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}}",540
horizon-satellite,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/horizon-satellite', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/horizon-satellite', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/horizon-satellite', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/horizon-satellite', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/horizon-satellite', 'spec/template/spec/containers/0']","{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}",348
horizon-satellite,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/horizon-satellite', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/horizon-satellite', 'resource_type']",{},1917
billing,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/billing', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': None}, 'automountServiceAccountToken': False}",402
billing,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/billing', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'type': 'ClusterIP', 'ipFamilyPolicy': 'PreferDualStack', 'ipFamilies': ['IPv4'], 'ports': [{'name': 'grpc', 'port': 50051, 'targetPort': 'grpc', 'protocol': 'TCP', 'appProtocol': None}], 'selector': {'app.kubernetes.io/name': 'billing', 'app.kubernetes.io/instance': 'billing'}}}",625
billing,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/billing', 'spec/template/spec/containers/0/env/0']","{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}",1438
billing,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/billing', 'spec/template/spec/containers/0']","{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}",1438
billing,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/billing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'billing', 'app.kubernetes.io/instance': 'billing'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'billing', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}]}}}}",2549
billing,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/billing', 'spec/template/spec/containers/0']","{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}",1438
billing,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/billing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'billing', 'app.kubernetes.io/instance': 'billing'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'billing', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}]}}}}",2549
billing,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/billing', 'spec/template/spec/containers/0']","{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}",1438
billing,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/billing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'billing', 'app.kubernetes.io/instance': 'billing'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'billing', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}]}}}}",2549
billing,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/billing', 'resource_type']",{},4483
oauth2-proxy,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/oauth2-proxy', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'release': 'oauth2-proxy', 'heritage': 'Helm'}, 'name': 'oauth2-proxy'}}",197
oauth2-proxy,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/oauth2-proxy', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'type': 'Opaque', 'data': {'cookie-secret': 'WFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFg=', 'client-secret': 'WFhYWFhYWFg=', 'client-id': 'WFhYWFhYWA=='}}",344
oauth2-proxy,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/oauth2-proxy', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'data': {'oauth2_proxy.cfg': 'email_domains = [ ""*"" ]\nupstreams = [ ""file:///dev/null"" ]'}}",285
oauth2-proxy,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/oauth2-proxy', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'release': 'oauth2-proxy', 'heritage': 'Helm'}, 'name': 'oauth2-proxy'}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}}",367
oauth2-proxy,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0/env/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/oauth2-proxy', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/oauth2-proxy', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/oauth2-proxy', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/oauth2-proxy', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/oauth2-proxy', 'spec/template/spec/containers/0']","{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}",1105
oauth2-proxy,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/oauth2-proxy', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/oauth2-proxy', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/oauth2-proxy', 'resource_type']",{},3252
myfirstchart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/myfirstchart', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'NodePort', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http', 'nodePort': 31239}], 'selector': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}}",527
myfirstchart,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/myfirstchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/myfirstchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/myfirstchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/myfirstchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/myfirstchart', 'spec/template/spec/containers/0']","{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",345
myfirstchart,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/myfirstchart', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/myfirstchart', 'resource_type']",{},1497
mimir-openshift-experimental,checkov,CKV_K8S_32,check_31,General Policies,Ensure default seccomp profile set to docker/default or runtime/default,"['PodSecurityPolicy/default/mimir-openshift-experimental', '']",{},56155
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/mimir-service-account', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'mimir-service-account', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}}",354
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/mimir-openshift-experimental-minio', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'type': 'Opaque', 'data': {'accesskey': 'Z3JhZmFuYS1taW1pcg==', 'secretkey': 'c3VwZXJzZWNyZXQ='}}",312
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/mimir-openshift-experimental-config', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'mimir-openshift-experimental-config', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'mimir.yaml': 'bXVsdGl0ZW5hbmN5X2VuYWJsZWQ6IGZhbHNlCgpsaW1pdHM6IHt9CgphY3Rpdml0eV90cmFja2VyOgogIGZpbGVwYXRoOiAvZGF0YS9tZXRyaWNzLWFjdGl2aXR5LmxvZwoKYWxlcnRtYW5hZ2VyOgogIGRhdGFfZGlyOiAnL2RhdGEnCiAgZW5hYmxlX2FwaTogdHJ1ZQogIGV4dGVybmFsX3VybDogJy9hbGVydG1hbmFnZXInCmFsZXJ0bWFuYWdlcl9zdG9yYWdlOgogIGJhY2tlbmQ6IHMzCiAgczM6CiAgICBlbmRwb2ludDogbWltaXItb3BlbnNoaWZ0LWV4cGVyaW1lbnRhbC1taW5pby5kZWZhdWx0LnN2Yzo5MDAwCiAgICBidWNrZXRfbmFtZTogbWltaXItcnVsZXIKICAgIGFjY2Vzc19rZXlfaWQ6IGdyYWZhbmEtbWltaXIKICAgIHNlY3JldF9hY2Nlc3Nfa2V5OiBzdXBlcnNlY3JldAogICAgaW5zZWN1cmU6IHRydWUKCmZyb250ZW5kX3dvcmtlcjoKICBmcm9udGVuZF9hZGRyZXNzOiBtaW1pci1vcGVuc2hpZnQtZXhwZXJpbWVudGFsLXF1ZXJ5LWZyb250ZW5kLWhlYWRsZXNzLmRlZmF1bHQuc3ZjOjkwOTUKCnJ1bGVyOgogIGVuYWJsZV9hcGk6IHRydWUKICBydWxlX3BhdGg6ICcvZGF0YScKICBhbGVydG1hbmFnZXJfdXJsOiBkbnNzcnZub2EraHR0cDovL19odHRwLW1ldHJpY3MuX3RjcC5taW1pci1vcGVuc2hpZnQtZXhwZXJpbWVudGFsLWFsZXJ0bWFuYWdlci1oZWFkbGVzcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsL2FsZXJ0bWFuYWdlcgoKc2VydmVyOgogIGdycGNfc2VydmVyX21heF9yZWN2X21zZ19zaXplOiAxMDQ4NTc2MDAKICBncnBjX3NlcnZlcl9tYXhfc2VuZF9tc2dfc2l6ZTogMTA0ODU3NjAwCiAgZ3JwY19zZXJ2ZXJfbWF4X2NvbmN1cnJlbnRfc3RyZWFtczogMTAwMAoKZnJvbnRlbmQ6CiAgbG9nX3F1ZXJpZXNfbG9uZ2VyX3RoYW46IDEwcwogIGFsaWduX3F1ZXJpZXNfd2l0aF9zdGVwOiB0cnVlCgpjb21wYWN0b3I6CiAgZGF0YV9kaXI6ICIvZGF0YSIKCmluZ2VzdGVyOgogIHJpbmc6CiAgICBmaW5hbF9zbGVlcDogMHMKICAgIG51bV90b2tlbnM6IDUxMgoKaW5nZXN0ZXJfY2xpZW50OgogIGdycGNfY2xpZW50X2NvbmZpZzoKICAgIG1heF9yZWN2X21zZ19zaXplOiAxMDQ4NTc2MDAKICAgIG1heF9zZW5kX21zZ19zaXplOiAxMDQ4NTc2MDAKCnJ1bnRpbWVfY29uZmlnOgogIGZpbGU6IC92YXIvbWltaXIvcnVudGltZS55YW1sCgptZW1iZXJsaXN0OgogIGFib3J0X2lmX2NsdXN0ZXJfam9pbl9mYWlsczogZmFsc2UKICBjb21wcmVzc2lvbl9lbmFibGVkOiBmYWxzZQogIGpvaW5fbWVtYmVyczoKICAtIG1pbWlyLW9wZW5zaGlmdC1leHBlcmltZW50YWwtZ29zc2lwLXJpbmcKCiMgVGhpcyBjb25maWd1cmVzIGhvdyB0aGUgc3RvcmUtZ2F0ZXdheSBzeW5jaHJvbml6ZXMgYmxvY2tzIHN0b3JlZCBpbiB0aGUgYnVja2V0LiBJdCB1c2VzIE1pbmlvIGJ5IGRlZmF1bHQgZm9yIGdldHRpbmcgc3RhcnRlZCAoY29uZmlndXJlZCB2aWEgZmxhZ3MpIGJ1dCB0aGlzIHNob3VsZCBiZSBjaGFuZ2VkIGZvciBwcm9kdWN0aW9uIGRlcGxveW1lbnRzLgpibG9ja3Nfc3RvcmFnZToKICBiYWNrZW5kOiBzMwogIHRzZGI6CiAgICBkaXI6IC9kYXRhL3RzZGIKICBidWNrZXRfc3RvcmU6CiAgICBzeW5jX2RpcjogL2RhdGEvdHNkYi1zeW5jCiAgczM6CiAgICBlbmRwb2ludDogbWltaXItb3BlbnNoaWZ0LWV4cGVyaW1lbnRhbC1taW5pby5kZWZhdWx0LnN2Yzo5MDAwCiAgICBidWNrZXRfbmFtZTogbWltaXItdHNkYgogICAgYWNjZXNzX2tleV9pZDogZ3JhZmFuYS1taW1pcgogICAgc2VjcmV0X2FjY2Vzc19rZXk6IHN1cGVyc2VjcmV0CiAgICBpbnNlY3VyZTogdHJ1ZQpydWxlcl9zdG9yYWdlOgogIGJhY2tlbmQ6IHMzCiAgczM6CiAgICBlbmRwb2ludDogbWltaXItb3BlbnNoaWZ0LWV4cGVyaW1lbnRhbC1taW5pby5kZWZhdWx0LnN2Yzo5MDAwCiAgICBidWNrZXRfbmFtZTogbWltaXItcnVsZXIKICAgIGFjY2Vzc19rZXlfaWQ6IGdyYWZhbmEtbWltaXIKICAgIHNlY3JldF9hY2Nlc3Nfa2V5OiBzdXBlcnNlY3JldAogICAgaW5zZWN1cmU6IHRydWUK'}}",3065
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/mimir-openshift-experimental-minio', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'data': {'initialize': '#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\nMC_CONFIG_DIR=""/tmp/minio/mc/""\nMC=""/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}""\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can\'t read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo ""Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT"" ;\n  MC_COMMAND=""${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET"" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\""Failed attempts: $ATTEMPTS\\"" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n  VERSIONING=$4\n\n  # Purge the bucket, if set & exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo ""Purging bucket \'$BUCKET\'.""\n      set +e ; # don\'t exit if this fails\n      ${MC} rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo ""Bucket \'$BUCKET\' does not exist, skipping purge.""\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo ""Creating bucket \'$BUCKET\'""\n    ${MC} mb myminio/$BUCKET\n  else\n    echo ""Bucket \'$BUCKET\' already exists.""\n  fi\n\n\n  # set versioning for bucket\n  if [ ! -z $VERSIONING ] ; then\n    if [ $VERSIONING = true ] ; then\n        echo ""Enabling versioning for \'$BUCKET\'""\n        ${MC} version enable myminio/$BUCKET\n    elif [ $VERSIONING = false ] ; then\n        echo ""Suspending versioning for \'$BUCKET\'""\n        ${MC} version suspend myminio/$BUCKET\n    fi\n  else\n      echo ""Bucket \'$BUCKET\' versioning unchanged.""\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo ""Setting policy of bucket \'$BUCKET\' to \'$POLICY\'.""\n  ${MC} policy set $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nscheme=http\nconnectToMinio $scheme\n# Create the buckets\ncreateBucket mimir-tsdb none false \ncreateBucket mimir-ruler none false \ncreateBucket enterprise-metrics-tsdb none false \ncreateBucket enterprise-metrics-admin none false \ncreateBucket enterprise-metrics-ruler none false'}}",3271
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/mimir-openshift-experimental-nginx', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'nginx.conf': 'worker_processes  5;  ## Default: 1\nerror_log  /dev/stderr;\npid        /tmp/nginx.pid;\nworker_rlimit_nofile 8192;\n\nevents {\n  worker_connections  4096;  ## Default: 1024\n}\n\nhttp {\n  client_body_temp_path /tmp/client_temp;\n  proxy_temp_path       /tmp/proxy_temp_path;\n  fastcgi_temp_path     /tmp/fastcgi_temp;\n  uwsgi_temp_path       /tmp/uwsgi_temp;\n  scgi_temp_path        /tmp/scgi_temp;\n\n  default_type application/octet-stream;\n  log_format   main \'$remote_addr - $remote_user [$time_local]  $status \'\n        \'""$request"" $body_bytes_sent ""$http_referer"" \'\n        \'""$http_user_agent"" ""$http_x_forwarded_for""\';\n  access_log   /dev/stderr  main;\n\n  sendfile     on;\n  tcp_nopush   on;\n  resolver kube-dns.kube-system.svc.cluster.local;\n\n  server {\n    listen 8080;\n\n    location = / {\n      return 200 \'OK\';\n      auth_basic off;\n    }\n    proxy_set_header X-Scope-OrgID 0;\n\n    # Distributor endpoints\n    location /distributor {\n      proxy_pass      http://mimir-openshift-experimental-distributor.default.svc.cluster.local:8080$request_uri;\n    }\n    location = /api/v1/push {\n      proxy_pass      http://mimir-openshift-experimental-distributor.default.svc.cluster.local:8080$request_uri;\n    }\n\n    # Alertmanager endpoints\n    location /alertmanager {\n      proxy_pass      http://mimir-openshift-experimental-alertmanager.default.svc.cluster.local:8080$request_uri;\n    }\n    location = /multitenant_alertmanager/status {\n      proxy_pass      http://mimir-openshift-experimental-alertmanager.default.svc.cluster.local:8080$request_uri;\n    }\n    location = /api/v1/alerts {\n      proxy_pass      http://mimir-openshift-experimental-alertmanager.default.svc.cluster.local:8080$request_uri;\n    }\n\n    # Ruler endpoints\n    location /prometheus/config/v1/rules {\n      proxy_pass      http://mimir-openshift-experimental-ruler.default.svc.cluster.local:8080$request_uri;\n    }\n    location /prometheus/api/v1/rules {\n      proxy_pass      http://mimir-openshift-experimental-ruler.default.svc.cluster.local:8080$request_uri;\n    }\n\n    location /api/v1/rules {\n      proxy_pass      http://mimir-openshift-experimental-ruler.default.svc.cluster.local:8080$request_uri;\n    }\n    location /prometheus/api/v1/alerts {\n      proxy_pass      http://mimir-openshift-experimental-ruler.default.svc.cluster.local:8080$request_uri;\n    }\n    location /prometheus/rules {\n      proxy_pass      http://mimir-openshift-experimental-ruler.default.svc.cluster.local:8080$request_uri;\n    }\n    location = /ruler/ring {\n      proxy_pass      http://mimir-openshift-experimental-ruler.default.svc.cluster.local:8080$request_uri;\n    }\n\n    # Rest of /prometheus goes to the query frontend\n    location /prometheus {\n      proxy_pass      http://mimir-openshift-experimental-query-frontend.default.svc.cluster.local:8080$request_uri;\n    }\n\n    # Buildinfo endpoint can go to any component\n    location = /api/v1/status/buildinfo {\n      proxy_pass      http://mimir-openshift-experimental-query-frontend.default.svc.cluster.local:8080$request_uri;\n    }\n  }\n}\n'}}",3563
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/mimir-openshift-experimental-runtime', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'mimir-openshift-experimental-runtime', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'runtime.yaml': '\n{}\n'}}",381
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/mimir-openshift-experimental', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'Role', 'metadata': {'name': 'mimir-openshift-experimental', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': ['extensions'], 'resources': ['podsecuritypolicies'], 'verbs': ['use'], 'resourceNames': ['mimir-openshift-experimental']}]}",507
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/mimir-openshift-experimental', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'name': 'mimir-openshift-experimental', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'Role', 'name': 'mimir-openshift-experimental'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'mimir-service-account', 'namespace': 'default'}]}",574
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-minio', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'name': 'http', 'port': 9000, 'protocol': 'TCP', 'targetPort': 9000}], 'selector': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}}",401
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-alertmanager-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager-headless', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'prometheus.io/service-monitor': 'false'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'publishNotReadyAddresses': True, 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}, {'port': 9094, 'protocol': 'TCP', 'name': 'cluster'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}}",979
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-alertmanager', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}}",819
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-compactor', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}}",810
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-distributor', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}}",816
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-gossip-ring', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-gossip-ring', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'gossip-ring', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'ports': [{'name': 'gossip-ring', 'port': 7946, 'protocol': 'TCP', 'targetPort': 7946}], 'publishNotReadyAddresses': True, 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/part-of': 'memberlist'}}}",722
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-ingester-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-ingester-headless', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'prometheus.io/service-monitor': 'false'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'ports': [{'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}}",790
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-ingester', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}}",807
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-nginx', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'name': 'http-metric', 'port': 80, 'targetPort': 'http-metric', 'protocol': 'TCP'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}}",678
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-overrides-exporter', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-overrides-exporter', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}}",794
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-querier', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}}",804
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-query-frontend-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend-headless', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'prometheus.io/service-monitor': 'false'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'publishNotReadyAddresses': True, 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}}",888
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-query-frontend', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}}",782
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-ruler', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}}",725
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-store-gateway-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway-headless', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'prometheus.io/service-monitor': 'false'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'ports': [{'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}}",805
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mimir-openshift-experimental-store-gateway', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'protocol': 'TCP', 'name': 'http-metrics', 'targetPort': 'http-metrics'}, {'port': 9095, 'protocol': 'TCP', 'name': 'grpc', 'targetPort': 'grpc'}], 'selector': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}}",822
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0/env/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mimir-openshift-experimental-minio', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mimir-openshift-experimental-minio', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mimir-openshift-experimental-minio', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mimir-openshift-experimental-minio', 'spec/template/spec/containers/0']","{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",655
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mimir-openshift-experimental-minio', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mimir-openshift-experimental-distributor', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/mimir-openshift-experimental-distributor', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mimir-openshift-experimental-distributor', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mimir-openshift-experimental-distributor', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mimir-openshift-experimental-distributor', 'spec/template/spec/containers/0']","{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",800
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mimir-openshift-experimental-distributor', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mimir-openshift-experimental-nginx', 'spec/template/spec/containers/0']","{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}",631
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mimir-openshift-experimental-nginx', 'spec/template/spec/containers/0']","{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}",631
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mimir-openshift-experimental-nginx', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mimir-openshift-experimental-nginx', 'spec/template/spec/containers/0']","{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}",631
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mimir-openshift-experimental-nginx', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/mimir-openshift-experimental-nginx', 'spec/template/spec/containers/0']","{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}",631
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mimir-openshift-experimental-nginx', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mimir-openshift-experimental-nginx', 'spec/template/spec/containers/0']","{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}",631
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mimir-openshift-experimental-nginx', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', 'spec/template/spec/containers/0']","{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",826
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', 'spec/template/spec/containers/0']","{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",826
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', 'spec/template/spec/containers/0']","{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",826
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', 'spec/template/spec/containers/0']","{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",826
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', 'spec/template/spec/containers/0']","{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",826
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', 'spec/template/spec/containers/0']","{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",826
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', 'spec/template/spec/containers/0']","{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",826
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mimir-openshift-experimental-overrides-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mimir-openshift-experimental-querier', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['querier']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2686
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/mimir-openshift-experimental-querier', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['querier']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2686
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mimir-openshift-experimental-querier', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['querier']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2686
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mimir-openshift-experimental-querier', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['querier']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2686
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mimir-openshift-experimental-querier', 'spec/template/spec/containers/0']","{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",792
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mimir-openshift-experimental-querier', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['querier']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2686
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mimir-openshift-experimental-query-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/mimir-openshift-experimental-query-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mimir-openshift-experimental-query-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mimir-openshift-experimental-query-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mimir-openshift-experimental-query-frontend', 'spec/template/spec/containers/0']","{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",723
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mimir-openshift-experimental-query-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mimir-openshift-experimental-ruler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/mimir-openshift-experimental-ruler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mimir-openshift-experimental-ruler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mimir-openshift-experimental-ruler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mimir-openshift-experimental-ruler', 'spec/template/spec/containers/0']","{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",788
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mimir-openshift-experimental-ruler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-alertmanager', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '1Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2642
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-alertmanager', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '1Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2642
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-alertmanager', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '1Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2642
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-alertmanager', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '1Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2642
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', 'spec/template/spec/containers/0']","{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",821
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/mimir-openshift-experimental-alertmanager', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-alertmanager', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '1Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2642
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/mimir-openshift-experimental-compactor', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-compactor', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['compactor']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2807
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/mimir-openshift-experimental-compactor', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-compactor', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['compactor']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2807
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/mimir-openshift-experimental-compactor', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-compactor', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['compactor']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2807
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/mimir-openshift-experimental-compactor', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-compactor', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['compactor']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2807
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/mimir-openshift-experimental-compactor', 'spec/template/spec/containers/0']","{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",779
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/mimir-openshift-experimental-compactor', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-compactor', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['compactor']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2807
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/mimir-openshift-experimental-ingester', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'podManagementPolicy': 'Parallel', 'replicas': 3, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-ingester-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2590
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/mimir-openshift-experimental-ingester', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'podManagementPolicy': 'Parallel', 'replicas': 3, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-ingester-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2590
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/mimir-openshift-experimental-ingester', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'podManagementPolicy': 'Parallel', 'replicas': 3, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-ingester-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2590
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/mimir-openshift-experimental-ingester', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'podManagementPolicy': 'Parallel', 'replicas': 3, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-ingester-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2590
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/mimir-openshift-experimental-ingester', 'spec/template/spec/containers/0']","{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",777
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/mimir-openshift-experimental-ingester', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'podManagementPolicy': 'Parallel', 'replicas': 3, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-ingester-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2590
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-store-gateway-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['store-gateway']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2811
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-store-gateway-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['store-gateway']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2811
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-store-gateway-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['store-gateway']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2811
mimir-openshift-experimental,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-store-gateway-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['store-gateway']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2811
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', 'spec/template/spec/containers/0']","{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}",787
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/mimir-openshift-experimental-store-gateway', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-store-gateway-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['store-gateway']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2811
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Job/default/mimir-openshift-experimental-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Job/default/mimir-openshift-experimental-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Job/default/mimir-openshift-experimental-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Job/default/mimir-openshift-experimental-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Job/default/mimir-openshift-experimental-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Job/default/mimir-openshift-experimental-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Job/default/mimir-openshift-experimental-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', 'spec/template/spec/containers/0']","{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}",399
mimir-openshift-experimental,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Job/default/mimir-openshift-experimental-minio-make-bucket-job', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-minio', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-distributor', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-nginx', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-overrides-exporter', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-querier', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-query-frontend', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-ruler', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-alertmanager', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-compactor', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-ingester', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-store-gateway', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-make-bucket-job', 'resource_type']",{},56155
mimir-openshift-experimental,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mimir-openshift-experimental-minio-make-bucket-job', 'resource_type']",{},56155
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/flagsmith-postgresql', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'data': {'postgres-password': 'SmNFalhadkNHeg=='}}",351
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/flagsmith-flagsmith', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'flagsmith-flagsmith', 'namespace': 'default'}, 'data': {'DJANGO_DB_PASSWORD': 'Y2lKOEtmaU1VSw==', 'DATABASE_URL': 'cG9zdGdyZXNxbDovL2ZsYWdzbWl0aDpjaUo4S2ZpTVVLQGZsYWdzbWl0aC1wb3N0Z3Jlc3FsLmRlZmF1bHQuc3ZjOjU0MzIvZmxhZ3NtaXRo', 'ADMIN_INITIAL_PASSWORD': 'eDFIdzEzOEJDeQ==', 'DJANGO_SECRET_KEY': 'TlhkeEN0T1dmSw=='}}",374
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/flagsmith-flagsmith-frontend', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default'}, 'data': None}",130
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/flagsmith-conf', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'flagsmith-conf', 'namespace': 'default'}, 'data': {'admin.py': 'ADMIN_USERNAME         = env(""ADMIN_USERNAME"",         default=""admin"")\nADMIN_EMAIL            = env(""ADMIN_EMAIL"",            default=""admin@example.com"")\nADMIN_INITIAL_PASSWORD = env(""ADMIN_INITIAL_PASSWORD"", default=""password"")\n'}}",365
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/flagsmith-postgresql-hl', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'flagsmith-postgresql-hl', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary', 'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true'}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'publishNotReadyAddresses': True, 'ports': [{'name': 'tcp-postgresql', 'port': 5432, 'targetPort': 'tcp-postgresql'}], 'selector': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}}",704
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/flagsmith-postgresql', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'type': 'ClusterIP', 'sessionAffinity': 'None', 'ports': [{'name': 'tcp-postgresql', 'port': 5432, 'targetPort': 'tcp-postgresql', 'nodePort': None}], 'selector': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}}",646
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/flagsmith-api', '']","{'kind': 'Service', 'apiVersion': 'v1', 'metadata': {'name': 'flagsmith-api', 'namespace': 'default'}, 'spec': {'selector': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}, 'ports': [{'targetPort': 8000, 'port': 8000, 'name': 'api'}], 'type': 'ClusterIP'}}",264
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/flagsmith-frontend', '']","{'kind': 'Service', 'apiVersion': 'v1', 'metadata': {'name': 'flagsmith-frontend', 'namespace': 'default'}, 'spec': {'selector': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}, 'ports': [{'targetPort': 8080, 'port': 8080, 'name': 'frontend'}], 'type': 'ClusterIP'}}",279
flagsmith,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/initContainers/1']","{'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}",371
flagsmith,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0']","{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}",1181
flagsmith,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0/envFrom/0']",{'secretRef': {'name': 'flagsmith-flagsmith'}},46
flagsmith,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/initContainers/1']","{'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}",371
flagsmith,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0']","{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}",1181
flagsmith,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0']","{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}",1181
flagsmith,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/flagsmith-flagsmith-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0']","{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}",1181
flagsmith,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0']","{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}",1181
flagsmith,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/initContainers/1']","{'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}",371
flagsmith,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/flagsmith-flagsmith-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0']","{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}",1181
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/flagsmith-flagsmith-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/initContainers/1']","{'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}",371
flagsmith,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/flagsmith-flagsmith-api', 'spec/template/spec/containers/0']","{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}",1181
flagsmith,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/flagsmith-flagsmith-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/initContainers/0']","{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}",165
flagsmith,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0']","{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}",681
flagsmith,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0/envFrom/0']",{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}},55
flagsmith,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/initContainers/0']","{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}",165
flagsmith,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0']","{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}",681
flagsmith,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0']","{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}",681
flagsmith,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/flagsmith-flagsmith-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0']","{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}",681
flagsmith,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0']","{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}",681
flagsmith,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/initContainers/0']","{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}",165
flagsmith,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/flagsmith-flagsmith-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0']","{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}",681
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/flagsmith-flagsmith-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/initContainers/0']","{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}",165
flagsmith,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/containers/0']","{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}",681
flagsmith,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/flagsmith-flagsmith-frontend', 'spec/template/spec/initContainers/0']","{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}",165
flagsmith,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/flagsmith-flagsmith-frontend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0/env/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/flagsmith-postgresql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/flagsmith-postgresql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/flagsmith-postgresql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/flagsmith-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",1790
flagsmith,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/flagsmith-postgresql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Pod/default/flagsmith-init', 'spec/containers/0/envFrom/0']",{'secretRef': {'name': 'flagsmith-flagsmith'}},46
flagsmith,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/flagsmith-init', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/flagsmith-init', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/flagsmith-init', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/flagsmith-init', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/flagsmith-init', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/flagsmith-init', 'spec/containers/0']","{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}",540
flagsmith,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/flagsmith-init', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/flagsmith-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/flagsmith-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/flagsmith-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/flagsmith-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/flagsmith-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/flagsmith-test', 'spec/containers/0']","{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}",301
flagsmith,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/flagsmith-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/flagsmith-flagsmith-api', 'resource_type']",{},12090
flagsmith,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/flagsmith-flagsmith-frontend', 'resource_type']",{},12090
flagsmith,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/flagsmith-postgresql', 'resource_type']",{},12090
flagsmith,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/flagsmith-init', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/flagsmith-test', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
ussigw-core,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/ussigw-core-service', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'ussigw-core-service'}, 'spec': {'type': 'NodePort', 'selector': {'app': 'core'}, 'ports': [{'name': 'core', 'protocol': 'TCP', 'port': 8098, 'targetPort': 8098}, {'name': 'rmiport', 'protocol': 'TCP', 'port': 32005, 'targetPort': 32005, 'nodePort': 32005}, {'name': 'sip', 'protocol': 'UDP', 'port': 5060, 'targetPort': 5060}]}}",390
ussigw-core,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/core', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/core', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/core', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/core', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/core', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/core', 'spec/template/spec/containers/0']","{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}",700
ussigw-core,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/core', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ussigw-core-configmap', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ussigw-core-configmap', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-weight': '-300', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'data': {'SPRING_PROFILES_ACTIVE': 'local', 'SPRING_CONFIG_LOCATION': '/space/ussigw/properties/core/', 'SPRING_CONFIG_NAME': 'ussigw-core-spring'}}",370
ussigw-core,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ussigw-core-data-configmap', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ussigw-core-data-configmap', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-weight': '-300', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'data': {'trace.conf': 'set filter product=ussigw:ALL:DEBUG\nset dispatcher file=/space/ussigw/log/ussigw_trace', 'sgw_client_config.json': '{\n  ""ssn"" : 8,\n  ""spc"" : {\n    ""zone"" : 1,\n    ""cluster"" : 2,\n    ""member"" : 3\n  },\n  ""serverType"" : ""MOBICENTS"",\n  ""servers"" : [ ""server1:0"", ""server2:1"" ],\n  ""rmiRegistryUrl"" : ""//localhost:2001"",\n  ""rmiHost"" : ""127.0.0.1"",\n  ""applicationName"" : ""ussi"",\n  ""clientId"" : 1,\n  ""mapVersion"" : 9\n}'}}",679
ussigw-core,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ussigw-core-properties-configmap', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ussigw-core-properties-configmap', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-weight': '-300', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'data': {'ussigw-core-spring.properties': 'spring.config.import = optional:configserver:http://ussigw-configuration-service:8880\n\nmanagement.endpoints.web.exposure.include = *\nspring.profiles.active = local\nspring.application.name = core\nspring.cloud.config.label = master\nspring.cloud.config.fail-fast = false\nspring.cloud.config.request-read-timeout = 20000\nspring.cloud.config.username=admin\nspring.cloud.config.password=tneu34\n\nlogging.config = /space/ussigw/properties/core/ussigw-core-logback.xml\n', 'ussigw-core-logback.xml': '<?xml version=""1.0"" encoding=""UTF-8""?>\n<configuration>\n\n    <property name=""HOME_LOG"" value=""/space/ussigw/log""/>\n\n    <appender name=""CORE-ROLLING"" class=""ch.qos.logback.core.rolling.RollingFileAppender"">\n        <!-- path and name of active log file -->\n        <file>${HOME_LOG}/core.log</file>\n\n        <rollingPolicy class=""ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"">\n            <!-- path and name pattern of archived log files -->\n            <fileNamePattern>${HOME_LOG}/core-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n\n            <!-- each archived file, size max 50MB -->\n            <maxFileSize>50MB</maxFileSize>\n\n            <!-- total size of all archived files, if total size > 1GB, it will delete old archived file -->\n            <totalSizeCap>1GB</totalSizeCap>\n\n            <!-- 60 days to keep archived files -->\n            <maxHistory>60</maxHistory>\n        </rollingPolicy>\n\n        <encoder>\n            <pattern>%msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name=""com.telenity.ussigw.core"" level=""info"" additivity=""false"">\n        <appender-ref ref=""CORE-ROLLING""/>\n    </logger>\n\n    <root level=""info"">\n        <appender-ref ref=""CORE-ROLLING""/>\n    </root>\n\n</configuration>\n'}}",2057
ussigw-core,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/dummy-test', 'spec/containers/0']","{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}",105
ussigw-core,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/dummy-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/core', 'resource_type']",{},5269
ussigw-core,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/dummy-test', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
squid,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/squid-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'squid-config', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'data': {'squid.conf': 'acl SSL_ports port 443\nacl Safe_ports port 80\t\t# http\nacl Safe_ports port 443\t\t# https\nacl CONNECT method CONNECT\n\n# Reject local network\nacl restricted_destination_subnetworks dst 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16\n\n# Recommended minimum Access Permission configuration:\n#\n# Deny requests to certain unsafe ports\nhttp_access deny !Safe_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\nhttp_access deny restricted_destination_subnetworks\n\n# Squid normally listens to port 3128\nhttp_port 3128\n\n# Uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/cache/squid 100 16 256\n\n# Leave coredumps in the first cache dir\ncoredump_dir /var/cache/squid\n\n#\n# Add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern -i (/cgi-bin/|\\?) 0\t0%\t0\nrefresh_pattern .\t\t0\t20%\t4320\n\n# Do not display squid version\nhttpd_suppress_version_string on\n'}}",1257
squid,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/squid', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/service': 'squid', 'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}, 'annotations': None}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 3128, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/name': 'squid'}}}",490
squid,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/squid', 'spec/template/spec/containers/0']","{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}",980
squid,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/squid', 'spec/template/spec/containers/0']","{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}",980
squid,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/squid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
squid,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/squid', 'spec/template/spec/containers/0']","{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}",980
squid,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/squid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
squid,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/squid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
squid,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/squid', 'spec/template/spec/containers/0']","{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}",980
squid,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/squid', 'spec/template/spec/containers/0']","{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}",980
squid,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/squid', 'spec/template/spec/containers/0']","{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}",980
squid,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/squid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
squid,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/squid', 'resource_type']",{},3783
csi-s3,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/csi-s3', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}}",102
csi-s3,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/csi-s3-provisioner-sa', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'csi-s3-provisioner-sa', 'namespace': 'default'}}",117
csi-s3,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/csi-s3-secret', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'namespace': 'default', 'name': 'csi-s3-secret'}, 'stringData': {'endpoint': 'https://storage.yandexcloud.net'}}",164
csi-s3,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/csi-s3-provisioner', '']","{'kind': 'Service', 'apiVersion': 'v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default', 'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'selector': {'app': 'csi-s3-provisioner'}, 'ports': [{'name': 'csi-s3-dummy', 'port': 65535}]}}",253
csi-s3,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['DaemonSet/default/csi-s3', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['DaemonSet/default/csi-s3', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['DaemonSet/default/csi-s3', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['DaemonSet/default/csi-s3', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['DaemonSet/default/csi-s3', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_25,check_34,Pod Security Policy,Minimize the admission of containers with added capability,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_16,check_21,Pod Security Policy,Container should not be privileged,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_39,check_34,Pod Security Policy,Do not use the CAP_SYS_ADMIN linux capability,"['DaemonSet/default/csi-s3', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}",866
csi-s3,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['DaemonSet/default/csi-s3', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/csi-s3-provisioner', '']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['StatefulSet/default/csi-s3-provisioner', '']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/csi-s3-provisioner', '']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/csi-s3-provisioner', '']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/csi-s3-provisioner', '']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/csi-s3-provisioner', 'spec/template/spec/containers/1']","{'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}",494
csi-s3,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/csi-s3-provisioner', '']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/csi-s3', 'resource_type']",{},6715
csi-s3,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/csi-s3-provisioner', 'resource_type']",{},6715
traefik-forward-auth-openid,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/traefik-forward-auth-openid', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/service': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 4181, 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}}",697
traefik-forward-auth-openid,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/traefik-forward-auth-openid', 'spec/template/spec/containers/0/envFrom/0']",{'configMapRef': {'name': 'traefik-forward-auth-openid'}},57
traefik-forward-auth-openid,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/traefik-forward-auth-openid', 'spec/template/spec/containers/0']","{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}",952
traefik-forward-auth-openid,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/traefik-forward-auth-openid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
traefik-forward-auth-openid,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/traefik-forward-auth-openid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
traefik-forward-auth-openid,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/traefik-forward-auth-openid', 'spec/template/spec/containers/0']","{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}",952
traefik-forward-auth-openid,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/traefik-forward-auth-openid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
traefik-forward-auth-openid,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/traefik-forward-auth-openid', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
traefik-forward-auth-openid,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/traefik-forward-auth-openid', 'spec/template/spec/containers/0']","{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}",952
traefik-forward-auth-openid,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/traefik-forward-auth-openid', 'spec/template/spec/containers/0']","{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}",952
traefik-forward-auth-openid,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/traefik-forward-auth-openid', 'resource_type']",{},4220
kubeauth.io,checkov,CKV_K8S_42,check_35,RBAC and Service Accounts,Ensure that default service accounts are not actively used,"['ClusterRoleBinding/kubeauth-system/kubeauth-system:default', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRoleBinding', 'metadata': {'name': 'kubeauth-system:default', 'namespace': 'kubeauth-system'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'default', 'namespace': 'kubeauth-system'}], 'roleRef': {'kind': 'ClusterRole', 'name': 'kubeauth-system:default', 'apiGroup': 'rbac.authorization.k8s.io'}}",362
kubeauth.io,checkov,CKV_K8S_42,check_35,RBAC and Service Accounts,Ensure that default service accounts are not actively used,"['RoleBinding/kubeauth-system/kubeauth-system:default', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'name': 'kubeauth-system:default', 'namespace': 'kubeauth-system'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'default', 'namespace': 'kubeauth-system'}], 'roleRef': {'kind': 'Role', 'name': 'kubeauth-system:default', 'apiGroup': 'rbac.authorization.k8s.io'}}",348
kubeauth.io,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/kubeauth-system/kubeauth-controller', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-controller', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-controller'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-controller'}}, 'spec': {'containers': [{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-controller-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1404
kubeauth.io,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/kubeauth-system/kubeauth-controller', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-controller', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-controller'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-controller'}}, 'spec': {'containers': [{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-controller-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1404
kubeauth.io,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/kubeauth-system/kubeauth-controller', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-controller', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-controller'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-controller'}}, 'spec': {'containers': [{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-controller-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1404
kubeauth.io,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/kubeauth-system/kubeauth-controller', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-controller', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-controller'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-controller'}}, 'spec': {'containers': [{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-controller-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1404
kubeauth.io,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0/ports/0']","{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}",61
kubeauth.io,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/kubeauth-system/kubeauth-controller', 'spec/template/spec/containers/0']","{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}",949
kubeauth.io,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/kubeauth-system/kubeauth-controller', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-controller', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-controller'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-controller'}}, 'spec': {'containers': [{'name': 'kubeauth-controller', 'image': 'yotronpublic/kubeauth-mutatingadmission:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'clr-port', 'containerPort': 8443, 'hostPort': 8443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-controller-tls-secret', 'mountPath': '/run/secrets/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-controller-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1404
kubeauth.io,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/kubeauth-system/kubeauth-metrics', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-metrics', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-metrics'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-metrics'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1387
kubeauth.io,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/kubeauth-system/kubeauth-metrics', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-metrics', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-metrics'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-metrics'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1387
kubeauth.io,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/kubeauth-system/kubeauth-metrics', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-metrics', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-metrics'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-metrics'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1387
kubeauth.io,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/kubeauth-system/kubeauth-metrics', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-metrics', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-metrics'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-metrics'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1387
kubeauth.io,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0/ports/0']","{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}",70
kubeauth.io,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/kubeauth-system/kubeauth-metrics', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}",945
kubeauth.io,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/kubeauth-system/kubeauth-metrics', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-metrics', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-metrics'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-metrics'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-metrics:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9090, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}]}}}}",1387
kubeauth.io,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/kubeauth-system/kubeauth-monitoring', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-monitoring', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}]}}}}",1176
kubeauth.io,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/kubeauth-system/kubeauth-monitoring', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-monitoring', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}]}}}}",1176
kubeauth.io,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/kubeauth-system/kubeauth-monitoring', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-monitoring', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}]}}}}",1176
kubeauth.io,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/kubeauth-system/kubeauth-monitoring', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-monitoring', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}]}}}}",1176
kubeauth.io,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0/ports/0']","{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}",70
kubeauth.io,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/kubeauth-system/kubeauth-monitoring', 'spec/template/spec/containers/0']","{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}",838
kubeauth.io,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/kubeauth-system/kubeauth-monitoring', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-monitoring', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-monitoring'}}, 'spec': {'containers': [{'name': 'kubeauth-monitoring', 'image': 'yotronpublic/kubeauth-monitoring:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'monitoring-port', 'containerPort': 40000, 'hostPort': 40000}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 40000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}}]}}}}",1176
kubeauth.io,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/kubeauth-system/kubeauth-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-server', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-server'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-server'}}, 'spec': {'containers': [{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}, {'name': 'kubeauth-server-configs', 'configMap': {'name': 'proxy-configurations'}}]}}}}",1546
kubeauth.io,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/kubeauth-system/kubeauth-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-server', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-server'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-server'}}, 'spec': {'containers': [{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}, {'name': 'kubeauth-server-configs', 'configMap': {'name': 'proxy-configurations'}}]}}}}",1546
kubeauth.io,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/kubeauth-system/kubeauth-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-server', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-server'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-server'}}, 'spec': {'containers': [{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}, {'name': 'kubeauth-server-configs', 'configMap': {'name': 'proxy-configurations'}}]}}}}",1546
kubeauth.io,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/kubeauth-system/kubeauth-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-server', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-server'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-server'}}, 'spec': {'containers': [{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}, {'name': 'kubeauth-server-configs', 'configMap': {'name': 'proxy-configurations'}}]}}}}",1546
kubeauth.io,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0/ports/0']","{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}",61
kubeauth.io,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/kubeauth-system/kubeauth-server', 'spec/template/spec/containers/0']","{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}",1023
kubeauth.io,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/kubeauth-system/kubeauth-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'kubeauth-server', 'namespace': 'kubeauth-system'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'kubeauth-component': 'kubeauth-server'}}, 'template': {'metadata': {'labels': {'kubeauth-component': 'kubeauth-server'}}, 'spec': {'containers': [{'name': 'kubeauth-server', 'image': 'yotronpublic/kubeauth-server:1.2.1', 'imagePullPolicy': 'Always', 'ports': [{'name': 'svr-port', 'containerPort': 9443, 'hostPort': 9443}], 'env': [{'name': 'LOG_LEVEL', 'value': 'Info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}, {'name': 'SERVICE_ACCOUNT', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.serviceAccountName'}}}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9443, 'scheme': 'HTTPS'}, 'failureThreshold': 1, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 60}, 'volumeMounts': [{'name': 'kubeauth-server-tls-secret', 'mountPath': '/etc/kubeauth/tls', 'readOnly': True}, {'name': 'kubeauth-server-configs', 'mountPath': '/etc/kubeauth/config', 'readOnly': True}]}], 'volumes': [{'name': 'kubeauth-server-tls-secret', 'secret': {'secretName': 'kubeauth-controller-tls-secret'}}, {'name': 'kubeauth-server-configs', 'configMap': {'name': 'proxy-configurations'}}]}}}}",1546
kubeauth.io,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/kubeauth-system/kubeauth-controller', 'resource_type']",{},38927
kubeauth.io,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/kubeauth-system/kubeauth-metrics', 'resource_type']",{},38927
kubeauth.io,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/kubeauth-system/kubeauth-monitoring', 'resource_type']",{},38927
kubeauth.io,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/kubeauth-system/kubeauth-server', 'resource_type']",{},38927
log2rbac-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/log2rbac', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'log2rbac'}}",80
log2rbac-operator,checkov,CKV_K8S_157,check_54,RBAC and Service Accounts,Minimize Roles and ClusterRoles that grant permissions to bind RoleBindings or ClusterRoleBindings,"['ClusterRole/default/log2rbac-role', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRole', 'metadata': {'creationTimestamp': None, 'name': 'log2rbac-role'}, 'rules': [{'apiGroups': ['*'], 'resources': ['*'], 'verbs': ['*']}]}",204
log2rbac-operator,checkov,CKV_K8S_155,check_54,RBAC and Service Accounts,Minimize ClusterRoles that grant control over validating or mutating admission webhook configurations,"['ClusterRole/default/log2rbac-role', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRole', 'metadata': {'creationTimestamp': None, 'name': 'log2rbac-role'}, 'rules': [{'apiGroups': ['*'], 'resources': ['*'], 'verbs': ['*']}]}",204
log2rbac-operator,checkov,CKV_K8S_156,check_54,RBAC and Service Accounts,Minimize ClusterRoles that grant permissions to approve CertificateSigningRequests,"['ClusterRole/default/log2rbac-role', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRole', 'metadata': {'creationTimestamp': None, 'name': 'log2rbac-role'}, 'rules': [{'apiGroups': ['*'], 'resources': ['*'], 'verbs': ['*']}]}",204
log2rbac-operator,checkov,CKV_K8S_158,check_54,RBAC and Service Accounts,Minimize Roles and ClusterRoles that grant permissions to escalate Roles or ClusterRoles,"['ClusterRole/default/log2rbac-role', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRole', 'metadata': {'creationTimestamp': None, 'name': 'log2rbac-role'}, 'rules': [{'apiGroups': ['*'], 'resources': ['*'], 'verbs': ['*']}]}",204
log2rbac-operator,checkov,CKV_K8S_49,check_54,RBAC and Service Accounts,Minimize wildcard use in Roles and ClusterRoles,"['ClusterRole/default/log2rbac-role', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRole', 'metadata': {'creationTimestamp': None, 'name': 'log2rbac-role'}, 'rules': [{'apiGroups': ['*'], 'resources': ['*'], 'verbs': ['*']}]}",204
log2rbac-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/log2rbac-metrics', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'control-plane': 'log2rbac'}, 'name': 'log2rbac-metrics'}, 'spec': {'type': 'NodePort', 'ports': [{'name': 'http', 'port': 8080, 'protocol': 'TCP', 'targetPort': 8080, 'nodePort': 30081}], 'selector': {'control-plane': 'log2rbac'}}}",296
log2rbac-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/log2rbac', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'labels': {'control-plane': 'log2rbac'}, 'name': 'log2rbac'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'control-plane': 'log2rbac'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'control-plane': 'log2rbac', 'id': 'log2rbac'}}, 'spec': {'containers': [{'image': 'jkremser/log2rbac:v0.0.5', 'name': 'manager', 'imagePullPolicy': 'Always', 'command': ['/log2rbac'], 'args': ['--health-probe-bind-address=:8081', '--zap-encoder=console', '--leader-elect', '--metrics-bind-address=127.0.0.1:8080'], 'env': [{'name': 'COLORS', 'value': 'true'}, {'name': 'NO_BANNER', 'value': 'false'}, {'name': 'SHOULD_RESTART_APP_PODS', 'value': 'true'}, {'name': 'SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES', 'value': '5'}, {'name': 'SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS', 'value': '30'}, {'name': 'SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS', 'value': '20'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}}], 'securityContext': None, 'serviceAccountName': 'log2rbac', 'terminationGracePeriodSeconds': 10}}}}",1530
log2rbac-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/log2rbac', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'labels': {'control-plane': 'log2rbac'}, 'name': 'log2rbac'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'control-plane': 'log2rbac'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'control-plane': 'log2rbac', 'id': 'log2rbac'}}, 'spec': {'containers': [{'image': 'jkremser/log2rbac:v0.0.5', 'name': 'manager', 'imagePullPolicy': 'Always', 'command': ['/log2rbac'], 'args': ['--health-probe-bind-address=:8081', '--zap-encoder=console', '--leader-elect', '--metrics-bind-address=127.0.0.1:8080'], 'env': [{'name': 'COLORS', 'value': 'true'}, {'name': 'NO_BANNER', 'value': 'false'}, {'name': 'SHOULD_RESTART_APP_PODS', 'value': 'true'}, {'name': 'SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES', 'value': '5'}, {'name': 'SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS', 'value': '30'}, {'name': 'SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS', 'value': '20'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}}], 'securityContext': None, 'serviceAccountName': 'log2rbac', 'terminationGracePeriodSeconds': 10}}}}",1530
log2rbac-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/log2rbac', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'labels': {'control-plane': 'log2rbac'}, 'name': 'log2rbac'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'control-plane': 'log2rbac'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'control-plane': 'log2rbac', 'id': 'log2rbac'}}, 'spec': {'containers': [{'image': 'jkremser/log2rbac:v0.0.5', 'name': 'manager', 'imagePullPolicy': 'Always', 'command': ['/log2rbac'], 'args': ['--health-probe-bind-address=:8081', '--zap-encoder=console', '--leader-elect', '--metrics-bind-address=127.0.0.1:8080'], 'env': [{'name': 'COLORS', 'value': 'true'}, {'name': 'NO_BANNER', 'value': 'false'}, {'name': 'SHOULD_RESTART_APP_PODS', 'value': 'true'}, {'name': 'SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES', 'value': '5'}, {'name': 'SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS', 'value': '30'}, {'name': 'SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS', 'value': '20'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}}], 'securityContext': None, 'serviceAccountName': 'log2rbac', 'terminationGracePeriodSeconds': 10}}}}",1530
log2rbac-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/log2rbac', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'labels': {'control-plane': 'log2rbac'}, 'name': 'log2rbac'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'control-plane': 'log2rbac'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'control-plane': 'log2rbac', 'id': 'log2rbac'}}, 'spec': {'containers': [{'image': 'jkremser/log2rbac:v0.0.5', 'name': 'manager', 'imagePullPolicy': 'Always', 'command': ['/log2rbac'], 'args': ['--health-probe-bind-address=:8081', '--zap-encoder=console', '--leader-elect', '--metrics-bind-address=127.0.0.1:8080'], 'env': [{'name': 'COLORS', 'value': 'true'}, {'name': 'NO_BANNER', 'value': 'false'}, {'name': 'SHOULD_RESTART_APP_PODS', 'value': 'true'}, {'name': 'SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES', 'value': '5'}, {'name': 'SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS', 'value': '30'}, {'name': 'SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS', 'value': '20'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}}], 'securityContext': None, 'serviceAccountName': 'log2rbac', 'terminationGracePeriodSeconds': 10}}}}",1530
log2rbac-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/log2rbac', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'labels': {'control-plane': 'log2rbac'}, 'name': 'log2rbac'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'control-plane': 'log2rbac'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'control-plane': 'log2rbac', 'id': 'log2rbac'}}, 'spec': {'containers': [{'image': 'jkremser/log2rbac:v0.0.5', 'name': 'manager', 'imagePullPolicy': 'Always', 'command': ['/log2rbac'], 'args': ['--health-probe-bind-address=:8081', '--zap-encoder=console', '--leader-elect', '--metrics-bind-address=127.0.0.1:8080'], 'env': [{'name': 'COLORS', 'value': 'true'}, {'name': 'NO_BANNER', 'value': 'false'}, {'name': 'SHOULD_RESTART_APP_PODS', 'value': 'true'}, {'name': 'SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES', 'value': '5'}, {'name': 'SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS', 'value': '30'}, {'name': 'SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS', 'value': '20'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}}], 'securityContext': None, 'serviceAccountName': 'log2rbac', 'terminationGracePeriodSeconds': 10}}}}",1530
log2rbac-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/log2rbac', 'spec/template/spec/containers/0']","{'image': 'jkremser/log2rbac:v0.0.5', 'name': 'manager', 'imagePullPolicy': 'Always', 'command': ['/log2rbac'], 'args': ['--health-probe-bind-address=:8081', '--zap-encoder=console', '--leader-elect', '--metrics-bind-address=127.0.0.1:8080'], 'env': [{'name': 'COLORS', 'value': 'true'}, {'name': 'NO_BANNER', 'value': 'false'}, {'name': 'SHOULD_RESTART_APP_PODS', 'value': 'true'}, {'name': 'SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES', 'value': '5'}, {'name': 'SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS', 'value': '30'}, {'name': 'SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS', 'value': '20'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}}",1041
log2rbac-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/log2rbac', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'labels': {'control-plane': 'log2rbac'}, 'name': 'log2rbac'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'control-plane': 'log2rbac'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'control-plane': 'log2rbac', 'id': 'log2rbac'}}, 'spec': {'containers': [{'image': 'jkremser/log2rbac:v0.0.5', 'name': 'manager', 'imagePullPolicy': 'Always', 'command': ['/log2rbac'], 'args': ['--health-probe-bind-address=:8081', '--zap-encoder=console', '--leader-elect', '--metrics-bind-address=127.0.0.1:8080'], 'env': [{'name': 'COLORS', 'value': 'true'}, {'name': 'NO_BANNER', 'value': 'false'}, {'name': 'SHOULD_RESTART_APP_PODS', 'value': 'true'}, {'name': 'SYNC_INTERVAL_AFTER_NO_RBAC_ENTRY_MINUTES', 'value': '5'}, {'name': 'SYNC_INTERVAL_AFTER_NO_LOGS_SECONDS', 'value': '30'}, {'name': 'SYNC_INTERVAL_AFTER_POD_RESTART_SECONDS', 'value': '20'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}}], 'securityContext': None, 'serviceAccountName': 'log2rbac', 'terminationGracePeriodSeconds': 10}}}}",1530
log2rbac-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/log2rbac', 'resource_type']",{},5563
log2rbac-operator,checkov,CKV2_K8S_5,check_59,RBAC and Service Accounts,No ServiceAccount/Node should be able to read all secrets,"['ClusterRoleBinding/default/log2rbac-rolebinding', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRoleBinding', 'metadata': {'name': 'log2rbac-rolebinding'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'ClusterRole', 'name': 'log2rbac-role'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'log2rbac', 'namespace': 'default'}]}",310
log2rbac-operator,checkov,CKV2_K8S_4,check_54,RBAC and Service Accounts,ServiceAccounts and nodes that can modify services/status may set the `status.loadBalancer.ingress.ip` field to exploit the unfixed CVE-2020-8554 and launch MiTM attacks against the cluster.,"['ClusterRoleBinding/default/log2rbac-rolebinding', 'rules/verbs']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRoleBinding', 'metadata': {'name': 'log2rbac-rolebinding'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'ClusterRole', 'name': 'log2rbac-role'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'log2rbac', 'namespace': 'default'}]}",310
log2rbac-operator,checkov,CKV2_K8S_3,check_54,RBAC and Service Accounts,No ServiceAccount/Node should have `impersonate` permissions for groups/users/service-accounts,"['ClusterRoleBinding/default/log2rbac-rolebinding', 'rules/verbs']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRoleBinding', 'metadata': {'name': 'log2rbac-rolebinding'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'ClusterRole', 'name': 'log2rbac-role'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'log2rbac', 'namespace': 'default'}]}",310
log2rbac-operator,checkov,CKV2_K8S_2,check_54,RBAC and Service Accounts,Granting `create` permissions to `nodes/proxy` or `pods/exec` sub resources allows potential privilege escalation,"['ClusterRoleBinding/default/log2rbac-rolebinding', 'rules/verbs']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRoleBinding', 'metadata': {'name': 'log2rbac-rolebinding'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'ClusterRole', 'name': 'log2rbac-role'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'log2rbac', 'namespace': 'default'}]}",310
log2rbac-operator,checkov,CKV2_K8S_1,check_54,RBAC and Service Accounts,RoleBinding should not allow privilege escalation to a ServiceAccount or Node on other RoleBinding,"['ClusterRoleBinding/default/log2rbac-rolebinding', 'rules/verbs']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRoleBinding', 'metadata': {'name': 'log2rbac-rolebinding'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'ClusterRole', 'name': 'log2rbac-role'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'log2rbac', 'namespace': 'default'}]}",310
identity-manager-demo,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/identity-manager-demo', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'identity-manager-demo', 'labels': {'helm.sh/chart': 'identity-manager-demo-0.1.1', 'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo', 'app.kubernetes.io/version': 'v1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",338
identity-manager-demo,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/identity-manager-demo', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'identity-manager-demo', 'labels': {'helm.sh/chart': 'identity-manager-demo-0.1.1', 'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo', 'app.kubernetes.io/version': 'v1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'spec': {'serviceAccountName': 'identity-manager-demo', 'securityContext': {}, 'containers': [{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1095
identity-manager-demo,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/identity-manager-demo', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'identity-manager-demo', 'labels': {'helm.sh/chart': 'identity-manager-demo-0.1.1', 'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo', 'app.kubernetes.io/version': 'v1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'spec': {'serviceAccountName': 'identity-manager-demo', 'securityContext': {}, 'containers': [{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1095
identity-manager-demo,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/identity-manager-demo', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'identity-manager-demo', 'labels': {'helm.sh/chart': 'identity-manager-demo-0.1.1', 'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo', 'app.kubernetes.io/version': 'v1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'spec': {'serviceAccountName': 'identity-manager-demo', 'securityContext': {}, 'containers': [{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1095
identity-manager-demo,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/identity-manager-demo', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'identity-manager-demo', 'labels': {'helm.sh/chart': 'identity-manager-demo-0.1.1', 'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo', 'app.kubernetes.io/version': 'v1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'spec': {'serviceAccountName': 'identity-manager-demo', 'securityContext': {}, 'containers': [{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1095
identity-manager-demo,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/identity-manager-demo', 'spec/template/spec/containers/0']","{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",350
identity-manager-demo,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/identity-manager-demo', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'identity-manager-demo', 'labels': {'helm.sh/chart': 'identity-manager-demo-0.1.1', 'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo', 'app.kubernetes.io/version': 'v1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'identity-manager-demo', 'app.kubernetes.io/instance': 'identity-manager-demo'}}, 'spec': {'serviceAccountName': 'identity-manager-demo', 'securityContext': {}, 'containers': [{'name': 'identity-manager-demo', 'securityContext': {}, 'image': 'invisibl/identity-manager-demo:v1.0.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1095
identity-manager-demo,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/identity-manager-demo', 'resource_type']",{},2837
ed-cron,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/ed-cron-env', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'ed-cron-env', 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'data': {'RELEASE_NAME': 'ZWQtY3Jvbg=='}}",221
ed-cron,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0/envFrom/0']",{'secretRef': {'name': 'ed-cron-env'}},38
ed-cron,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['CronJob/default/ed-cron', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['CronJob/default/ed-cron', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['CronJob/default/ed-cron', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['CronJob/default/ed-cron', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['CronJob/default/ed-cron', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['CronJob/default/ed-cron', 'spec/jobTemplate/spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}",128
ed-cron,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['CronJob/default/ed-cron', '']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/pages-mysql', '']","{'apiVersion': 'v1', 'data': {'password': 'cGFzc3dvcmQ='}, 'kind': 'Secret', 'metadata': {'name': 'pages-mysql'}}",113
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/pages-pages-api', '']","{'apiVersion': 'v1', 'data': {'password': 'cGFzc3dvcmQ='}, 'kind': 'Secret', 'metadata': {'name': 'pages-pages-api'}}",117
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/pages-mysql', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'pages-mysql'}, 'data': {'spring.datasource.username': 'root', 'V1__inital_schema.sql': 'USE pages;\ncreate table pages(\nid bigint(20) not null auto_increment,\nbusiness_name VARCHAR(50),\naddress VARCHAR(50),\ncategory_id bigint(20),\ncontact_number VARCHAR(50),\nprimary key (id)\n)\nengine = innodb\ndefault charset = utf8;\n'}}",395
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/pages-api', '']","{'apiVersion': 'v1', 'data': {'PAGE_CONTENT': 'Green-Pages coming from Yellow-World!'}, 'kind': 'ConfigMap', 'metadata': {'name': 'pages-api'}}",143
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/pages-mysql', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'ports': [{'port': 3306}], 'selector': {'app': 'pages-mysql'}, 'type': 'ClusterIP'}}",204
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/pages-pages-api', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'app': 'pages-pages-api', 'access': 'external'}, 'name': 'pages-pages-api'}, 'spec': {'ports': [{'port': 8080, 'protocol': 'TCP', 'targetPort': 8080}], 'selector': {'app': 'pages-pages-api'}, 'type': 'NodePort'}}",276
pages,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0/env/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/pages-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/pages-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/pages-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/pages-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/pages-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/pages-mysql', 'spec/template/spec/containers/0']","{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}",459
pages,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/pages-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0/env/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/pages-pages-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/pages-pages-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/pages-pages-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/pages-pages-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/pages-pages-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/pages-pages-api', 'spec/template/spec/containers/0']","{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}",1068
pages,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/pages-pages-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/contract-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/contract-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/contract-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/contract-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/contract-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/contract-test', 'spec/containers/0']","{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}",263
pages,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/contract-test', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/pages-test-dbconnect-passtest', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/pages-test-dbconnect-passtest', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/pages-test-dbconnect-passtest', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/pages-test-dbconnect-passtest', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/pages-test-dbconnect-passtest', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/pages-test-dbconnect-passtest', 'spec/containers/0']","{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}",349
pages,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/pages-test-dbconnect-passtest', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/pages-api-test-getmessage', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/pages-api-test-getmessage', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/pages-api-test-getmessage', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/pages-api-test-getmessage', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/pages-api-test-getmessage', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/pages-api-test-getmessage', 'spec/containers/0']","{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}",192
pages,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/pages-api-test-getmessage', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Job/default/pages-mysql', 'spec/template/spec/containers/0/env/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Job/default/pages-mysql', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Job/default/pages-mysql', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Job/default/pages-mysql', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Job/default/pages-mysql', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Job/default/pages-mysql', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Job/default/pages-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}",722
pages,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Job/default/pages-mysql', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/pages-mysql', 'resource_type']",{},7058
pages,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/pages-pages-api', 'resource_type']",{},7058
pages,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/contract-test', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/pages-test-dbconnect-passtest', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/pages-api-test-getmessage', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
meerschaum,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/meerschaum', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8000, 'targetPort': 8000, 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}}",497
meerschaum,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0']","{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}",1048
meerschaum,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0']","{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}",1048
meerschaum,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0']","{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}",1048
meerschaum,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/meerschaum', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0']","{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}",1048
meerschaum,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0']","{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}",1048
meerschaum,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/meerschaum', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0/ports/0']","{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}",60
meerschaum,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0']","{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}",1048
meerschaum,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/meerschaum', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/meerschaum', 'spec/template/spec/containers/0']","{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}",1048
meerschaum,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/meerschaum', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/meerschaum', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'ingressClassName': 'nginx', 'tls': [{'hosts': ['localhost']}], 'rules': [{'host': 'localhost', 'http': {'paths': [{'path': '/', 'pathType': 'Prefix', 'backend': {'service': {'name': 'meerschaum', 'port': {'number': 8000}}}}]}}]}}",544
meerschaum,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/meerschaum', 'resource_type']",{},3340
ed-nginx,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/nginx-ingress', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}}",186
ed-nginx,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ingress-nginx-configuration', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ingress-nginx-configuration', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx', 'k8s.scw.cloud/system': 'ingress', 'k8s.scw.cloud/ingress': 'nginx', 'k8s.scw.cloud/object': 'ConfigMap'}}}",301
ed-nginx,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ingress-nginx-tcp-services', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ingress-nginx-tcp-services', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx', 'k8s.scw.cloud/system': 'ingress', 'k8s.scw.cloud/ingress': 'nginx', 'k8s.scw.cloud/object': 'ConfigMap'}}}",300
ed-nginx,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ingress-nginx-udp-services', '']","{'kind': 'ConfigMap', 'apiVersion': 'v1', 'metadata': {'name': 'ingress-nginx-udp-services', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx', 'k8s.scw.cloud/system': 'ingress', 'k8s.scw.cloud/ingress': 'nginx', 'k8s.scw.cloud/object': 'ConfigMap'}}}",300
ed-nginx,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/nginx-ingress', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'Role', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'rules': [{'apiGroups': [''], 'resources': ['configmaps', 'pods', 'secrets', 'namespaces'], 'verbs': ['get']}, {'apiGroups': [''], 'resources': ['configmaps'], 'resourceNames': ['ingress-controller-leader-nginx'], 'verbs': ['get', 'update']}, {'apiGroups': [''], 'resources': ['configmaps'], 'verbs': ['create']}, {'apiGroups': [''], 'resources': ['endpoints'], 'verbs': ['get']}]}",584
ed-nginx,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/nginx-ingress', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'Role', 'name': 'nginx-ingress'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'nginx-ingress'}]}",371
ed-nginx,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['DaemonSet/default/nginx-ingress', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['DaemonSet/default/nginx-ingress', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['DaemonSet/default/nginx-ingress', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0/ports/0']","{'name': 'http', 'containerPort': 80, 'hostPort': 80}",53
ed-nginx,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['DaemonSet/default/nginx-ingress', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_25,check_34,Pod Security Policy,Minimize the admission of containers with added capability,"['DaemonSet/default/nginx-ingress', 'spec/template/spec/containers/0']","{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}",1296
ed-nginx,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['DaemonSet/default/nginx-ingress', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/nginx-ingress', 'resource_type']",{},5657
cloud-native-pg,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/cloud-native-pg-frinx-superuser', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'cloud-native-pg-frinx-superuser'}, 'type': 'kubernetes.io/basic-auth', 'data': {'username': 'cG9zdGdyZXM=', 'password': 'cG9zdGdyZXM='}}",197
cloud-native-pg,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/cloud-native-pg-frinx-user', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'cloud-native-pg-frinx-user'}, 'type': 'kubernetes.io/basic-auth', 'data': {'username': 'ZnJpbng=', 'password': 'ZnJpbng='}}",184
sealed-secrets-ui,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/sealed-secrets-ui', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}}",322
sealed-secrets-ui,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/sealed-secrets-ui', '']","{'apiVersion': 'v1', 'data': {'KUBECONF_DIR': '/kubeconfigs'}, 'kind': 'ConfigMap', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}}",359
sealed-secrets-ui,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sealed-secrets-ui', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 5000, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}}",542
sealed-secrets-ui,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/sealed-secrets-ui', 'spec/template/spec/containers/0']","{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}",771
sealed-secrets-ui,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/sealed-secrets-ui', 'spec/template/spec/containers/0']","{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}",771
sealed-secrets-ui,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/sealed-secrets-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'spec': {'serviceAccountName': 'sealed-secrets-ui', 'securityContext': {}, 'containers': [{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}], 'volumes': [{'name': 'sealed-secrets-ui-kubeconfigs', 'secret': {'secretName': 'sealed-secrets-ui-kubeconfigs'}}]}}}}",1595
sealed-secrets-ui,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/sealed-secrets-ui', 'spec/template/spec/containers/0']","{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}",771
sealed-secrets-ui,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/sealed-secrets-ui', 'spec/template/spec/containers/0']","{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}",771
sealed-secrets-ui,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/sealed-secrets-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'spec': {'serviceAccountName': 'sealed-secrets-ui', 'securityContext': {}, 'containers': [{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}], 'volumes': [{'name': 'sealed-secrets-ui-kubeconfigs', 'secret': {'secretName': 'sealed-secrets-ui-kubeconfigs'}}]}}}}",1595
sealed-secrets-ui,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/sealed-secrets-ui', 'spec/template/spec/containers/0']","{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}",771
sealed-secrets-ui,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/sealed-secrets-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'spec': {'serviceAccountName': 'sealed-secrets-ui', 'securityContext': {}, 'containers': [{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}], 'volumes': [{'name': 'sealed-secrets-ui-kubeconfigs', 'secret': {'secretName': 'sealed-secrets-ui-kubeconfigs'}}]}}}}",1595
sealed-secrets-ui,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/sealed-secrets-ui', 'spec/template/spec/containers/0']","{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}",771
sealed-secrets-ui,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/sealed-secrets-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui'}}, 'spec': {'serviceAccountName': 'sealed-secrets-ui', 'securityContext': {}, 'containers': [{'name': 'sealed-secrets-ui', 'envFrom': [{'configMapRef': {'name': 'sealed-secrets-ui'}}], 'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'image': 'ghcr.io/noahburrell0/sealed-secrets-ui:v0.1.4', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 5000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 10}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}, 'initialDelaySeconds': 12}, 'startupProbe': {'exec': {'command': ['pgrep', 'gunicorn']}}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'sealed-secrets-ui-kubeconfigs', 'mountPath': '/kubeconfigs', 'readOnly': True}]}], 'volumes': [{'name': 'sealed-secrets-ui-kubeconfigs', 'secret': {'secretName': 'sealed-secrets-ui-kubeconfigs'}}]}}}}",1595
sealed-secrets-ui,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/sealed-secrets-ui', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'sealed-secrets-ui', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'rules': [{'host': 'example.local', 'http': {'paths': [{'pathType': 'Prefix', 'path': '/', 'backend': {'service': {'name': 'sealed-secrets-ui', 'port': {'number': 5000}}}}]}}]}}",520
sealed-secrets-ui,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/sealed-secrets-ui-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sealed-secrets-ui-test-connection', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}], 'restartPolicy': 'Never'}}",515
sealed-secrets-ui,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/sealed-secrets-ui-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sealed-secrets-ui-test-connection', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}], 'restartPolicy': 'Never'}}",515
sealed-secrets-ui,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/sealed-secrets-ui-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sealed-secrets-ui-test-connection', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}], 'restartPolicy': 'Never'}}",515
sealed-secrets-ui,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/sealed-secrets-ui-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sealed-secrets-ui-test-connection', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}], 'restartPolicy': 'Never'}}",515
sealed-secrets-ui,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/sealed-secrets-ui-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sealed-secrets-ui-test-connection', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}], 'restartPolicy': 'Never'}}",515
sealed-secrets-ui,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/sealed-secrets-ui-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}",93
sealed-secrets-ui,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/sealed-secrets-ui-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sealed-secrets-ui-test-connection', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}], 'restartPolicy': 'Never'}}",515
sealed-secrets-ui,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sealed-secrets-ui', 'resource_type']",{},4728
sealed-secrets-ui,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sealed-secrets-ui-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sealed-secrets-ui-test-connection', 'labels': {'helm.sh/chart': 'sealed-secrets-ui-0.0.8', 'app.kubernetes.io/name': 'sealed-secrets-ui', 'app.kubernetes.io/instance': 'sealed-secrets-ui', 'app.kubernetes.io/version': 'v0.1.4', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sealed-secrets-ui:5000']}], 'restartPolicy': 'Never'}}",515
service-presets,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/backend', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'backend', 'namespace': 'default'}}",103
service-presets,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/service-presets-ca', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'service-presets-ca', 'namespace': 'default', 'labels': {'helm.sh/chart': 'service-presets-v2024.2.11', 'app.kubernetes.io/name': 'service-presets', 'app.kubernetes.io/instance': 'service-presets', 'app.kubernetes.io/version': 'v2024.2.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'kubernetes.io/tls', 'stringData': {'tls.crt': '', 'tls.key': ''}}",417
service-presets,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/backend', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'backend', 'namespace': 'default', 'labels': {'app': 'backend', 'service': 'backend'}}, 'spec': {'ports': [{'name': 'http', 'port': 3000, 'targetPort': 3000}], 'selector': {'app': 'backend'}}}",253
service-presets,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'backend', 'version': 'v1'}}, 'template': {'metadata': {'labels': {'app': 'backend', 'version': 'v1'}}, 'spec': {'serviceAccountName': 'backend', 'securityContext': None, 'containers': [{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}]}}}}",727
service-presets,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'backend', 'version': 'v1'}}, 'template': {'metadata': {'labels': {'app': 'backend', 'version': 'v1'}}, 'spec': {'serviceAccountName': 'backend', 'securityContext': None, 'containers': [{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}]}}}}",727
service-presets,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'backend', 'version': 'v1'}}, 'template': {'metadata': {'labels': {'app': 'backend', 'version': 'v1'}}, 'spec': {'serviceAccountName': 'backend', 'securityContext': None, 'containers': [{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}]}}}}",727
service-presets,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'backend', 'version': 'v1'}}, 'template': {'metadata': {'labels': {'app': 'backend', 'version': 'v1'}}, 'spec': {'serviceAccountName': 'backend', 'securityContext': None, 'containers': [{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}]}}}}",727
service-presets,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'backend', 'version': 'v1'}}, 'template': {'metadata': {'labels': {'app': 'backend', 'version': 'v1'}}, 'spec': {'serviceAccountName': 'backend', 'securityContext': None, 'containers': [{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}]}}}}",727
service-presets,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}",371
service-presets,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'backend', 'version': 'v1'}}, 'template': {'metadata': {'labels': {'app': 'backend', 'version': 'v1'}}, 'spec': {'serviceAccountName': 'backend', 'securityContext': None, 'containers': [{'image': 'gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e', 'imagePullPolicy': 'IfNotPresent', 'name': 'backend', 'ports': [{'containerPort': 3000}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'securityContext': None}]}}}}",727
service-presets,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/backend', 'resource_type']",{},7322
cp4d-deployer,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', '']","{'kind': 'Job', 'apiVersion': 'batch/v1', 'metadata': {'labels': {'app': 'cloud-pak-deployer'}, 'name': 'cloud-pak-deployer-2828e3554cdc', 'namespace': 'cloud-pak-deployer', 'annotations': {'argocd.argoproj.io/sync-wave': '0', 'checksum/config': '2828e3554cdcf075106ddffcf2eb79d26c0e5eaa5f5d58ad6aa00f42abf88aa4'}}, 'spec': {'parallelism': 1, 'completions': 1, 'backoffLimit': 5, 'template': {'metadata': {'name': 'cloud-pak-deployer', 'labels': {'app': 'cloud-pak-deployer'}}, 'spec': {'containers': [{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}], 'restartPolicy': 'Never', 'securityContext': {'runAsUser': 0}, 'serviceAccountName': 'cloud-pak-deployer-sa', 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'cloud-pak-deployer-config'}}, {'name': 'status-volume', 'persistentVolumeClaim': {'claimName': 'cloud-pak-deployer-status'}}]}}}}",1466
cp4d-deployer,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', '']","{'kind': 'Job', 'apiVersion': 'batch/v1', 'metadata': {'labels': {'app': 'cloud-pak-deployer'}, 'name': 'cloud-pak-deployer-2828e3554cdc', 'namespace': 'cloud-pak-deployer', 'annotations': {'argocd.argoproj.io/sync-wave': '0', 'checksum/config': '2828e3554cdcf075106ddffcf2eb79d26c0e5eaa5f5d58ad6aa00f42abf88aa4'}}, 'spec': {'parallelism': 1, 'completions': 1, 'backoffLimit': 5, 'template': {'metadata': {'name': 'cloud-pak-deployer', 'labels': {'app': 'cloud-pak-deployer'}}, 'spec': {'containers': [{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}], 'restartPolicy': 'Never', 'securityContext': {'runAsUser': 0}, 'serviceAccountName': 'cloud-pak-deployer-sa', 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'cloud-pak-deployer-config'}}, {'name': 'status-volume', 'persistentVolumeClaim': {'claimName': 'cloud-pak-deployer-status'}}]}}}}",1466
cp4d-deployer,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', '']","{'kind': 'Job', 'apiVersion': 'batch/v1', 'metadata': {'labels': {'app': 'cloud-pak-deployer'}, 'name': 'cloud-pak-deployer-2828e3554cdc', 'namespace': 'cloud-pak-deployer', 'annotations': {'argocd.argoproj.io/sync-wave': '0', 'checksum/config': '2828e3554cdcf075106ddffcf2eb79d26c0e5eaa5f5d58ad6aa00f42abf88aa4'}}, 'spec': {'parallelism': 1, 'completions': 1, 'backoffLimit': 5, 'template': {'metadata': {'name': 'cloud-pak-deployer', 'labels': {'app': 'cloud-pak-deployer'}}, 'spec': {'containers': [{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}], 'restartPolicy': 'Never', 'securityContext': {'runAsUser': 0}, 'serviceAccountName': 'cloud-pak-deployer-sa', 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'cloud-pak-deployer-config'}}, {'name': 'status-volume', 'persistentVolumeClaim': {'claimName': 'cloud-pak-deployer-status'}}]}}}}",1466
cp4d-deployer,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', 'spec/template/spec/containers/0']","{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}",661
cp4d-deployer,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Job/cloud-pak-deployer/cloud-pak-deployer-2828e3554cdc', '']","{'kind': 'Job', 'apiVersion': 'batch/v1', 'metadata': {'labels': {'app': 'cloud-pak-deployer'}, 'name': 'cloud-pak-deployer-2828e3554cdc', 'namespace': 'cloud-pak-deployer', 'annotations': {'argocd.argoproj.io/sync-wave': '0', 'checksum/config': '2828e3554cdcf075106ddffcf2eb79d26c0e5eaa5f5d58ad6aa00f42abf88aa4'}}, 'spec': {'parallelism': 1, 'completions': 1, 'backoffLimit': 5, 'template': {'metadata': {'name': 'cloud-pak-deployer', 'labels': {'app': 'cloud-pak-deployer'}}, 'spec': {'containers': [{'name': 'cloud-pak-deployer', 'image': 'quay.io/cloudnativetoolkit/cloud-pak-deployer:latest', 'imagePullPolicy': 'Always', 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'env': [{'name': 'CONFIG_DIR', 'value': '/Data/cpd-config'}, {'name': 'STATUS_DIR', 'value': '/Data/cpd-status'}, {'name': 'CP_ENTITLEMENT_KEY', 'value': 'entitlement_key'}], 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/Data/cpd-config/config'}, {'name': 'status-volume', 'mountPath': '/Data/cpd-status'}], 'command': ['/bin/sh', '-xc'], 'args': ['rm -rf $STATUS_DIR/openshift/kubeconfig; /cloud-pak-deployer/cp-deploy.sh env apply -v']}], 'restartPolicy': 'Never', 'securityContext': {'runAsUser': 0}, 'serviceAccountName': 'cloud-pak-deployer-sa', 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'cloud-pak-deployer-config'}}, {'name': 'status-volume', 'persistentVolumeClaim': {'claimName': 'cloud-pak-deployer-status'}}]}}}}",1466
cp4d-deployer,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/cloud-pak-deployer-sa', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'namespace': 'default', 'name': 'cloud-pak-deployer-sa', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-weight': '-5', 'argocd.argoproj.io/sync-wave': '-100'}, 'labels': {'helm.sh/chart': 'service-account-1.2.1', 'app.kubernetes.io/name': 'cloud-pak-deployer-sa', 'app.kubernetes.io/instance': 'cp4d-deployer', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",465
cp4d-deployer,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/cloud-pak-deployer/cloud-pak-deployer', 'resource_type']",{},8178
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/tfy-inferentia-operator-neuron-device-plugin', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'tfy-inferentia-operator-neuron-device-plugin', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}}",261
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/tfy-inferentia-operator-scheduler-extension', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}}",260
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/tfy-inferentia-operator-neuron-scheduler', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'tfy-inferentia-operator-neuron-scheduler', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}}",257
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/tfy-inferentia-operator-neuron-scheduler-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'tfy-inferentia-operator-neuron-scheduler-config', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'data': {'neuron-scheduler-config.yaml': ""apiVersion: kubescheduler.config.k8s.io/v1beta2\nkind: KubeSchedulerConfiguration\nprofiles:\n  - schedulerName: neuron-scheduler\nextenders:\n  - urlPrefix: 'http://tfy-inferentia-operator-scheduler-extension.default.svc.cluster.local:12345'\n    filterVerb: filter\n    bindVerb: bind\n    enableHTTPS: false\n    nodeCacheCapable: true\n    managedResources:\n      - name: 'aws.amazon.com/neuron'\n        ignoredByScheduler: false\n      - name: 'aws.amazon.com/neuroncore'\n        ignoredByScheduler: false\n      - name: 'aws.amazon.com/neurondevice'\n        ignoredByScheduler: false\n    ignorable: false\nleaderElection:\n  leaderElect: true\n  resourceNamespace: default\n  resourceName: tfy-inferentia-operator-neuron-scheduler\n""}}",1048
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/tfy-inferentia-operator-scheduler-extension', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'ports': [{'port': 12345, 'name': 'http', 'targetPort': 12345}], 'selector': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension'}}}",502
tfy-inferentia-operator,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', 'spec/template/spec/containers/0']","{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}",507
tfy-inferentia-operator,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', 'spec/template/spec/containers/0']","{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}",507
tfy-inferentia-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'tfy-inferentia-operator-neuron-device-plugin', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'spec': {'serviceAccount': 'tfy-inferentia-operator-neuron-device-plugin', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}, {'effect': 'NoSchedule', 'key': 'aws.amazon.com/neuron', 'operator': 'Exists'}], 'priorityClassName': 'system-node-critical', 'affinity': {'nodeAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': {'nodeSelectorTerms': [{'matchExpressions': [{'key': 'node.kubernetes.io/instance-type', 'operator': 'In', 'values': ['inf1.xlarge', 'inf1.2xlarge', 'inf1.6xlarge', 'inf1.24xlarge', 'inf2.xlarge', 'inf2.4xlarge', 'inf2.8xlarge', 'inf2.24xlarge', 'inf2.48xlarge', 'trn1.2xlarge', 'trn1.32xlarge', 'trn1n.32xlarge']}]}]}}}, 'containers': [{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}], 'volumes': [{'name': 'device-plugin', 'hostPath': {'path': '/var/lib/kubelet/device-plugins'}}, {'name': 'infa-map', 'hostPath': {'path': '/run'}}]}}}}",1852
tfy-inferentia-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'tfy-inferentia-operator-neuron-device-plugin', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'spec': {'serviceAccount': 'tfy-inferentia-operator-neuron-device-plugin', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}, {'effect': 'NoSchedule', 'key': 'aws.amazon.com/neuron', 'operator': 'Exists'}], 'priorityClassName': 'system-node-critical', 'affinity': {'nodeAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': {'nodeSelectorTerms': [{'matchExpressions': [{'key': 'node.kubernetes.io/instance-type', 'operator': 'In', 'values': ['inf1.xlarge', 'inf1.2xlarge', 'inf1.6xlarge', 'inf1.24xlarge', 'inf2.xlarge', 'inf2.4xlarge', 'inf2.8xlarge', 'inf2.24xlarge', 'inf2.48xlarge', 'trn1.2xlarge', 'trn1.32xlarge', 'trn1n.32xlarge']}]}]}}}, 'containers': [{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}], 'volumes': [{'name': 'device-plugin', 'hostPath': {'path': '/var/lib/kubelet/device-plugins'}}, {'name': 'infa-map', 'hostPath': {'path': '/run'}}]}}}}",1852
tfy-inferentia-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'tfy-inferentia-operator-neuron-device-plugin', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'spec': {'serviceAccount': 'tfy-inferentia-operator-neuron-device-plugin', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}, {'effect': 'NoSchedule', 'key': 'aws.amazon.com/neuron', 'operator': 'Exists'}], 'priorityClassName': 'system-node-critical', 'affinity': {'nodeAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': {'nodeSelectorTerms': [{'matchExpressions': [{'key': 'node.kubernetes.io/instance-type', 'operator': 'In', 'values': ['inf1.xlarge', 'inf1.2xlarge', 'inf1.6xlarge', 'inf1.24xlarge', 'inf2.xlarge', 'inf2.4xlarge', 'inf2.8xlarge', 'inf2.24xlarge', 'inf2.48xlarge', 'trn1.2xlarge', 'trn1.32xlarge', 'trn1n.32xlarge']}]}]}}}, 'containers': [{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}], 'volumes': [{'name': 'device-plugin', 'hostPath': {'path': '/var/lib/kubelet/device-plugins'}}, {'name': 'infa-map', 'hostPath': {'path': '/run'}}]}}}}",1852
tfy-inferentia-operator,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', 'spec/template/spec/containers/0']","{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}",507
tfy-inferentia-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'tfy-inferentia-operator-neuron-device-plugin', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'spec': {'serviceAccount': 'tfy-inferentia-operator-neuron-device-plugin', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}, {'effect': 'NoSchedule', 'key': 'aws.amazon.com/neuron', 'operator': 'Exists'}], 'priorityClassName': 'system-node-critical', 'affinity': {'nodeAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': {'nodeSelectorTerms': [{'matchExpressions': [{'key': 'node.kubernetes.io/instance-type', 'operator': 'In', 'values': ['inf1.xlarge', 'inf1.2xlarge', 'inf1.6xlarge', 'inf1.24xlarge', 'inf2.xlarge', 'inf2.4xlarge', 'inf2.8xlarge', 'inf2.24xlarge', 'inf2.48xlarge', 'trn1.2xlarge', 'trn1.32xlarge', 'trn1n.32xlarge']}]}]}}}, 'containers': [{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}], 'volumes': [{'name': 'device-plugin', 'hostPath': {'path': '/var/lib/kubelet/device-plugins'}}, {'name': 'infa-map', 'hostPath': {'path': '/run'}}]}}}}",1852
tfy-inferentia-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', 'spec/template/spec/containers/0']","{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}",507
tfy-inferentia-operator,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', 'spec/template/spec/containers/0']","{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}",507
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'tfy-inferentia-operator-neuron-device-plugin', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'spec': {'serviceAccount': 'tfy-inferentia-operator-neuron-device-plugin', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}, {'effect': 'NoSchedule', 'key': 'aws.amazon.com/neuron', 'operator': 'Exists'}], 'priorityClassName': 'system-node-critical', 'affinity': {'nodeAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': {'nodeSelectorTerms': [{'matchExpressions': [{'key': 'node.kubernetes.io/instance-type', 'operator': 'In', 'values': ['inf1.xlarge', 'inf1.2xlarge', 'inf1.6xlarge', 'inf1.24xlarge', 'inf2.xlarge', 'inf2.4xlarge', 'inf2.8xlarge', 'inf2.24xlarge', 'inf2.48xlarge', 'trn1.2xlarge', 'trn1.32xlarge', 'trn1n.32xlarge']}]}]}}}, 'containers': [{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}], 'volumes': [{'name': 'device-plugin', 'hostPath': {'path': '/var/lib/kubelet/device-plugins'}}, {'name': 'infa-map', 'hostPath': {'path': '/run'}}]}}}}",1852
tfy-inferentia-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', 'spec/template/spec/containers/0']","{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}",507
tfy-inferentia-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['DaemonSet/default/tfy-inferentia-operator-neuron-device-plugin', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'tfy-inferentia-operator-neuron-device-plugin', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'name': 'tfy-inferentia-operator-neuron-device-plugin-ds'}}, 'spec': {'serviceAccount': 'tfy-inferentia-operator-neuron-device-plugin', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}, {'effect': 'NoSchedule', 'key': 'aws.amazon.com/neuron', 'operator': 'Exists'}], 'priorityClassName': 'system-node-critical', 'affinity': {'nodeAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': {'nodeSelectorTerms': [{'matchExpressions': [{'key': 'node.kubernetes.io/instance-type', 'operator': 'In', 'values': ['inf1.xlarge', 'inf1.2xlarge', 'inf1.6xlarge', 'inf1.24xlarge', 'inf2.xlarge', 'inf2.4xlarge', 'inf2.8xlarge', 'inf2.24xlarge', 'inf2.48xlarge', 'trn1.2xlarge', 'trn1.32xlarge', 'trn1n.32xlarge']}]}]}}}, 'containers': [{'image': 'public.ecr.aws/neuron/neuron-device-plugin:2.16.18.0', 'imagePullPolicy': 'Always', 'name': 'neuron-device-plugin', 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'env': [{'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}, 'volumeMounts': [{'name': 'device-plugin', 'mountPath': '/var/lib/kubelet/device-plugins'}, {'name': 'infa-map', 'mountPath': '/run'}]}], 'volumes': [{'name': 'device-plugin', 'hostPath': {'path': '/var/lib/kubelet/device-plugins'}}, {'name': 'infa-map', 'hostPath': {'path': '/run'}}]}}}}",1852
tfy-inferentia-operator,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension'}}, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-scheduler-extension', 'schedulerName': 'neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}]}}}}",1167
tfy-inferentia-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension'}}, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-scheduler-extension', 'schedulerName': 'neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}]}}}}",1167
tfy-inferentia-operator,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension'}}, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-scheduler-extension', 'schedulerName': 'neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}]}}}}",1167
tfy-inferentia-operator,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension'}}, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-scheduler-extension', 'schedulerName': 'neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}]}}}}",1167
tfy-inferentia-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension'}}, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-scheduler-extension', 'schedulerName': 'neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}]}}}}",1167
tfy-inferentia-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', 'spec/template/spec/containers/0']","{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}",239
tfy-inferentia-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/tfy-inferentia-operator-scheduler-extension', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'tfy-inferentia-operator-scheduler-extension', 'namespace': 'default', 'labels': {'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension'}}, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-scheduler', 'component': 'scheduler-extension', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-scheduler-extension', 'schedulerName': 'neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'name': 'scheduler-exp', 'image': 'public.ecr.aws/neuron/neuron-scheduler:2.18.3.0', 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'env': [{'name': 'PORT', 'value': '12345'}]}]}}}}",1167
tfy-inferentia-operator,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', 'spec/template/spec/containers/0']","{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}",731
tfy-inferentia-operator,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', 'spec/template/spec/containers/0']","{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}",731
tfy-inferentia-operator,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', 'spec/template/spec/containers/0']","{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}",731
tfy-inferentia-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'component': 'scheduler', 'tier': 'control-plane', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'tfy-inferentia-operator-neuron-scheduler', 'namespace': 'default', 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane', 'version': 'second', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}], 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'tfy-inferentia-operator-neuron-scheduler-config'}}]}}}}",1812
tfy-inferentia-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'component': 'scheduler', 'tier': 'control-plane', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'tfy-inferentia-operator-neuron-scheduler', 'namespace': 'default', 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane', 'version': 'second', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}], 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'tfy-inferentia-operator-neuron-scheduler-config'}}]}}}}",1812
tfy-inferentia-operator,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', 'spec/template/spec/containers/0']","{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}",731
tfy-inferentia-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'component': 'scheduler', 'tier': 'control-plane', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'tfy-inferentia-operator-neuron-scheduler', 'namespace': 'default', 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane', 'version': 'second', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}], 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'tfy-inferentia-operator-neuron-scheduler-config'}}]}}}}",1812
tfy-inferentia-operator,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', 'spec/template/spec/containers/0']","{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}",731
tfy-inferentia-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'component': 'scheduler', 'tier': 'control-plane', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'tfy-inferentia-operator-neuron-scheduler', 'namespace': 'default', 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane', 'version': 'second', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}], 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'tfy-inferentia-operator-neuron-scheduler-config'}}]}}}}",1812
tfy-inferentia-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', 'spec/template/spec/containers/0']","{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}",731
tfy-inferentia-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'component': 'scheduler', 'tier': 'control-plane', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'tfy-inferentia-operator-neuron-scheduler', 'namespace': 'default', 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane', 'version': 'second', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}], 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'tfy-inferentia-operator-neuron-scheduler-config'}}]}}}}",1812
tfy-inferentia-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', 'spec/template/spec/containers/0']","{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}",731
tfy-inferentia-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/tfy-inferentia-operator-neuron-scheduler', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'component': 'scheduler', 'tier': 'control-plane', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'tfy-inferentia-operator-neuron-scheduler', 'namespace': 'default', 'annotations': {}}, 'spec': {'selector': {'matchLabels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'tfy-inferentia-operator-neuron-scheduler', 'component': 'scheduler', 'tier': 'control-plane', 'version': 'second', 'helm.sh/chart': 'tfy-inferentia-operator-0.2.6', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'priorityClassName': 'system-cluster-critical', 'serviceAccountName': 'tfy-inferentia-operator-neuron-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}], 'affinity': {}, 'containers': [{'image': 'registry.k8s.io/kube-scheduler:v1.27.7', 'args': ['--config=/etc/kubernetes/neuron-scheduler/neuron-scheduler-config.yaml', '--leader-elect=true', '--v=2', '--lock-object-name=neuron-scheduler', '--pod-max-in-unschedulable-pods-duration=30s'], 'command': ['/usr/local/bin/kube-scheduler'], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 15}, 'name': 'neuron-scheduler', 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10259, 'scheme': 'HTTPS'}}, 'resources': {'limits': {'cpu': '400m', 'memory': '256Mi'}, 'requests': {'cpu': '200m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/kubernetes/neuron-scheduler'}]}], 'volumes': [{'name': 'config-volume', 'configMap': {'name': 'tfy-inferentia-operator-neuron-scheduler-config'}}]}}}}",1812
tfy-inferentia-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/tfy-inferentia-operator-neuron-device-plugin', 'resource_type']",{},11589
tfy-inferentia-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/tfy-inferentia-operator-scheduler-extension', 'resource_type']",{},11589
tfy-inferentia-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/tfy-inferentia-operator-neuron-scheduler', 'resource_type']",{},11589
terraform-enterprise,checkov,CKV_K8S_41,check_35,RBAC and Service Accounts,Ensure that default service accounts are not actively used,"['ServiceAccount/default/default', '']","{'apiVersion': 'v1', 'automountServiceAccountToken': True, 'kind': 'ServiceAccount', 'metadata': {'name': 'default', 'namespace': 'default'}}",141
terraform-enterprise,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/terraform-enterprise-env-secrets', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'type': 'Opaque', 'metadata': {'name': 'terraform-enterprise-env-secrets', 'namespace': 'default'}, 'data': None}",152
terraform-enterprise,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/terraform-enterprise-env-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'terraform-enterprise-env-config', 'namespace': 'default'}, 'data': {'TFE_RUN_PIPELINE_DRIVER': 'kubernetes', 'TFE_RUN_PIPELINE_KUBERNETES_NAMESPACE': 'default-agents', 'TFE_VAULT_DISABLE_MLOCK': 'true', 'TFE_HTTP_PORT': '8080', 'TFE_HTTPS_PORT': '8443', 'TFE_TLS_CERT_FILE': '/etc/ssl/private/terraform-enterprise/cert.pem', 'TFE_TLS_KEY_FILE': '/etc/ssl/private/terraform-enterprise/key.pem'}}",458
terraform-enterprise,checkov,CKV_K8S_42,check_35,RBAC and Service Accounts,Ensure that default service accounts are not actively used,"['RoleBinding/default-agents/default-agents', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'name': 'default-agents', 'namespace': 'default-agents'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'Role', 'name': 'default'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'default', 'namespace': 'default'}]}",314
terraform-enterprise,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/terraform-enterprise', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default'}, 'spec': {'type': 'LoadBalancer', 'ports': [{'name': 'https-port', 'port': 443, 'targetPort': 8443, 'appProtocol': 'tcp'}], 'selector': {'app': 'terraform-enterprise'}}}",278
terraform-enterprise,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0/envFrom/0']",{'configMapRef': {'name': 'terraform-enterprise-env-config'}},61
terraform-enterprise,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/terraform-enterprise', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/terraform-enterprise', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/terraform-enterprise', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/terraform-enterprise', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/terraform-enterprise', 'spec/template/spec/containers/0']","{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}",761
terraform-enterprise,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/terraform-enterprise', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/terraform-enterprise', 'resource_type']",{},3316
ed-traefik2,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/traefik', '']","{'kind': 'ServiceAccount', 'apiVersion': 'v1', 'metadata': {'name': 'traefik', 'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}}",169
ed-traefik2,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['DaemonSet/default/traefik', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'traefik', 'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'serviceAccountName': 'traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}], 'volumes': [{'name': 'data', 'emptyDir': {}}], 'securityContext': {'fsGroup': 65532}}}}}",1797
ed-traefik2,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['DaemonSet/default/traefik', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'traefik', 'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'serviceAccountName': 'traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}], 'volumes': [{'name': 'data', 'emptyDir': {}}], 'securityContext': {'fsGroup': 65532}}}}}",1797
ed-traefik2,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0/ports/0']","{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}",61
ed-traefik2,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['DaemonSet/default/traefik', '']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'traefik', 'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'serviceAccountName': 'traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}], 'volumes': [{'name': 'data', 'emptyDir': {}}], 'securityContext': {'fsGroup': 65532}}}}}",1797
ed-traefik2,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV_K8S_25,check_34,Pod Security Policy,Minimize the admission of containers with added capability,"['DaemonSet/default/traefik', 'spec/template/spec/containers/0']","{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}",1185
ed-traefik2,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/traefik', 'resource_type']",{},3875
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/operator', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'operator', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}}}",370
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/otel-leader-election', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'Role', 'metadata': {'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'name': 'otel-leader-election', 'namespace': 'default'}, 'rules': [{'apiGroups': [''], 'resources': ['configmaps'], 'verbs': ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']}, {'apiGroups': [''], 'resources': ['configmaps/status'], 'verbs': ['get', 'update', 'patch']}, {'apiGroups': [''], 'resources': ['events'], 'verbs': ['create', 'patch']}]}",703
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/otel-leader-election', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'name': 'otel-leader-election', 'namespace': 'default'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'Role', 'name': 'otel-leader-election'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'operator', 'namespace': 'default'}]}",593
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/otel', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'name': 'otel', 'namespace': 'default'}, 'spec': {'ports': [{'name': 'https', 'port': 8443, 'protocol': 'TCP', 'targetPort': 'https'}, {'name': 'metrics', 'port': 8080, 'protocol': 'TCP', 'targetPort': 'metrics'}], 'selector': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}}",639
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/otel-webhook', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'name': 'otel-webhook', 'namespace': 'default'}, 'spec': {'ports': [{'port': 443, 'protocol': 'TCP', 'targetPort': 'webhook-server'}], 'selector': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}}",559
otel-operator,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/otel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'name': 'otel', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}, 'spec': {'hostNetwork': False, 'containers': [{'args': ['--metrics-addr=0.0.0.0:8080', '--enable-leader-election', '--health-probe-addr=:8081', '--webhook-port=9443', '--collector-image=otel/opentelemetry-collector-contrib:latest'], 'command': ['/manager'], 'env': [{'name': 'ENABLE_WEBHOOKS', 'value': 'true'}], 'image': 'ghcr.io/open-telemetry/opentelemetry-operator/opentelemetry-operator:0.103.0', 'name': 'manager', 'ports': [{'containerPort': 8080, 'name': 'metrics', 'protocol': 'TCP'}, {'containerPort': 9443, 'name': 'webhook-server', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '64Mi'}}, 'volumeMounts': [{'mountPath': '/tmp/k8s-webhook-server/serving-certs', 'name': 'cert', 'readOnly': True}]}, {'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}], 'serviceAccountName': 'operator', 'terminationGracePeriodSeconds': 10, 'volumes': [{'name': 'cert', 'secret': {'defaultMode': 420, 'secretName': 'otel-controller-manager-service-cert'}}], 'securityContext': {'fsGroup': 65532, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}}}}}",2393
otel-operator,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/otel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'name': 'otel', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}, 'spec': {'hostNetwork': False, 'containers': [{'args': ['--metrics-addr=0.0.0.0:8080', '--enable-leader-election', '--health-probe-addr=:8081', '--webhook-port=9443', '--collector-image=otel/opentelemetry-collector-contrib:latest'], 'command': ['/manager'], 'env': [{'name': 'ENABLE_WEBHOOKS', 'value': 'true'}], 'image': 'ghcr.io/open-telemetry/opentelemetry-operator/opentelemetry-operator:0.103.0', 'name': 'manager', 'ports': [{'containerPort': 8080, 'name': 'metrics', 'protocol': 'TCP'}, {'containerPort': 9443, 'name': 'webhook-server', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '64Mi'}}, 'volumeMounts': [{'mountPath': '/tmp/k8s-webhook-server/serving-certs', 'name': 'cert', 'readOnly': True}]}, {'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}], 'serviceAccountName': 'operator', 'terminationGracePeriodSeconds': 10, 'volumes': [{'name': 'cert', 'secret': {'defaultMode': 420, 'secretName': 'otel-controller-manager-service-cert'}}], 'securityContext': {'fsGroup': 65532, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}}}}}",2393
otel-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/otel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'name': 'otel', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}, 'template': {'metadata': {'annotations': {'kubectl.kubernetes.io/default-container': 'manager'}, 'labels': {'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/component': 'controller-manager'}}, 'spec': {'hostNetwork': False, 'containers': [{'args': ['--metrics-addr=0.0.0.0:8080', '--enable-leader-election', '--health-probe-addr=:8081', '--webhook-port=9443', '--collector-image=otel/opentelemetry-collector-contrib:latest'], 'command': ['/manager'], 'env': [{'name': 'ENABLE_WEBHOOKS', 'value': 'true'}], 'image': 'ghcr.io/open-telemetry/opentelemetry-operator/opentelemetry-operator:0.103.0', 'name': 'manager', 'ports': [{'containerPort': 8080, 'name': 'metrics', 'protocol': 'TCP'}, {'containerPort': 9443, 'name': 'webhook-server', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081}, 'initialDelaySeconds': 15, 'periodSeconds': 20}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081}, 'initialDelaySeconds': 5, 'periodSeconds': 10}, 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '100m', 'memory': '64Mi'}}, 'volumeMounts': [{'mountPath': '/tmp/k8s-webhook-server/serving-certs', 'name': 'cert', 'readOnly': True}]}, {'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}], 'serviceAccountName': 'operator', 'terminationGracePeriodSeconds': 10, 'volumes': [{'name': 'cert', 'secret': {'defaultMode': 420, 'secretName': 'otel-controller-manager-service-cert'}}], 'securityContext': {'fsGroup': 65532, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}}}}}",2393
otel-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/otel', 'spec/template/spec/containers/1']","{'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=0'], 'image': 'quay.io/brancz/kube-rbac-proxy:v0.15.0', 'name': 'kube-rbac-proxy', 'ports': [{'containerPort': 8443, 'name': 'https', 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '5m', 'memory': '64Mi'}}}",374
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/otel-controller-manager-service-cert', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'type': 'kubernetes.io/tls', 'metadata': {'annotations': {'helm.sh/hook': 'pre-install,pre-upgrade', 'helm.sh/hook-delete-policy': 'before-hook-creation'}, 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'webhook'}, 'name': 'otel-controller-manager-service-cert', 'namespace': 'default'}, 'data': {'tls.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lRWUd2N1hRUk1PaE9nWHJMeDAyUi8rakFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKdmNHVnVkR1ZzWlcxbGRISjVMVzl3WlhKaGRHOXlMVzl3WlhKaGRHOXlMV05oTUI0WApEVEkxTURNeU9URTJNVFV3T1ZvWERUSTJNRE15T1RFMk1UVXdPVm93RHpFTk1Bc0dBMVVFQXhNRWIzUmxiRENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTE01WnJTRldKNjZGQzlxdVJ2Rnh5b3MKeC9jdTdRU3dDWjJHSkFkZHZXSmtUYWEyaTB4ZENvaTBmdHNSVjFJWGJWUWc3OTA5OWJCZXEvZUFkZXVveFdjRwpXbUJDK2ZnMWpWMkg0UkJSeG16cTMrVnZ2WEs4QklDa0hMSVplNkw1bmozK1c5dytHL2JoMVphU21kSzNIdy9QCjJmZExZb2JZZ2lsNjUvZS9lMDZETlJubGxlN1N2YzJERzlpMnR6dXlZS1dNcmtLOEV3cmE4bjFQaE9aeVk4WlEKVVJPNU96cEdPNnhhM1l1MzgwT3FCalF6eWhOWEtDQklUY3RtaTdpR3hNVWlKQlArSWM2MnJvcGRDKzM5TkhiYgp0dHJKWU5qK0pNY0JnZW9pZlp6OGd6V1hOSHlyTnRoRWRZMVRvU1hHSi90aWFYOWl5dzZqQWRlcm03aW1CWDhDCkF3RUFBYU9CbkRDQm1UQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVa2l4K3NHOXorY0lHSUYzWQo5bjhkNXZJb29DQXdPUVlEVlIwUkJESXdNSUlVYjNSbGJDMTNaV0pvYjI5ckxtUmxabUYxYkhTQ0dHOTBaV3d0CmQyVmlhRzl2YXk1a1pXWmhkV3gwTG5OMll6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFwZ2orT3A3SllMMGoKTUgzd2hCZi9JaGJoQ2ltRTV3L1Rra1VqYTZKeTAzcHNhYVFKUXZDa2Uzb0pkUE16cExSUmtnRTYvN2tiQlg0Sgp4UkJxaVpieWRPcWRhMnZ3Q0VtM1VyT2J3SFp2ak94WDhlb1RsaUJtL0NqOFhSdkNYejE4UEt3VjNvMzVJd2toCjBMZEwvUmI1SVIxWWl5VVhkRm0xbmpGNEN3Q2tRTXV6ZGNxNVRaaXFLbndMQS9jdmtJdXlwNG9ZbVV1WW1zVEIKS2x1WGsvWWdyRDhCVGI4K2VDcWJHdFNWZUNiRTlhMzFNZFF6ZEltbUs1ZExiUFRiWE1NNFlFS1piSldpbE4xWApyLzRrVFc4RW1xRkk0OUpKV3NIZ3J3bldzZFE4a1dCMUZvVTZKeEtYZTIwUmxXc21ETUUwZlhkN3o0RmM3SmNkClVDU2tnVUY5Smc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', 'tls.key': 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc3psbXRJVllucm9VTDJxNUc4WEhLaXpIOXk3dEJMQUpuWVlrQjEyOVltUk5wcmFMClRGMEtpTFIrMnhGWFVoZHRWQ0R2M1QzMXNGNnI5NEIxNjZqRlp3WmFZRUw1K0RXTlhZZmhFRkhHYk9yZjVXKzkKY3J3RWdLUWNzaGw3b3ZtZVBmNWIzRDRiOXVIVmxwS1owcmNmRDgvWjkwdGlodGlDS1hybjk3OTdUb00xR2VXVgo3dEs5ellNYjJMYTNPN0pncFl5dVFyd1RDdHJ5ZlUrRTVuSmp4bEJSRTdrN09rWTdyRnJkaTdmelE2b0dORFBLCkUxY29JRWhOeTJhTHVJYkV4U0lrRS80aHpyYXVpbDBMN2YwMGR0dTIyc2xnMlA0a3h3R0I2aUo5blB5RE5aYzAKZktzMjJFUjFqVk9oSmNZbisySnBmMkxMRHFNQjE2dWJ1S1lGZndJREFRQUJBb0lCQURoZUlWTTliVFhleUdKeAphbTYxc1lJdU8yWWV1Q1QxU05EbVU0YU5rUGJWSFNjRjJxSFYwVzVWZG1Cbi85S3QwNURXR3hxMlZnTjJneGVBCnE1WEdxdTlRTERTQ1hDUVlrN0dLL3RvbkhnVTdpZGViWVRZb3RESFJhOFVJQnI2blM0R3I4akEreUlUSldtZlYKQzlRZURBTHBHR0NTc1JaQUdnLzV1K05Mc2ZocS9OSzlyV3Uzb0hsd1J3L2VnY1hveXk2WmlwRHlUYkVNL2hIcQo5OUVvaUVqa29jVTNTQTl3Ymhqdi81Q1FFTW5XMExkYmxLcVp5OTViSTVRclkvaFVSSnhsZE9CdnhZcnhrVUhCCkZiaTFVUmVkcFVSVXZ0eDg0VDBXMFpUd3pxTUlOMjZLZ1hRRENqSGdQbEJnSExqdUpxSzhGa1NoOU9nUDlYTXoKSDFFMGlRRUNnWUVBeVJQN3ZtcW1Fc2t6RU5zclJyZGl2SXNQb0pKZzRsN2M1b0dWYk1ZVnFhcEN0SE1NazFwSwpaQUNJRHRCTjZmZU8rZEdKZEExckM3bnVseWR2VXkva2VUQ0xqKzd4VFdBS1NaK1hLejlxWnN5WU1nNTljdkxoCmdHOTVieGtTbldHODBYKzBEZjdzOTBOSmEwQjdSMG5zcVloS0pENElVNTA3bHoxakFQcHI3bDhDZ1lFQTVDMVUKQVczQmdaN091RjcvT1FUekxHSDMveG9RWTZhK0hxMHJsMDRjNjVLdFdWYVd1eXFsZXRveXlGMjVBcXFOUjduTQowRUlOMEJiNWRhcjd2VzVBUSt2bVRJaGFHMlFhU0k3dmhBNTNwK1dZMjVCb1RuWUpsOWtMeW9rWWt6clE0S3hmCjJNSytCYkdRMzBVUW4rVDBlYmdROUlSRTc2U2M4OVFuU2FsYy9PRUNnWUVBbGVFeFdxUUFHaXlpeGNPNEpFUDUKY3ZSc3Q1R2thZGV2N0psV21mZWttZ3p4SDdSS0FXUGg0MXlLRGhDeW90MEdVNndlT3NUdHI1WHVBL2srLzlESgpDcFJtMHVpV01NaVBvb1UwbHVYMEY2QVZLZXFuRTVGN0NOTU92d0wvWHhSRlBCdG1TTEJtVFlCNEwxdW5DR0pQCjU2WlJMV2FYcWt1ZTZZSzJVenBXVFIwQ2dZRUFqaDRaYTRaajl3cmxzSG9pdHUzNVU5UjFOV09UZjYzVVRxRUgKUEljL2hnNW1mL1Zwam93Q1k2RlI3ZkJLRW5vTjR2Vzd0cDdkb1pVZHJRZGhJbHh3RkozeVpBcXRMTkJOZXBIawpacmpvR0IvdDlCdGVqRGdDdzV4Qk50WHJBNUNubHJobVBra1ZOOUNmN2lCRE9ZUE9MWjNTbWFsa2ttcFNBNkJKCkZCMHp1S0VDZ1lCSTRkd1ZvOTFSbERzQWtaK2FFWGZjM2pYTXdmN29ZdHNnV1pJbndNTWhtRElMLzRkaHFNc0oKd3JvZkVLYU05eVBtMnZSSWdvbjVtV1dON09ES2FzQnFUNW92S05FcVhzNHlOTk9Wek1hMkc2Z3o2NFpiN0hlcQpjTzUxYWhIRkEraEdKcEdldC8wVHEzOWkvRWtOUXY4UVU1QmNrKzA3Qjk0NnhDcmlkMit5UUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=', 'ca.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURSakNDQWk2Z0F3SUJBZ0lSQUoyOEc0a2k4KzhtamlIQ1hqaU1UN2d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWIzQmxiblJsYkdWdFpYUnllUzF2Y0dWeVlYUnZjaTF2Y0dWeVlYUnZjaTFqWVRBZQpGdzB5TlRBek1qa3hOakUxTURoYUZ3MHlOakF6TWpreE5qRTFNRGhhTUMweEt6QXBCZ05WQkFNVEltOXdaVzUwClpXeGxiV1YwY25rdGIzQmxjbUYwYjNJdGIzQmxjbUYwYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREEwNnNBRENMTTZDd0NTQlJWVjYxbktrVUo3MnRmWmdjSUtOYVJyTDB6YTdiSQpYd3dXbHdXU2drT2lGNGhZWHdnZWU0TzZSOXlsWnJDN21ndTRKYWwxcmlDVzRXTG5VVG5DUmlKR3BKMEpiNHdhCmVlMEVaNTEzdDdTZFhKNUY5anoxOSt4N0tDYVVTUGRlVTV3VVNDa0EvaTRKWDlUYmovOVJiSnhiQUFycldha2cKcGdXL1BpYjdZM0l3SVU0cXljQnZvQkRJWVFsK2hBWmtEYUt4ZGE5RXVKZ1FTTWJpM0trVXc0SG9STWhMM1RJbApSSHF0ZC92Y3FBYTJmZEtXY2FMaFVHY3piRTZ0RzhhdE8vdFVLM3FyYjJMbk9rbzNUaWQzUnMzaUtnQW0vUWZnCitSSXJtYmN2MjhVMm9kN1U2azkwYm9PeTRkTTVuMEVvTnp3SjFPdjVBZ01CQUFHallUQmZNQTRHQTFVZER3RUIKL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFILwpCQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVraXgrc0c5eitjSUdJRjNZOW44ZDV2SW9vQ0F3RFFZSktvWklodmNOCkFRRUxCUUFEZ2dFQkFKeVV2bnY4YmFpU2ZEYkFvS2VNSklrb2tnZ3luVEJ2NDFjQUE1MFFxUW5BTFlKZXJyRzkKRkM5aWNxOUJScGJnbGMwdGNFN2l0cERjUU9CdUk3ZVNuNnhMMEdCd1VicGcrUWphTWhzVlFueGhXeWJWZG51QQpUK3JIK3VPbTJ3WGFSMTlLVFNxMFhLOFhEVkJVbmR2WVBGa0NFd2o2ang4YU0weE9ZblFKSThtb3h0OGdkVEM5CkE4OUhTRHBWK2RYSVdqOVpKQ2tRZmROUHVtOEtScCtmVVROeTFtMWdGN3lrSDV1MTFnQkl4ZWtmdktZeGJ4YjUKK09wdFpZdDlPVEpDNC90OU5OaUwvTjFGRTBMbVVIcmxpdnRFcndLeHVydyt4SzJIVEhJMy8yYkJobzV5Y0ZVMQpWdWtLMnRnQVFUbGtoc1lJbUhQWHpzb1RmT2J5b0ozMXVUMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='}}",6064
otel-operator,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/otel-metrics', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-metrics', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",856
otel-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/otel-metrics', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-metrics', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",856
otel-operator,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/otel-metrics', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-metrics', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",856
otel-operator,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/otel-metrics', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-metrics', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",856
otel-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/otel-metrics', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-metrics', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",856
otel-operator,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/otel-metrics', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",398
otel-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/otel-metrics', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-metrics', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",856
otel-operator,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/otel-webhook', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-webhook', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",831
otel-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/otel-webhook', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-webhook', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",831
otel-operator,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/otel-webhook', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-webhook', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",831
otel-operator,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/otel-webhook', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-webhook', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",831
otel-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/otel-webhook', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-webhook', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",831
otel-operator,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/otel-webhook', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}",373
otel-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/otel-webhook', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-webhook', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",831
otel-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/otel', 'resource_type']",{},254620
otel-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/otel-metrics', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-metrics', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'MANAGER_METRICS_SERVICE_CLUSTERIP', 'value': 'otel'}, {'name': 'MANAGER_METRICS_SERVICE_PORT', 'value': '8443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$MANAGER_METRICS_SERVICE_CLUSTERIP:$MANAGER_METRICS_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",856
otel-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/otel-webhook', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'otel-webhook', 'namespace': 'default', 'labels': {'helm.sh/chart': 'operator-0.64.2', 'app.kubernetes.io/name': 'operator', 'app.kubernetes.io/version': '0.103.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/instance': 'otel-operator', 'app.kubernetes.io/component': 'controller-manager'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox:latest', 'env': [{'name': 'WEBHOOK_SERVICE_CLUSTERIP', 'value': 'otel-webhook'}, {'name': 'WEBHOOK_SERVICE_PORT', 'value': '443'}], 'command': ['sh', '-c', 'wget_output=$(wget -q ""$WEBHOOK_SERVICE_CLUSTERIP:$WEBHOOK_SERVICE_PORT"")\nif wget_output==""wget: server returned error: HTTP/1.0 400 Bad Request""\nthen exit 0\nelse exit 1\nfi\n']}], 'restartPolicy': 'Never'}}",831
vault-dev,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/vault-dev', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'type': 'ClusterIP', 'selector': {'release': 'vault-dev'}, 'ports': [{'port': 80, 'name': 'http80', 'targetPort': 8200}, {'port': 8200, 'name': 'http8200', 'targetPort': 8200}]}}",298
vault-dev,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/vault-dev', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['StatefulSet/default/vault-dev', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/vault-dev', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/vault-dev', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/vault-dev', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['StatefulSet/default/vault-dev', 'spec/template/spec/containers/0']","{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}",363
vault-dev,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/vault-dev', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/vault-dev', 'resource_type']",{},965
stock-x,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/stock-x-dev', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'stock-x-dev', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}}",286
stock-x,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/stock-x', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'NodePort', 'ports': [{'port': 8888, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}}",481
stock-x,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/stock-x', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/stock-x', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/stock-x', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/stock-x', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/stock-x', 'spec/template/spec/containers/0']","{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}",207
stock-x,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/stock-x', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/stock-x', 'resource_type']",{},1597
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/akaunting-mariadb', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3'}}, 'automountServiceAccountToken': False}",358
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/akaunting-mariadb', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'data': {'my.cnf': '[mysqld]\nskip-name-resolve\nexplicit_defaults_for_timestamp\nbasedir=/opt/bitnami/mariadb\ndatadir=/bitnami/mariadb/data\nplugin_dir=/opt/bitnami/mariadb/plugin\nport=3306\nsocket=/opt/bitnami/mariadb/tmp/mysql.sock\ntmpdir=/opt/bitnami/mariadb/tmp\nmax_allowed_packet=16M\nbind-address=*\npid-file=/opt/bitnami/mariadb/tmp/mysqld.pid\nlog-error=/opt/bitnami/mariadb/logs/mysqld.log\ncharacter-set-server=UTF8\ncollation-server=utf8_general_ci\nslow_query_log=0\nlong_query_time=10.0\n\n[client]\nport=3306\nsocket=/opt/bitnami/mariadb/tmp/mysql.sock\ndefault-character-set=UTF8\nplugin_dir=/opt/bitnami/mariadb/plugin\n\n[manager]\nport=3306\nsocket=/opt/bitnami/mariadb/tmp/mysql.sock\npid-file=/opt/bitnami/mariadb/tmp/mysqld.pid'}}",1113
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/akaunting-mariadb-init-scripts', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'akaunting-mariadb-init-scripts', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'data': {'custom-initdb.sql': ""GRANT ALL PRIVILEGES ON *.* TO 'akaunting'@'%' WITH GRANT OPTION;""}}",469
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/akaunting-mariadb', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'type': 'ClusterIP', 'sessionAffinity': 'None', 'ports': [{'name': 'mysql', 'port': 3306, 'protocol': 'TCP', 'targetPort': 'mysql', 'nodePort': None}], 'selector': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}}",673
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/akaunting', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/service': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 80, 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}}",569
akaunting,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/akaunting', 'spec/template/spec/containers/0/env/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/akaunting', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/akaunting', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/akaunting', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/akaunting', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/akaunting', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/akaunting', 'spec/template/spec/containers/0']","{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}",1366
akaunting,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/akaunting', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0/env/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/akaunting-mariadb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/akaunting-mariadb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/akaunting-mariadb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/akaunting-mariadb', 'spec/template/spec/containers/0']","{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}",1728
akaunting,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/akaunting-mariadb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/mariadb-secrets', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'mariadb-secrets', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-delete-policy': 'before-hook-creation'}, 'labels': {'app': 'akaunting'}}, 'type': 'Opaque', 'data': {'mariadb-root-password': 'cGxlYXNlQ2hhbmdlTWU=', 'mariadb-replication-password': 'cGxlYXNlQ2hhbmdlTWU=', 'mariadb-password': 'cGxlYXNlQ2hhbmdlTWU='}}",390
akaunting,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/akaunting-secrets', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'akaunting-secrets', 'annotations': {'helm.sh/hook': 'pre-install', 'helm.sh/hook-delete-policy': 'before-hook-creation'}, 'labels': {'app': 'akaunting'}}, 'type': 'Opaque', 'data': {'admin-password': 'cGxlYXNlQ2hhbmdlTWU='}}",285
akaunting,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/akaunting', 'resource_type']",{},10606
akaunting,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/akaunting-mariadb', 'resource_type']",{},10606
instant-chart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/instant-chart', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'instant-chart', 'labels': {'app.kubernetes.io/instance': 'instant-chart', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'instant-chart', 'helm.sh/chart': 'instant-chart-0.5.2'}}, 'automountServiceAccountToken': True}",305
instant-chart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/instant-chart', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'instant-chart', 'labels': {'app.kubernetes.io/instance': 'instant-chart', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'instant-chart', 'helm.sh/chart': 'instant-chart-0.5.2'}}, 'spec': {'selector': {'app.kubernetes.io/instance': 'instant-chart', 'app.kubernetes.io/name': 'instant-chart'}, 'ports': [{'name': 'port-0', 'port': 80, 'targetPort': 80, 'protocol': 'TCP'}], 'type': 'ClusterIP'}}",475
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/blackduck-alert-service-account', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'labels': {'app': 'alert', 'component': 'serviceaccount', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-service-account', 'namespace': 'default'}}",213
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/blackduck-alert-environs-secret', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'data': None, 'metadata': {'labels': {'app': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-environs-secret', 'namespace': 'default'}, 'type': 'Opaque'}",206
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/blackduck-alert-db-creds', '']","{'apiVersion': 'v1', 'data': {'ALERT_POSTGRES_USER_PASSWORD_FILE': 'YmxhY2tkdWNr', 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE': 'YmxhY2tkdWNr'}, 'kind': 'Secret', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-db-creds', 'namespace': 'default'}, 'type': 'Opaque'}",327
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/blackduck-alert-environs', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'data': {'ALERT_HOSTNAME': 'localhost', 'ALERT_SERVER_PORT': '8443', 'ALERT_FORWARD_HEADERS_STRATEGY': 'none', 'HUB_CFSSL_HOST': 'blackduck-alert-cfssl'}, 'metadata': {'labels': {'app': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-environs', 'namespace': 'default'}}",325
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/blackduck-alert-db-config', '']","{'apiVersion': 'v1', 'data': {'ALERT_DB_SSL_MODE': 'disable', 'ALERT_DB_HOST': 'blackduck-alert-postgres', 'ALERT_DB_PORT': '5432', 'ALERT_DB_USERNAME': 'sa', 'ALERT_DB_NAME': 'alertdb', 'ALERT_DB_ADMIN_USERNAME': 'sa'}, 'kind': 'ConfigMap', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-db-config', 'namespace': 'default'}}",396
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/blackduck-alert-rabbitmq-config', '']","{'apiVersion': 'v1', 'data': {'ALERT_RABBITMQ_HOST': 'blackduck-alert-rabbitmq', 'ALERT_RABBITMQ_PORT': '5672', 'ALERT_RABBITMQ_MGMNT_PORT': '15672', 'ALERT_RABBITMQ_USER': 'sysadmin', 'ALERT_RABBITMQ_PASSWORD': 'blackduck', 'ALERT_RABBITMQ_VHOST': 'blackduck-alert'}, 'kind': 'ConfigMap', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq-config', 'namespace': 'default'}}",450
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/blackduck-alert-cfssl', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'ports': [{'name': 'port-8888', 'port': 8888, 'protocol': 'TCP', 'targetPort': 8888}], 'selector': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'type': 'ClusterIP'}}",384
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/blackduck-alert', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'ports': [{'name': 'port-8443', 'port': 8443, 'protocol': 'TCP', 'targetPort': 8443}], 'selector': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'type': 'ClusterIP'}}",378
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/blackduck-alert-exposed', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'app': 'alert', 'name': 'blackduck-alert', 'component': 'alert'}, 'name': 'blackduck-alert-exposed', 'namespace': 'default'}, 'spec': {'ports': [{'name': 'port-8443', 'port': 8443, 'protocol': 'TCP', 'targetPort': 8443}], 'selector': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'type': 'NodePort'}}",385
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/blackduck-alert-postgres', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'ports': [{'name': 'port-5432', 'port': 5432, 'protocol': 'TCP', 'targetPort': 5432}], 'selector': {'app': 'alert', 'component': 'postgres'}, 'type': 'ClusterIP'}}",366
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/blackduck-alert-rabbitmq', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'ports': [{'name': 'port-5432', 'port': 5672, 'protocol': 'TCP', 'targetPort': 5672}], 'selector': {'app': 'alert', 'component': 'rabbitmq'}, 'type': 'ClusterIP'}}",366
blackduck-alert,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/blackduck-alert-cfssl', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/blackduck-alert-cfssl', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/blackduck-alert-cfssl', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/blackduck-alert-cfssl', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/blackduck-alert-cfssl', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/blackduck-alert-cfssl', 'spec/template/spec/containers/0']","{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}",551
blackduck-alert,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/blackduck-alert-cfssl', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0/env/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/blackduck-alert', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/blackduck-alert', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/blackduck-alert', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/blackduck-alert', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/blackduck-alert', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/blackduck-alert', 'spec/template/spec/containers/0']","{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}",1142
blackduck-alert,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/blackduck-alert', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0/env/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/blackduck-alert-postgres', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/blackduck-alert-postgres', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/blackduck-alert-postgres', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/blackduck-alert-postgres', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/blackduck-alert-postgres', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/blackduck-alert-postgres', 'spec/template/spec/containers/0']","{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}",1995
blackduck-alert,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/blackduck-alert-postgres', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0/envFrom/0']",{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}},61
blackduck-alert,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/blackduck-alert-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/blackduck-alert-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/blackduck-alert-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/blackduck-alert-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/blackduck-alert-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/blackduck-alert-rabbitmq', 'spec/template/spec/containers/0']","{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}",723
blackduck-alert,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/blackduck-alert-rabbitmq', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/blackduck-alert-cfssl', 'resource_type']",{},12589
blackduck-alert,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/blackduck-alert', 'resource_type']",{},12589
blackduck-alert,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/blackduck-alert-postgres', 'resource_type']",{},12589
blackduck-alert,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/blackduck-alert-rabbitmq', 'resource_type']",{},12589
grpc-web,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/grpc-web', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'grpc-web', 'labels': {'app.kubernetes.io/name': 'grpc-web', 'helm.sh/chart': 'grpc-web-0.13.1', 'app.kubernetes.io/instance': 'grpc-web', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': None}, 'automountServiceAccountToken': False}",407
grpc-web,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/grpc-web', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'grpc-web', 'labels': {'app.kubernetes.io/name': 'grpc-web', 'helm.sh/chart': 'grpc-web-0.13.1', 'app.kubernetes.io/instance': 'grpc-web', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'type': 'ClusterIP', 'ipFamilyPolicy': 'PreferDualStack', 'ipFamilies': ['IPv4'], 'ports': [{'name': 'http', 'port': 7070, 'targetPort': 'http', 'protocol': 'TCP', 'appProtocol': None}], 'selector': {'app.kubernetes.io/name': 'grpc-web', 'app.kubernetes.io/instance': 'grpc-web'}}}",631
grpc-web,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/grpc-web-preview', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'grpc-web-preview', 'labels': {'app.kubernetes.io/name': 'grpc-web', 'helm.sh/chart': 'grpc-web-0.13.1', 'app.kubernetes.io/instance': 'grpc-web', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'type': 'ClusterIP', 'ipFamilyPolicy': 'PreferDualStack', 'ipFamilies': ['IPv4'], 'ports': [{'name': 'http', 'port': 7070, 'targetPort': 'http', 'protocol': 'TCP', 'appProtocol': None}], 'selector': {'app.kubernetes.io/name': 'grpc-web', 'app.kubernetes.io/instance': 'grpc-web'}}}",639
grpc-web,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/grpc-web', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'grpc-web', 'labels': {'app.kubernetes.io/name': 'grpc-web', 'helm.sh/chart': 'grpc-web-0.13.1', 'app.kubernetes.io/instance': 'grpc-web', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {'cert-manager.io/cluster-issuer': 'cert-manager-production', 'nginx.ingress.kubernetes.io/enable-opentelemetry': 'true', 'nginx.ingress.kubernetes.io/enable-owasp-core-rules': 'true'}}, 'spec': {'ingressClassName': 'nginx', 'rules': [{'http': {'paths': [{'path': '/grpc(/|$)(.*)', 'pathType': 'Prefix', 'backend': {'service': {'name': 'shortlink-api-grpc-web', 'port': {'number': 7070}}}}]}, 'host': 'shortlink.best'}]}}",794
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/akto-keel', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'akto-keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}}",275
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/akto-dashboard', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'akto-dashboard', 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'service.beta.kubernetes.io/aws-load-balancer-type': 'nlb'}}, 'spec': {'type': 'LoadBalancer', 'selector': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}, 'ports': [{'port': 8080, 'targetPort': 8080}]}}",465
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/akto-keel', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'LoadBalancer', 'selector': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}, 'ports': [{'name': 'keel', 'port': 9300, 'protocol': 'TCP', 'targetPort': 9300}]}}",428
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/akto-runtime', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'akto-runtime', 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'selector': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}, 'ports': [{'port': 9092, 'targetPort': 9092}]}}",381
akto,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/akto-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/akto-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/akto-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/akto-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/akto-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/akto-dashboard', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/akto-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/akto-testing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/akto-testing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/akto-testing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/akto-testing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/akto-testing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/akto-testing', 'spec/template/spec/containers/1']","{'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}",266
akto,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/akto-testing', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/akto-runtime', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/akto-runtime', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/akto-runtime', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/akto-runtime', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/akto-runtime', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/akto-runtime', 'spec/template/spec/containers/2']","{'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}",1633
akto,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/akto-runtime', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/akto-keel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/akto-keel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/akto-keel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/akto-keel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/akto-keel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/akto-keel', 'spec/template/spec/containers/0']","{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}",1131
akto,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/akto-keel', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/akto-dashboard', 'resource_type']",{},12668
akto,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/akto-testing', 'resource_type']",{},12668
akto,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/akto-runtime', 'resource_type']",{},12668
akto,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/akto-keel', 'resource_type']",{},12668
ed-traefik,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['DaemonSet/default/ingress-traefik', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['DaemonSet/default/ingress-traefik', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['DaemonSet/default/ingress-traefik', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['DaemonSet/default/ingress-traefik', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,checkov,CKV_K8S_26,check_29,N/A,Do not specify hostPort unless absolutely necessary,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0/ports/0']","{'name': 'http', 'containerPort': 80, 'hostPort': 80}",53
ed-traefik,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['DaemonSet/default/ingress-traefik', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_25,check_34,Pod Security Policy,Minimize the admission of containers with added capability,"['DaemonSet/default/ingress-traefik', 'spec/template/spec/containers/0']","{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}",489
ed-traefik,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['DaemonSet/default/ingress-traefik', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/ingress-traefik', 'resource_type']",{},1695
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/umsapp-mysql', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'automountServiceAccountToken': True, 'secrets': [{'name': 'umsapp-mysql'}]}",366
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/umsapp', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",277
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/umsapp-mysql', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'data': {'mysql-root-password': 'ZGJwYXNzd29yZDEx', 'mysql-password': 'eUtnVkdSRkprYQ=='}}",369
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/umsapp-mysql', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'data': {'my.cnf': '[mysqld]\ndefault_authentication_plugin=mysql_native_password\nskip-name-resolve\nexplicit_defaults_for_timestamp\nbasedir=/opt/bitnami/mysql\nplugin_dir=/opt/bitnami/mysql/lib/plugin\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndatadir=/bitnami/mysql/data\ntmpdir=/opt/bitnami/mysql/tmp\nmax_allowed_packet=16M\nbind-address=*\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid\nlog-error=/opt/bitnami/mysql/logs/mysqld.log\ncharacter-set-server=UTF8\ncollation-server=utf8_general_ci\nslow_query_log=0\nlong_query_time=10.0\n\n[client]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndefault-character-set=UTF8\nplugin_dir=/opt/bitnami/mysql/lib/plugin\n\n[manager]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid'}}",1101
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/umsapp-mysql-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'umsapp-mysql-headless', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'publishNotReadyAddresses': True, 'ports': [{'name': 'mysql', 'port': 3306, 'targetPort': 'mysql'}], 'selector': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}}",596
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/umsapp-mysql', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'type': 'ClusterIP', 'sessionAffinity': 'None', 'ports': [{'name': 'mysql', 'port': 3306, 'protocol': 'TCP', 'targetPort': 'mysql', 'nodePort': None}], 'selector': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}}",617
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/umsapp', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'NodePort', 'ports': [{'port': 8080, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http', 'nodePort': 31231}], 'selector': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}}",493
umsapp,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/umsapp', 'spec/template/spec/initContainers/0']","{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}",247
umsapp,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/umsapp', 'spec/template/spec/initContainers/0']","{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}",247
umsapp,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/umsapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/umsapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/umsapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/umsapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/umsapp', 'spec/template/spec/initContainers/0']","{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}",247
umsapp,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/umsapp', 'spec/template/spec/containers/0']","{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}",464
umsapp,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/umsapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0/env/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/umsapp-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/umsapp-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/umsapp-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/umsapp-mysql', 'spec/template/spec/containers/0']","{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}",1790
umsapp,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/umsapp-mysql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/umsapp-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/umsapp-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/umsapp-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/umsapp-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/umsapp-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/umsapp-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}",82
umsapp,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/umsapp-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/umsapp', 'resource_type']",{},9157
umsapp,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/umsapp-mysql', 'resource_type']",{},9157
umsapp,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/umsapp-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/zipkin-collector', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}}",332
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/zipkin-dependencies', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'zipkin-dependencies', 'labels': {'app.kubernetes.io/component': 'dependencies', 'app.kubernetes.io/version': '2.4.1', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}}",337
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/zipkin-ui', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}}",318
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/zipkin-ui', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'zipkin.conf.template': 'user  nginx nginx;\nworker_processes  2;\n\nerror_log  /dev/stderr warn;\npid        /var/run/nginx.pid;\n\ndaemon off;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  \'$remote_addr - $remote_user [$time_local] ""$request"" \'\n                    \'$status $body_bytes_sent ""$http_referer"" \'\n                    \'""$http_user_agent"" ""$http_x_forwarded_for""\';\n\n    access_log  /dev/stdout  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n    gzip_types    application/javascript application/json text/css;\n\n    server_tokens off;\n\n    types {\n        application/font-woff2  woff2;\n    }\n\n    server {\n        listen 8080;\n\n        root /var/www/html;\n\n        index index.html;\n\n        # Make site accessible from http://set-ip-address.xip.io\n        server_name localhost;\n\n        charset utf-8;\n\n        # redirect root as UI is hosted under /zipkin\n        location / {\n        return 302 /zipkin/;\n        }\n\n        # the entrypoint of the app will expire every day.\n        # this includes links to js assets with random names.\n        location /zipkin/index.html {\n            expires 1d;\n        }\n\n        location /zipkin {\n        try_files $uri /zipkin/index.html = 404;\n        }\n\n        # accept UI config from the server\n        location /zipkin/config.json {\n            expires 10m;\n            proxy_pass ${ZIPKIN_BASE_URL};\n        }\n\n        # the UI looks for the api under the same relative path\n        location /zipkin/api {\n            expires off;\n            proxy_pass ${ZIPKIN_BASE_URL};\n        }\n\n        # due to minification, the js assets will change names.\n        # this makes them safe to cache longer\n        location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ {\n            expires 1y;\n            add_header Cache-Control ""public"";\n        }\n\n        location = /favicon.ico { log_not_found off; access_log off; }\n        location = /robots.txt  { access_log off; log_not_found off; }\n\n        # Deny .htaccess file access\n        location ~ /\\.ht {\n            deny all;\n        }\n\n    }\n}\n'}}",2628
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/zipkin-collector', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 9411, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}}",574
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/zipkin-ui', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}}",553
zipkin,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/zipkin-collector', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/zipkin-collector', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/zipkin-collector', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/zipkin-collector', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/zipkin-collector', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/zipkin-collector', 'spec/template/spec/containers/0']","{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",361
zipkin,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/zipkin-collector', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/zipkin-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/zipkin-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/zipkin-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/zipkin-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/zipkin-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/zipkin-ui', 'spec/template/spec/containers/0']","{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",514
zipkin,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/zipkin-ui', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/zipkin-collector', 'resource_type']",{},7129
zipkin,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/zipkin-ui', 'resource_type']",{},7129
ndb-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/ndb-operator-webhook-sa', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'ndb-operator-webhook-sa', 'namespace': 'default'}}",119
ndb-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/ndb-operator-app-sa', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'ndb-operator-app-sa', 'namespace': 'default'}}",115
ndb-operator,checkov,CKV_K8S_155,check_54,RBAC and Service Accounts,Minimize ClusterRoles that grant control over validating or mutating admission webhook configurations,"['ClusterRole/default/default-ndb-operator-webhook-cr', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'ClusterRole', 'metadata': {'name': 'default-ndb-operator-webhook-cr'}, 'rules': [{'apiGroups': ['admissionregistration.k8s.io'], 'resources': ['validatingwebhookconfigurations', 'mutatingwebhookconfigurations'], 'verbs': ['list', 'patch']}]}",297
ndb-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/ndb-operator-webhook-service', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'ndb-operator-webhook-service', 'namespace': 'default'}, 'spec': {'ports': [{'port': 9443}], 'selector': {'app': 'ndb-operator-webhook-server'}}}",206
ndb-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/ndb-operator-svc', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'ndb-operator-svc', 'namespace': 'default'}, 'spec': {'selector': {'app': 'ndb-operator'}, 'clusterIP': 'None'}}",173
ndb-operator,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/ndb-operator-webhook-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/ndb-operator-webhook-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/ndb-operator-webhook-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/ndb-operator-webhook-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/ndb-operator-webhook-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/ndb-operator-webhook-server', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}",359
ndb-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/ndb-operator-webhook-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/ndb-operator-app', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/ndb-operator-app', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/ndb-operator-app', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/ndb-operator-app', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/ndb-operator-app', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/ndb-operator-app', 'spec/template/spec/containers/0']","{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}",440
ndb-operator,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/ndb-operator-app', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/ndb-operator-webhook-server', 'resource_type']",{},6426
ndb-operator,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/ndb-operator-app', 'resource_type']",{},6426
ndb-operator,checkov,CKV2_K8S_5,check_59,RBAC and Service Accounts,No ServiceAccount/Node should be able to read all secrets,"['ClusterRoleBinding/default/ndb-operator-webhook-crb', '']","{'kind': 'ClusterRoleBinding', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'ndb-operator-webhook-crb', 'namespace': 'default'}, 'roleRef': {'apiGroup': 'rbac.authorization.k8s.io', 'kind': 'ClusterRole', 'name': 'ndb-operator-webhook-cr'}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'ndb-operator-webhook-sa', 'namespace': 'default'}]}",363
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/scaleway-csi', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'scaleway-csi', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}}",302
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/scaleway-csi-secret', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'scaleway-csi-secret', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'stringData': {'SCW_ACCESS_KEY': 'ABCDEFGHIJKLMNOPQRST', 'SCW_DEFAULT_PROJECT_ID': '11111111-1111-1111-1111-111111111111', 'SCW_DEFAULT_ZONE': 'fr-par-1', 'SCW_SECRET_KEY': '11111111-1111-1111-1111-111111111111'}}",533
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/scaleway-csi-webhook', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'scaleway-csi-webhook', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'kubernetes.io/tls', 'data': {'tls.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaekNDQWsrZ0F3SUJBZ0lSQUxDbHQ0UGVkV015WlVDU1AwWlpwemt3RFFZSktvWklodmNOQVFFTEJRQXcKSWpFZ01CNEdBMVVFQXhNWGMyTmhiR1YzWVhrdFkzTnBMWGRsWW1odmIyc3RZMkV3SGhjTk1qVXdNekk1TVRZeApOVEEzV2hjTk1qWXdNekk1TVRZeE5UQTNXakFmTVIwd0d3WURWUVFERXhSelkyRnNaWGRoZVMxamMya3RkMlZpCmFHOXZhekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFQbHBjL3RNS0VsWDdWR0MKTzJNOCtwQW92YzVDTWxYNzRSRFRjYzVyUHJORzlJVm5leTdlcUFoT0c1L2tMaXFwVU5QTWkrcmhyWkhuNEQzdgpMMysvUHlZNi9mSi9mNG1WZWN5Yk9xdDJLckQ2WjBtSHRtejRzKzI4NlVWcjQ1V0I2alFxV0I5cVdqKzZ1bmU2CmVpVXBWNWRZVjFvdGw4b1o1QUhWSnBadXVlWFluZlJON0U3NGJXckkvNklCR016UXhsbnhGejI0NEpEem5PcisKbFZ1NEhMM3d0RHRCajFDTElKemk3TWRBUmVxcjFoRzBYaGRvczNwclBBYWswQXR6clNzUG8yUS9Bd2IyNXhGSQpFOG95L1BEUklVWCtxTmdCUHJDeUJ0VHR4SUhTU1BKeG5WRHk4ZEFwM3h5NWQwK1JiZ3I4cExUZFZOUnczcEtQCmQwZUhLU2tDQXdFQUFhT0JtakNCbHpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUIKQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVViQlI3SGRIUQpNVlU0ejIxS0FzV3dDRzNsTTJVd053WURWUjBSQkRBd0xvSXNjMk5oYkdWM1lYa3RZM05wTFhOdVlYQnphRzkwCkxYWmhiR2xrWVhScGIyNHVaR1ZtWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUprT29BUW0Ka3dMdWwwOEtkRWQwK3VNZ1FER0hHOTNXU0J6VHIvRTFZazdaclB1OThRbHMwSzYxYjM5OXEveWtqNnpjdnFiZAplcEpEaFNIV2xXd1IreFR1Y1grNDlKQ1M2L3JjN3pMbmxqTmlFRjI1Z0JHNmI2WjMxT2ZpdjF2eG50cXoyeW03CnFFSTBaM1NpTStjWU1SZ2xTVWFxdzNBQmV3bXQxWlVMNDUreVdHdVB1M2NJSDBhSW1nZjZsMmlSTkF0OVVSMkUKYVJnN1pzaVk1N1ZPWmQ4b3E0c2N0STNCUWxwbUREVWJzVHozNWVsSTFVZytnYzg4b3hkbmhib3ZneTdmNmkrTwo1NlJuQVdha0VyeVFZSUFaMllONUppU2N6WVNxU3U0c2doanFIckIrWC9qVFRpZVVXZzc0THpFUUFlMWtvRU42ClFBTDA0bTdwd2MwV1I2VT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=', 'tls.key': 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBK1dseiswd29TVmZ0VVlJN1l6ejZrQ2k5emtJeVZmdmhFTk54em1zK3MwYjBoV2Q3Ckx0Nm9DRTRibitRdUtxbFEwOHlMNnVHdGtlZmdQZTh2Zjc4L0pqcjk4bjkvaVpWNXpKczZxM1lxc1BwblNZZTIKYlBpejdienBSV3ZqbFlIcU5DcFlIMnBhUDdxNmQ3cDZKU2xYbDFoWFdpMlh5aG5rQWRVbWxtNjU1ZGlkOUUzcwpUdmh0YXNqL29nRVl6TkRHV2ZFWFBiamdrUE9jNnY2Vlc3Z2N2ZkMwTzBHUFVJc2duT0xzeDBCRjZxdldFYlJlCkYyaXplbXM4QnFUUUMzT3RLdytqWkQ4REJ2Ym5FVWdUeWpMODhORWhSZjZvMkFFK3NMSUcxTzNFZ2RKSThuR2QKVVBMeDBDbmZITGwzVDVGdUN2eWt0TjFVMUhEZWtvOTNSNGNwS1FJREFRQUJBb0lCQVFEYjZnbWtHT0NrMnV5YwpKQkt0VEFVNnUxR3czbGwzeTJJRjdncTVFWUwxbktqYVFBWXpxNHZKMXVVd3RJZW9naWFNdWh6Yy9DU0pORVZiCkZ0MXc3SGFJQlJnSmpEWXVZQ2hIS3RBdWcwRGRUODFtM2swU0JMRFIvUEpLamZqYnlQTnpENnNuK0NTZmNNd2QKNmNUdG8yaGlRRGkxZ09JSUI1QXR0WDRTd29zVGg1RUtMbDNRUHJjVUxLWGh1NklsMVJGbmRhRGRkQWI0WXFsTApFcmMwV016SzFDRk1jSnpNQlhHRStJTEQraUZLbWhBL3pCbGw4dSsxTGZzM1pWTHJvTmhpcnhwb21Zc2JQckZ1CldSV0swQlhDcVIwN3NWUzVyVTEzMXF6MDRMaHFyclNzeTZJL3lScmxBSHZHOVFnSThkS1FaRHIzSGRIR1R5R2MKN1BVS1V2a0pBb0dCQVBsd1dveWE0bTZTVWgvNXNrUWdpejFzak01WS9nL0IvUHcyS2xhQmZXK3lXMlpIakE2YwpFN0MvblFPYTlTYkV5elVmQUZMTG56Qi8xNmlXamh2U1ZZNTI3Tlp0Ry9MSkFSODhndnpQalpmRk8yamR6akdjCkRGMVgwZ21jMUN3eS9tWmZlZXJVbnRBWWRrck83dTlDK3MxMVM3S1h0ek0rajUvWWNUaCtocDgvQW9HQkFQLzQKNnZjb2lNRzl1KzR2eGwyRGNDVzNhUXpWYnRZL01IWFFuNjBmYlk0MFNzZTNYSzZOMS9IMVBYRUxFRDFRWDh2bgpQdE9DOHlPRWhnU1lYN3prb3MxeXVRZmFJektaUkNFSUk3V0xCcVNmejJJczJYdUpMSHQzZGNKK3hWOU50TkNkCjFETEViN3A4YTR6NFZJYWZiaTZxelQxT0dUZkRIYzRzdHVZdFBRV1hBb0dBQWxKYlpXZWpwK2ZRdjk5eEcxVTYKTm80bUdWMldyOHJjY2ZTSEhGc0VNZC8xSGRTWXB5SW94TUpqMGI3RmZXRGppMUVJamJ5N2RKWWNDY09zK3ZGUQpQbzA0MHg0YzNudWtlUWYxS0NrK1ppVTkwbElPTTBRQ2tYUFp6cUVaRUhoQkNlN2xrWnY5Qm03VDJ3cG1DdkFTCnFZcm44M2VhQ3U0UUpDcTlrd3NLY2IwQ2dZRUEyUDhtQWQwbEFrbGNkZkdlVWt4STJGQ0NCOVV3SHdSMmlvb1AKczIzL0xCeDhnSTZiVFljRjJDSzBzWTVWZUFVWkVQeTZzQWhGSW9rSUxBRVl1RU9ER0hQM0ZBY0M2N1F1bzJvSgpDN0FPTTZVZTQvVnRjV0s2aVBpZXBnRmVSUXJWREQyZ1ZHRmU3bExud2h3TFhBendGVFBLeGZ2ZE9QNTUxL3prCkdJR2xSNFVDZ1lFQXNwYUtldXhMMFl4aW1FT3dta1ozSXhTRFdKUUptN1FsTzMwZVBlclJ6Q29wWFREeldsaEcKR2d4Vys4Tm1HWDIxUWtVQ3R5RURzSlIrdVpucXBSUjNSay9uMmRrY21tVVM5UXhIRXo1TFVrNmpBVWx5LzMxaApYOVZpS0orOEFneVZCdHBSWFEwS3NsT2tjUVk4TnZpRmV4aEpsL01qV0x1eDdmbDlra25zakp3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=', 'ca.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNRENDQWhpZ0F3SUJBZ0lSQUxtazJNTzFvRWlDTnp3clRyczJLekl3RFFZSktvWklodmNOQVFFTEJRQXcKSWpFZ01CNEdBMVVFQXhNWGMyTmhiR1YzWVhrdFkzTnBMWGRsWW1odmIyc3RZMkV3SGhjTk1qVXdNekk1TVRZeApOVEEzV2hjTk1qWXdNekk1TVRZeE5UQTNXakFpTVNBd0hnWURWUVFERXhkelkyRnNaWGRoZVMxamMya3RkMlZpCmFHOXZheTFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzJOdFRoZ2ZoamoKU3VwWFhEcFRyV1hwNS9yaG0zUzZpRVl5YW9rdHJ6NUw1cHNDR3pyRjIxZCsyVEhwbENmbnRtdEpzL3lyRUVIbwpEWUNNR2VpTDhacWZKcUpGc3pjNXErbS9XaE1mTHkwZWRIUEpuMlV0NWRjR2xzMXhhQk00L0dzS0ZzK0FUL2dyCkI5UGxZWnZ2Nk56Y2ZNRGNJaCtYU1dsR0ZHcmVlU3lGRE9BbytCa2MrL09MTHI4NnkwYnZEbjV1eTFOUUpQaWgKMGhzb2lFb1NnSEVjQ1Y5REVuSXZTek9rNm1OcjRGWGcrb2JKTlhtbTlPZ3BYZk84eVdmZWxKbFNMcUMvdFVZNQo4YXNLTEVySHFzOHhqanJpbUNpNUlydEdtT2R4QUMycXkzUFpFRS85ZEpJZjhTb0kzR1MrSFZTMTBXYzZiMlVoCjlQbWJSMysvTExrQ0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0cKQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlJzRkhzZAowZEF4VlRqUGJVb0N4YkFJYmVVelpUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFqSklaWnBQblEycHZFYWNqCm82OXIxeWZxeGlIRmlCcnp5QmVEc2RUdUk3NHUrY0V3MGJVZ1JlRnhJVDEySnRaWEV0U09EdUgzN210Nm1WY3EKM2ZXTHo2N1J4azJSaDBQQkVtUUd6K0lIU0tjSkl6a3d4Q2ZnQ29TaVZESmdvVDA5amdzNEx3VzRKUzFRN0JlMgowM1FzVkR4OTJRMGRBaHVUUGpGM2xVNkFRVDVxMTZpbHFra3ppVU9TSkFVbmVSMldSSXZkUUJmOHVZZTZQYmRXCngrSENvaWVlNGNFSjRTOTFCbUhrZ21vdmxoZCt1SXNjMEJBWlVoTk1TdGpFQXdYdTVObU9HQ0ZDMloySURYYVYKUUJGQUxGdXpXUnFSRTRMUHRhaERRWTU4VVhuODVTYlZJYWh6UmNDYW5XR04zdmZsc1d0MUxJa2s4bEdsMkpRSwpzTTZnN0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=='}}",5841
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/scaleway-csi-attacher', '']","{'kind': 'Role', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-attacher', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': ['coordination.k8s.io'], 'resources': ['leases'], 'verbs': ['get', 'watch', 'list', 'delete', 'update', 'create']}]}",468
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/scaleway-csi-provisioner', '']","{'kind': 'Role', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-provisioner', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': ['coordination.k8s.io'], 'resources': ['leases'], 'verbs': ['get', 'watch', 'list', 'delete', 'update', 'create']}, {'apiGroups': ['storage.k8s.io'], 'resources': ['csistoragecapacities'], 'verbs': ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']}, {'apiGroups': [''], 'resources': ['pods'], 'verbs': ['get']}, {'apiGroups': ['apps'], 'resources': ['replicasets'], 'verbs': ['get']}]}",754
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/scaleway-csi-resizer', '']","{'kind': 'Role', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-resizer', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': ['coordination.k8s.io'], 'resources': ['leases'], 'verbs': ['get', 'watch', 'list', 'delete', 'update', 'create']}]}",467
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/scaleway-csi-snapshot-controller', '']","{'kind': 'Role', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-snapshot-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': ['coordination.k8s.io'], 'resources': ['leases'], 'verbs': ['get', 'watch', 'list', 'delete', 'update', 'create']}]}",479
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/scaleway-csi-snapshotter', '']","{'kind': 'Role', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-snapshotter', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': ['coordination.k8s.io'], 'resources': ['leases'], 'verbs': ['get', 'watch', 'list', 'delete', 'update', 'create']}]}",471
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/scaleway-csi-attacher', '']","{'kind': 'RoleBinding', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-attacher', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'scaleway-csi', 'namespace': 'default'}], 'roleRef': {'kind': 'Role', 'name': 'scaleway-csi-attacher', 'apiGroup': 'rbac.authorization.k8s.io'}}",527
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/scaleway-csi-provisioner', '']","{'kind': 'RoleBinding', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-provisioner', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'scaleway-csi'}], 'roleRef': {'kind': 'Role', 'name': 'scaleway-csi-provisioner', 'apiGroup': 'rbac.authorization.k8s.io'}}",509
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/scaleway-csi-resizer', '']","{'kind': 'RoleBinding', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-resizer', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'scaleway-csi'}], 'roleRef': {'kind': 'Role', 'name': 'scaleway-csi-resizer', 'apiGroup': 'rbac.authorization.k8s.io'}}",501
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/scaleway-csi-snapshot-controller', '']","{'kind': 'RoleBinding', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-snapshot-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'scaleway-csi'}], 'roleRef': {'kind': 'Role', 'name': 'scaleway-csi-snapshot-controller', 'apiGroup': 'rbac.authorization.k8s.io'}}",525
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/scaleway-csi-snapshotter', '']","{'kind': 'RoleBinding', 'apiVersion': 'rbac.authorization.k8s.io/v1', 'metadata': {'name': 'scaleway-csi-snapshotter', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'scaleway-csi'}], 'roleRef': {'kind': 'Role', 'name': 'scaleway-csi-snapshotter', 'apiGroup': 'rbac.authorization.k8s.io'}}",509
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/scaleway-csi-snapshot-validation', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'scaleway-csi-snapshot-validation', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}, 'ports': [{'protocol': 'TCP', 'port': 443, 'targetPort': 443}]}}",525
scaleway-csi,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['DaemonSet/default/scaleway-csi-node', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['DaemonSet/default/scaleway-csi-node', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['DaemonSet/default/scaleway-csi-node', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['DaemonSet/default/scaleway-csi-node', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_16,check_21,Pod Security Policy,Container should not be privileged,"['DaemonSet/default/scaleway-csi-node', 'spec/template/spec/containers/2']","{'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}",305
scaleway-csi,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['DaemonSet/default/scaleway-csi-node', '']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/0/envFrom/7']",[{'secretRef': {'name': 'scaleway-csi-secret'}}],48
scaleway-csi,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/scaleway-csi-controller', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/scaleway-csi-controller', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/scaleway-csi-controller', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/scaleway-csi-controller', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/scaleway-csi-controller', 'spec/template/spec/containers/7']","{'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}",480
scaleway-csi,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/scaleway-csi-controller', '']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/scaleway-csi-node', 'resource_type']",{},37109
scaleway-csi,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/scaleway-csi-controller', 'resource_type']",{},37109
pgbench,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Job/default/pgbench', 'spec/template/spec/containers/0/env/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Job/default/pgbench', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Job/default/pgbench', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Job/default/pgbench', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Job/default/pgbench', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Job/default/pgbench', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Job/default/pgbench', 'spec/template/spec/containers/0']","{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}",398
pgbench,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Job/default/pgbench', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
blueprint,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/blueprint', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}}",492
blueprint,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/blueprint', 'spec/template/spec/containers/0']","{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}",841
blueprint,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/blueprint', 'spec/template/spec/containers/0']","{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}",841
blueprint,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/blueprint', 'spec/template/spec/containers/0']","{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}",841
blueprint,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/blueprint', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/blueprint', 'spec/template/spec/containers/0']","{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}",841
blueprint,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/blueprint', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/blueprint', 'spec/template/spec/containers/0']","{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}",841
blueprint,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/blueprint', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/blueprint', 'spec/template/spec/containers/0']","{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}",841
blueprint,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/blueprint', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/blueprint', 'spec/template/spec/containers/0']","{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}",841
blueprint,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/blueprint', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/blueprint-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/blueprint-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/blueprint-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/blueprint-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/blueprint-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/blueprint-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}",83
blueprint,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/blueprint-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/blueprint', 'resource_type']",{},2624
blueprint,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/blueprint-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
deploy-elibrary,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/deploy-elibrary-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/deploy-elibrary-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/deploy-elibrary-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/deploy-elibrary-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/deploy-elibrary-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/deploy-elibrary-deployment', 'spec/template/spec/containers/0']","{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}",125
deploy-elibrary,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/deploy-elibrary-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/deploy-elibrary-deployment', 'resource_type']",{},454
ed-deployment,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/ed-deployment-env', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'ed-deployment-env', 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'data': {'RELEASE_NAME': 'ZWQtZGVwbG95bWVudA=='}}",331
ed-deployment,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0/envFrom/0']",{'secretRef': {'name': 'ed-deployment-env'}},44
ed-deployment,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/ed-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/ed-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/ed-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/ed-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/ed-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/ed-deployment', 'spec/template/spec/containers/0']","{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}",143
ed-deployment,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/ed-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/ed-deployment', 'resource_type']",{},1150
bipeenhelm-chart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/fleetman-webapp', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'fleetman-webapp'}, 'spec': {'selector': {'app': 'webapp'}, 'ports': [{'name': 'http', 'port': 80, 'nodePort': 30080}], 'type': 'NodePort'}}",201
bipeenhelm-chart,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/webapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/webapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/webapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/webapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/webapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/webapp', 'spec/template/spec/containers/0']","{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}",72
bipeenhelm-chart,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/webapp', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/webapp', 'resource_type']",{},510
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/sorry-cypress-mongodb', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm'}}, 'secrets': [{'name': 'sorry-cypress-mongodb'}]}",337
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/sorry-cypress-mongodb-scripts', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'sorry-cypress-mongodb-scripts', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'data': {'setup.sh': '#!/bin/bash\n\n. /opt/bitnami/scripts/mongodb-env.sh\n\necho ""Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME""\n\nif [[ ""$MY_POD_NAME"" = ""sorry-cypress-mongodb-0"" ]]; then\n    echo ""Pod name matches initial primary pod name, configuring node as a primary""\n    export MONGODB_REPLICA_SET_MODE=""primary""\nelse\n    echo ""Pod name doesn\'t match initial primary pod name, configuring node as a secondary""\n    export MONGODB_REPLICA_SET_MODE=""secondary""\n    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=""$MONGODB_ROOT_PASSWORD""\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=""$MONGODB_PORT_NUMBER""\n    export MONGODB_ROOT_PASSWORD="""" MONGODB_USERNAME="""" MONGODB_DATABASE="""" MONGODB_PASSWORD=""""\n    export MONGODB_ROOT_PASSWORD_FILE="""" MONGODB_USERNAME_FILE="""" MONGODB_DATABASE_FILE="""" MONGODB_PASSWORD_FILE=""""\nfi\n\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh', 'setup-hidden.sh': '#!/bin/bash\n\n. /opt/bitnami/scripts/mongodb-env.sh\necho ""Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME""\necho ""Configuring node as a hidden node""\nexport MONGODB_REPLICA_SET_MODE=""hidden""\nexport MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=""$MONGODB_ROOT_PASSWORD""\nexport MONGODB_INITIAL_PRIMARY_PORT_NUMBER=""$MONGODB_PORT_NUMBER""\nexport MONGODB_ROOT_PASSWORD="""" MONGODB_USERNAME="""" MONGODB_DATABASE="""" MONGODB_PASSWORD=""""\nexport MONGODB_ROOT_PASSWORD_FILE="""" MONGODB_USERNAME_FILE="""" MONGODB_DATABASE_FILE="""" MONGODB_PASSWORD_FILE=""""\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh'}}",1911
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sorry-cypress-mongodb-arbiter-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter-headless', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'ports': [{'name': 'tcp-mongodb', 'port': 27017, 'targetPort': 'mongodb'}], 'selector': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}}",609
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sorry-cypress-mongodb-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sorry-cypress-mongodb-headless', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'publishNotReadyAddresses': True, 'ports': [{'name': 'mongodb', 'port': 27017, 'targetPort': 'mongodb'}], 'selector': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}}",631
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sorry-cypress-mongodb-0', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sorry-cypress-mongodb-0', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'name': 'mongodb', 'port': 27017, 'targetPort': 'mongodb'}], 'selector': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb', 'statefulset.kubernetes.io/pod-name': 'sorry-cypress-mongodb-0'}}}",634
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sorry-cypress-mongodb-1', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sorry-cypress-mongodb-1', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'name': 'mongodb', 'port': 27017, 'targetPort': 'mongodb'}], 'selector': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb', 'statefulset.kubernetes.io/pod-name': 'sorry-cypress-mongodb-1'}}}",634
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sorry-cypress-api', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sorry-cypress-api'}, 'spec': {'ports': [{'name': '4000', 'port': 4000, 'targetPort': 4000}], 'selector': {'app': 'sorry-cypress-api'}, 'type': 'ClusterIP'}}",218
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sorry-cypress-dashboard', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sorry-cypress-dashboard'}, 'spec': {'ports': [{'name': '8080', 'port': 8080, 'targetPort': 8080}], 'selector': {'app': 'sorry-cypress-dashboard'}, 'type': 'ClusterIP'}}",230
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/sorry-cypress-director', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'ports': [{'name': '1234', 'port': 1234, 'targetPort': 1234}], 'selector': {'app': 'sorry-cypress-director'}, 'type': 'ClusterIP'}}",228
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/sorry-cypress-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/sorry-cypress-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/sorry-cypress-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/sorry-cypress-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/sorry-cypress-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/sorry-cypress-api', 'spec/template/spec/containers/0']","{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",594
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/sorry-cypress-api', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/sorry-cypress-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/sorry-cypress-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/sorry-cypress-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/sorry-cypress-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/sorry-cypress-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/sorry-cypress-dashboard', 'spec/template/spec/containers/0']","{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}",428
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/sorry-cypress-dashboard', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/sorry-cypress-director', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/sorry-cypress-director', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/sorry-cypress-director', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/sorry-cypress-director', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/sorry-cypress-director', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/sorry-cypress-director', 'spec/template/spec/containers/0']","{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}",752
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/sorry-cypress-director', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', 'spec/template/spec/containers/0']","{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}",1344
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/sorry-cypress-mongodb-arbiter', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/sorry-cypress-mongodb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/sorry-cypress-mongodb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/sorry-cypress-mongodb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/sorry-cypress-mongodb', 'spec/template/spec/containers/0']","{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}",2515
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/sorry-cypress-mongodb', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/sorry-cypress-api', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'ingressClassName': 'nginx', 'rules': [{'host': 'api.chart-example.local', 'http': {'paths': [{'path': '/', 'pathType': 'Prefix', 'backend': {'service': {'name': 'sorry-cypress-api', 'port': {'number': 4000}}}}]}}]}}",548
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/sorry-cypress-dashboard', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'ingressClassName': 'nginx', 'rules': [{'host': 'dashboard.chart-example.local', 'http': {'paths': [{'path': '/', 'pathType': 'Prefix', 'backend': {'service': {'name': 'sorry-cypress-dashboard', 'port': {'number': 8080}}}}]}}]}}",566
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/sorry-cypress-director', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'sorry-cypress-director', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'ingressClassName': 'nginx', 'rules': [{'host': 'director.chart-example.local', 'http': {'paths': [{'path': '/', 'pathType': 'Prefix', 'backend': {'service': {'name': 'sorry-cypress-director', 'port': {'number': 1234}}}}]}}]}}",563
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/sorry-cypress-test-dashboard-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/sorry-cypress-test-dashboard-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/sorry-cypress-test-dashboard-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/sorry-cypress-test-dashboard-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/sorry-cypress-test-dashboard-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/sorry-cypress-test-dashboard-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}",99
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/sorry-cypress-test-dashboard-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/sorry-cypress-test-director-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/sorry-cypress-test-director-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/sorry-cypress-test-director-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/sorry-cypress-test-director-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/sorry-cypress-test-director-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/sorry-cypress-test-director-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}",98
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/sorry-cypress-test-director-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/sorry-cypress-test-mongodb-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/sorry-cypress-test-mongodb-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/sorry-cypress-test-mongodb-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/sorry-cypress-test-mongodb-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/sorry-cypress-test-mongodb-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/sorry-cypress-test-mongodb-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}",107
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/sorry-cypress-test-mongodb-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/sorry-cypress-test-api-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/sorry-cypress-test-api-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/sorry-cypress-test-api-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/sorry-cypress-test-api-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/sorry-cypress-test-api-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/sorry-cypress-test-api-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}",116
sorry-cypress,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/sorry-cypress-test-api-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-api', 'resource_type']",{},20226
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-dashboard', 'resource_type']",{},20226
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-director', 'resource_type']",{},20226
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-mongodb-arbiter', 'resource_type']",{},20226
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-mongodb', 'resource_type']",{},20226
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-test-dashboard-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-test-director-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-test-mongodb-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/sorry-cypress-test-api-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
test-helm-app2,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/test-service', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'test-service'}, 'spec': {'selector': {'app': 'test'}, 'ports': [{'protocol': 'TCP', 'port': 80, 'targetPort': 80}]}}",178
test-helm-app2,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/test-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/test-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/test-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/test-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/test-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/test-deployment', 'spec/template/spec/containers/0']","{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}",97
test-helm-app2,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/test-deployment', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/test-deployment', 'resource_type']",{},517
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/nexmonyx-backend', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'nexmonyx-backend', 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'automountServiceAccountToken': True}",212
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/mariadb-root-password-supertokens', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'mariadb-root-password-supertokens', 'labels': {'k8s.mariadb.com/watch': ''}, 'annotations': {'secret-generator.v1.mittwald.de/autogenerate': 'password'}}, 'data': {}}",227
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/mariadb-app-password-supertokens', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'mariadb-app-password-supertokens', 'labels': {'k8s.mariadb.com/watch': ''}, 'annotations': {'secret-generator.v1.mittwald.de/autogenerate': 'password'}}, 'data': {}}",226
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/maxscale-supertokens', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'maxscale-supertokens', 'labels': {'k8s.mariadb.com/watch': ''}, 'annotations': {'secret-generator.v1.mittwald.de/autogenerate': 'password'}}, 'data': {}}",214
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/mariadb-supertokens', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'mariadb-supertokens', 'labels': {'k8s.mariadb.com/watch': ''}}, 'data': {'my.cnf': '[mariadb]\nbind-address=*\ndefault_storage_engine=InnoDB\nbinlog_format=row\ninnodb_autoinc_lock_mode=2\ninnodb_buffer_pool_size=1024M\nmax_allowed_packet=256M\n'}}",312
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/backend', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'backend', 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}, 'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/port': '9000', 'prometheus.io/path': '/metrics'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'name': 'http', 'port': 8080, 'targetPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'port': 9000, 'targetPort': 9000, 'protocol': 'TCP'}], 'selector': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}}",546
nexmonyx-backend,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/backend', 'spec/template/spec/containers/0/env/10']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/port': '9000', 'prometheus.io/path': '/metrics'}, 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'imagePullSecrets': [], 'securityContext': {}, 'serviceAccountName': 'nexmonyx-backend', 'containers': [{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}], 'volumes': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': []}}}}",1970
nexmonyx-backend,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/port': '9000', 'prometheus.io/path': '/metrics'}, 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'imagePullSecrets': [], 'securityContext': {}, 'serviceAccountName': 'nexmonyx-backend', 'containers': [{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}], 'volumes': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': []}}}}",1970
nexmonyx-backend,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/port': '9000', 'prometheus.io/path': '/metrics'}, 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'imagePullSecrets': [], 'securityContext': {}, 'serviceAccountName': 'nexmonyx-backend', 'containers': [{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}], 'volumes': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': []}}}}",1970
nexmonyx-backend,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/port': '9000', 'prometheus.io/path': '/metrics'}, 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'imagePullSecrets': [], 'securityContext': {}, 'serviceAccountName': 'nexmonyx-backend', 'containers': [{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}], 'volumes': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': []}}}}",1970
nexmonyx-backend,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/backend', 'spec/template/spec/containers/0']","{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}",1260
nexmonyx-backend,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/backend', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'backend', 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/port': '9000', 'prometheus.io/path': '/metrics'}, 'labels': {'app': 'nexmonyx', 'component': 'backend', 'release': 'nexmonyx-backend'}}, 'spec': {'imagePullSecrets': [], 'securityContext': {}, 'serviceAccountName': 'nexmonyx-backend', 'containers': [{'name': 'backend', 'securityContext': {}, 'image': 'nexmonyx/backend:v84', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9000, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'http'}}, 'env': [{'name': 'DEBUG', 'value': 'false'}, {'name': 'METRICS_PORT', 'value': '9000'}, {'name': 'SERVER_PORT', 'value': '8080'}, {'name': 'S3_BUCKET', 'value': 'supporttools-upload'}, {'name': 'S3_REGION', 'value': 'us-east-1'}, {'name': 'S3_ENDPOINT', 'value': 'https://s3.wasabisys.com'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@support.tools'}, {'name': 'ADMIN_PASSWORD', 'value': 'password'}, {'name': 'SENDGRID_SENDER_EMAIL', 'value': '<EMAIL>'}, {'name': 'SENDGRID_SENDER_NAME', 'value': '<NAME>'}, {'name': 'S3_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3AccessKey'}}}, {'name': 'S3_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 's3-credentials', 'key': 's3SecretKey'}}}, {'name': 'SENDGRID_API_KEY', 'valueFrom': {'secretKeyRef': {'name': 'sendgrid-credentials', 'key': 'sendGridAPIKey'}}}], 'resources': {}, 'volumeMounts': []}], 'volumes': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': []}}}}",1970
nexmonyx-backend,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/nexmonyx-backend', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'nexmonyx-backend', 'labels': {'app': 'nexmonyx', 'team': 'nexmonyx-io'}, 'annotations': {'cert-manager.io/cluster-issuer': 'letsencrypt-dns01', 'cert-manager.io/cluster-issuer-duration': '8760h', 'cert-manager.io/cluster-issuer-email': 'mmattox@support.tools', 'cert-manager.io/issue-temporary-certificate': 'true', 'external-dns.alpha.kubernetes.io/hostname': 'dev-api.nexmonyx.com', 'external-dns.alpha.kubernetes.io/ttl': '120', 'external-dns.alpha.kubernetes.io/cloudflare-proxied': 'true'}}, 'spec': {'ingressClassName': 'nginx', 'rules': [{'host': 'dev-api.nexmonyx.com', 'http': {'paths': [{'path': '/', 'pathType': 'Prefix', 'backend': {'service': {'name': 'backend', 'port': {'number': 8080}}}}]}}], 'tls': [{'hosts': ['dev-api.nexmonyx.com'], 'secretName': 'cert-backend-tls'}]}}",869
nexmonyx-backend,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/backend', 'resource_type']",{},7475
test0,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/app1/apliakce1', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce1', 'namespace': 'app1', 'labels': {'app': 'apliakce1'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",606
test0,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/app1/apliakce1', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce1', 'namespace': 'app1', 'labels': {'app': 'apliakce1'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",606
test0,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/app1/apliakce1', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce1', 'namespace': 'app1', 'labels': {'app': 'apliakce1'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",606
test0,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/app1/apliakce1', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce1', 'namespace': 'app1', 'labels': {'app': 'apliakce1'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",606
test0,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/app1/apliakce1', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",267
test0,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/app1/apliakce1', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce1', 'namespace': 'app1', 'labels': {'app': 'apliakce1'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce1', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'devopsjourney1/mywebapp:latest', 'ports': [{'containerPort': 80}], 'envFrom': [{'configMapRef': {'name': 'myconfigmapv1.0'}}], 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",606
test0,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/app2/apliakce2', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce2', 'namespace': 'app2', 'labels': {'app': 'apliakce2'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",545
test0,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/app2/apliakce2', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce2', 'namespace': 'app2', 'labels': {'app': 'apliakce2'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",545
test0,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/app2/apliakce2', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce2', 'namespace': 'app2', 'labels': {'app': 'apliakce2'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",545
test0,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/app2/apliakce2', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce2', 'namespace': 'app2', 'labels': {'app': 'apliakce2'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",545
test0,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/app2/apliakce2', 'spec/template/spec/containers/0']","{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}",206
test0,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/app2/apliakce2', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'apliakce2', 'namespace': 'app2', 'labels': {'app': 'apliakce2'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'template': {'metadata': {'labels': {'app': 'apliakce2', 'tier': 'frontend'}}, 'spec': {'containers': [{'name': 'mycontainer', 'image': 'nginx:latest', 'ports': [{'containerPort': 80}], 'envFrom': None, 'resources': {'requests': {'memory': '16Mi', 'cpu': '50m'}, 'limits': {'memory': '128Mi', 'cpu': '100m'}}}]}}}}",545
jellyfin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/jellyfin', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'jellyfin', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'name': 'web', 'port': 8096, 'targetPort': 'web', 'nodePort': None}], 'selector': {'app.kubernetes.io/name': 'jellyfin', 'app.kubernetes.io/instance': 'jellyfin'}}}",446
jellyfin,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/jellyfin', 'spec/template/spec/containers/0']","{'name': 'jellyfin', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 64710, 'runAsNonRoot': True, 'runAsUser': 64710}, 'image': 'jellyfin/jellyfin:10.10.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'web', 'containerPort': 8096, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'readinessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'periodSeconds': 10, 'timeoutSeconds': 10}, 'resources': {'limits': {'cpu': '2', 'memory': '6Gi'}, 'requests': {'cpu': '500m', 'memory': '512Mi'}}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}, {'name': 'cache', 'mountPath': '/cache'}, {'name': 'tmpfs', 'mountPath': '/tmp'}]}",843
jellyfin,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/jellyfin', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'jellyfin', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'jellyfin', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'jellyfin', 'app.kubernetes.io/instance': 'jellyfin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'jellyfin', 'app.kubernetes.io/instance': 'jellyfin'}}, 'spec': {'securityContext': {'fsGroup': 64710, 'runAsGroup': 64710, 'runAsNonRoot': True, 'runAsUser': 64710, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'jellyfin', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 64710, 'runAsNonRoot': True, 'runAsUser': 64710}, 'image': 'jellyfin/jellyfin:10.10.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'web', 'containerPort': 8096, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'readinessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'periodSeconds': 10, 'timeoutSeconds': 10}, 'resources': {'limits': {'cpu': '2', 'memory': '6Gi'}, 'requests': {'cpu': '500m', 'memory': '512Mi'}}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}, {'name': 'cache', 'mountPath': '/cache'}, {'name': 'tmpfs', 'mountPath': '/tmp'}]}], 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'volumes': [{'name': 'config', 'persistentVolumeClaim': {'claimName': 'jellyfin-config'}}, {'name': 'cache', 'persistentVolumeClaim': {'claimName': 'jellyfin-cache'}}, {'name': 'transcodes', 'emptyDir': {}}, {'name': 'tmpfs', 'emptyDir': {'medium': 'Memory', 'sizeLimit': '10Mi'}}]}}}}",1881
jellyfin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/jellyfin', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'jellyfin', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'jellyfin', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'jellyfin', 'app.kubernetes.io/instance': 'jellyfin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'jellyfin', 'app.kubernetes.io/instance': 'jellyfin'}}, 'spec': {'securityContext': {'fsGroup': 64710, 'runAsGroup': 64710, 'runAsNonRoot': True, 'runAsUser': 64710, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'jellyfin', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 64710, 'runAsNonRoot': True, 'runAsUser': 64710}, 'image': 'jellyfin/jellyfin:10.10.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'web', 'containerPort': 8096, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'readinessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'periodSeconds': 10, 'timeoutSeconds': 10}, 'resources': {'limits': {'cpu': '2', 'memory': '6Gi'}, 'requests': {'cpu': '500m', 'memory': '512Mi'}}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}, {'name': 'cache', 'mountPath': '/cache'}, {'name': 'tmpfs', 'mountPath': '/tmp'}]}], 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'volumes': [{'name': 'config', 'persistentVolumeClaim': {'claimName': 'jellyfin-config'}}, {'name': 'cache', 'persistentVolumeClaim': {'claimName': 'jellyfin-cache'}}, {'name': 'transcodes', 'emptyDir': {}}, {'name': 'tmpfs', 'emptyDir': {'medium': 'Memory', 'sizeLimit': '10Mi'}}]}}}}",1881
jellyfin,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/jellyfin', 'spec/template/spec/containers/0']","{'name': 'jellyfin', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 64710, 'runAsNonRoot': True, 'runAsUser': 64710}, 'image': 'jellyfin/jellyfin:10.10.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'web', 'containerPort': 8096, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'readinessProbe': {'httpGet': {'port': 'web', 'path': '/health'}, 'periodSeconds': 10, 'timeoutSeconds': 10}, 'resources': {'limits': {'cpu': '2', 'memory': '6Gi'}, 'requests': {'cpu': '500m', 'memory': '512Mi'}}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}, {'name': 'cache', 'mountPath': '/cache'}, {'name': 'tmpfs', 'mountPath': '/tmp'}]}",843
jellyfin,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Pod/default/jellyfin-test-connection', 'spec/containers/0']","{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}",418
jellyfin,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/jellyfin-test-connection', 'spec/containers/0']","{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}",418
jellyfin,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/jellyfin-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'jellyfin-test-connection', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}], 'restartPolicy': 'Never', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}}}",854
jellyfin,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/jellyfin-test-connection', 'spec/containers/0']","{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}",418
jellyfin,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/jellyfin-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'jellyfin-test-connection', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}], 'restartPolicy': 'Never', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}}}",854
jellyfin,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/jellyfin-test-connection', 'spec/containers/0']","{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}",418
jellyfin,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/jellyfin', 'resource_type']",{},3884
jellyfin,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/jellyfin-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'jellyfin-test-connection', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}], 'restartPolicy': 'Never', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}}}",854
plausible,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/plausible', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}}",290
plausible,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/plausible', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'data': {'SECRET_KEY_BASE': 'VjFOMVZrcHFla05NVVVWcFlsSkpPVGh3VjAxSWQzbElRblJsYkRVMVNrUkhVWEZJUWpad2VucERaVzFtVW1zeA==', 'TOTP_VAULT_KEY': 'Wm0xNE1uaEthSHB3VlZWV05FZHFlRzFzTUV4dWEyVjRPWGhaYldkQ2Mwcz0=', 'CLICKHOUSE_DATABASE_URL': 'aHR0cDovL3BsYXVzaWJsZTpwbGF1c2libGVAY2xpY2tob3VzZS5sb2dzLnN2Yzo4MTIzL3BsYXVzaWJsZQ==', 'DATABASE_URL': 'cG9zdGdyZXM6Ly9wbGF1c2libGU6cGxhdXNpYmxlQHBsYXVzaWJsZS1wZy9wbGF1c2libGU=', 'DISABLE_REGISTRATION': 'aW52aXRlX29ubHk=', 'ENABLE_EMAIL_VERIFICATION': 'ZmFsc2U='}}",795
plausible,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/plausible', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}}",492
plausible,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/plausible', 'spec/template/spec/containers/0']","{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",620
plausible,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/plausible', 'spec/template/spec/containers/0/envFrom/0']",{'secretRef': {'name': 'plausible'}},36
plausible,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/plausible', 'spec/template/spec/containers/0']","{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",620
plausible,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/plausible', 'spec/template/spec/containers/0']","{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",620
plausible,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/plausible', 'spec/template/spec/containers/0']","{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",620
plausible,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/plausible', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/plausible', 'spec/template/spec/containers/0']","{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",620
plausible,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/plausible', 'spec/template/spec/containers/0']","{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",620
plausible,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/plausible', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/plausible', 'spec/template/spec/containers/0']","{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",620
plausible,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/plausible', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Job/default/plausible-schema', 'spec/template/spec/containers/0']","{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",488
plausible,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Job/default/plausible-schema', 'spec/template/spec/containers/0/envFrom/0']",{'secretRef': {'name': 'plausible'}},36
plausible,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Job/default/plausible-schema', 'spec/template/spec/containers/0']","{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",488
plausible,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Job/default/plausible-schema', 'spec/template/spec/containers/0']","{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",488
plausible,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Job/default/plausible-schema', 'spec/template/spec/containers/0']","{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",488
plausible,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Job/default/plausible-schema', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'plausible-schema', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}, 'annotations': {'helm.sh/hook': 'pre-install,pre-upgrade', 'helm.sh/hook-weight': '-15', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'spec': {'ttlSecondsAfterFinished': 1800, 'activeDeadlineSeconds': 600, 'backoffLimit': 0, 'completions': 1, 'parallelism': 1, 'template': {'metadata': {'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}}, 'spec': {'automountServiceAccountToken': False, 'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'activeDeadlineSeconds': 600, 'restartPolicy': 'Never', 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1697
plausible,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Job/default/plausible-schema', 'spec/template/spec/containers/0']","{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}",488
plausible,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Job/default/plausible-schema', '']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'plausible-schema', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}, 'annotations': {'helm.sh/hook': 'pre-install,pre-upgrade', 'helm.sh/hook-weight': '-15', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'spec': {'ttlSecondsAfterFinished': 1800, 'activeDeadlineSeconds': 600, 'backoffLimit': 0, 'completions': 1, 'parallelism': 1, 'template': {'metadata': {'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}}, 'spec': {'automountServiceAccountToken': False, 'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'activeDeadlineSeconds': 600, 'restartPolicy': 'Never', 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1697
plausible,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/plausible', 'resource_type']",{},5097
plausible,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/plausible-schema', 'resource_type']",{},5097
heimdall,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/heimdall', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/service': 'heimdall', 'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}, 'annotations': None}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}}",547
heimdall,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/heimdall', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/heimdall', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/heimdall', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/heimdall', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/heimdall', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/heimdall', 'spec/template/spec/containers/0']","{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}",685
heimdall,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/heimdall', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/heimdall', 'resource_type']",{},1991
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/timesketch-postgresql', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2'}}, 'automountServiceAccountToken': False}",369
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/timesketch-redis-master', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'automountServiceAccountToken': False, 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2'}}}",360
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/timesketch-timesketch', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'timesketch-timesketch', 'labels': {'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'automountServiceAccountToken': False}",368
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/timesketch-postgresql', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2'}}, 'type': 'Opaque', 'data': {'postgres-password': 'ak1YVnV4VmVTeQ=='}}",391
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/timesketch-redis', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'timesketch-redis', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2'}}, 'type': 'Opaque', 'data': {'redis-password': 'SE5TdzdKbzA2Sg=='}}",372
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/timesketch-access-list', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'timesketch-access-list', 'namespace': 'default', 'labels': {'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'type': 'Opaque', 'data': {'authenticated-emails-list': ''}}",407
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/timesketch-secret', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'timesketch-secret', 'namespace': 'default', 'labels': {'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'data': {'timesketch-secret': 'cm8zMng2VHdqS05BOFl2WDVwWE9JbVpxYTNoRng0Zjg=', 'timesketch-user': 'cU05NmtKemhFalFTbUg4eQ=='}}",467
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/timesketch-opensearch-cluster-master-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'timesketch-opensearch-cluster-master-config', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}}, 'data': {'opensearch.yml': 'plugins:\n  security:\n    allow_unsafe_democertificates: false\n'}}",491
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/timesketch-redis-configuration', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'timesketch-redis-configuration', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2'}}, 'data': {'redis.conf': '# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave """"\n# End of common configuration', 'master.conf': 'dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB """"\nrename-command FLUSHALL """"\n# End of master configuration', 'replica.conf': 'dir /data\n# User-supplied replica configuration:\nrename-command FLUSHDB """"\nrename-command FLUSHALL """"\n# End of replica configuration'}}",881
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/timesketch-redis-health', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'timesketch-redis-health', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2'}}, 'data': {'ping_readiness_local.sh': '#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=""$(< ""${REDIS_PASSWORD_FILE}"")""\n[[ -n ""$REDIS_PASSWORD"" ]] && export REDISCLI_AUTH=""$REDIS_PASSWORD""\nresponse=$(\n  timeout -s 15 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ ""$?"" -eq ""124"" ]; then\n  echo ""Timed out""\n  exit 1\nfi\nif [ ""$response"" != ""PONG"" ]; then\n  echo ""$response""\n  exit 1\nfi', 'ping_liveness_local.sh': '#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=""$(< ""${REDIS_PASSWORD_FILE}"")""\n[[ -n ""$REDIS_PASSWORD"" ]] && export REDISCLI_AUTH=""$REDIS_PASSWORD""\nresponse=$(\n  timeout -s 15 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ ""$?"" -eq ""124"" ]; then\n  echo ""Timed out""\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk \'{print $1;}\')\nif [ ""$response"" != ""PONG"" ] && [ ""$responseFirstWord"" != ""LOADING"" ] && [ ""$responseFirstWord"" != ""MASTERDOWN"" ]; then\n  echo ""$response""\n  exit 1\nfi', 'ping_readiness_master.sh': '#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=""$(< ""${REDIS_MASTER_PASSWORD_FILE}"")""\n[[ -n ""$REDIS_MASTER_PASSWORD"" ]] && export REDISCLI_AUTH=""$REDIS_MASTER_PASSWORD""\nresponse=$(\n  timeout -s 15 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ ""$?"" -eq ""124"" ]; then\n  echo ""Timed out""\n  exit 1\nfi\nif [ ""$response"" != ""PONG"" ]; then\n  echo ""$response""\n  exit 1\nfi', 'ping_liveness_master.sh': '#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=""$(< ""${REDIS_MASTER_PASSWORD_FILE}"")""\n[[ -n ""$REDIS_MASTER_PASSWORD"" ]] && export REDISCLI_AUTH=""$REDIS_MASTER_PASSWORD""\nresponse=$(\n  timeout -s 15 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ ""$?"" -eq ""124"" ]; then\n  echo ""Timed out""\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk \'{print $1;}\')\nif [ ""$response"" != ""PONG"" ] && [ ""$responseFirstWord"" != ""LOADING"" ]; then\n  echo ""$response""\n  exit 1\nfi', 'ping_readiness_local_and_master.sh': 'script_dir=""$(dirname ""$0"")""\nexit_status=0\n""$script_dir/ping_readiness_local.sh"" $1 || exit_status=$?\n""$script_dir/ping_readiness_master.sh"" $1 || exit_status=$?\nexit $exit_status', 'ping_liveness_local_and_master.sh': 'script_dir=""$(dirname ""$0"")""\nexit_status=0\n""$script_dir/ping_liveness_local.sh"" $1 || exit_status=$?\n""$script_dir/ping_liveness_master.sh"" $1 || exit_status=$?\nexit $exit_status'}}",2931
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/timesketch-redis-scripts', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'timesketch-redis-scripts', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2'}}, 'data': {'start-master.sh': '#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=""$(< ""${REDIS_PASSWORD_FILE}"")""\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(""--port"" ""${REDIS_PORT}"")\nARGS+=(""--requirepass"" ""${REDIS_PASSWORD}"")\nARGS+=(""--masterauth"" ""${REDIS_PASSWORD}"")\nARGS+=(""--include"" ""/opt/bitnami/redis/etc/redis.conf"")\nARGS+=(""--include"" ""/opt/bitnami/redis/etc/master.conf"")\nexec redis-server ""${ARGS[@]}""\n'}}",1021
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/timesketch-init-configmap', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'timesketch-init-configmap', 'namespace': 'default', 'labels': {'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'data': {'init-timesketch.sh': '#!/bin/sh\nset -e\n\n# Create timesketch config directory\nmkdir -p /etc/timesketch\ncd /etc/timesketch\n\nif [ $(ls /tmp/timesketch/ | wc -l) -gt 0 ]; then\n  echo ""Using existing configuration files provided.""\n  ls /tmp/timesketch\n  cp /tmp/timesketch/* /etc/timesketch/\nelse\n  echo -n ""* Fetching configuration files.."" \n  GITHUB_BASE_URL=""https://raw.githubusercontent.com/google/timesketch/master""\n  # Fetch default Timesketch config files\n  git clone https://github.com/google/timesketch.git\n  cp -r timesketch/data/* /etc/timesketch/\n  rm -rf timesketch\n  echo ""OK""\nfi\n\n# Set up the Redis connection\nsed -i \'s#^CELERY_BROKER_URL =.*#CELERY_BROKER_URL = ""redis://default:\'$REDIS_PASSWORD\'@timesketch-redis-master:6379""#\' timesketch.conf\nsed -i \'s#^CELERY_RESULT_BACKEND =.*#CELERY_RESULT_BACKEND = ""redis://default:\'$REDIS_PASSWORD\'@timesketch-redis-master:6379""#\' timesketch.conf\n\n# Set up the Postgresql connection\nsed -i \'s#postgresql://<USERNAME>:<PASSWORD>@localhost/timesketch#postgresql://postgres:\'$POSTGRES_PASSWORD\'@timesketch-postgresql:5432/timesketch#\' timesketch.conf\n\n# Set up the Opensearch connection\nsed -i \'s#^OPENSEARCH_HOST =.*#OPENSEARCH_HOST = ""timesketch-opensearch-cluster-master""#\' timesketch.conf\n\n# Set up secret\nsed -i \'s#^SECRET_KEY =.*#SECRET_KEY = ""\'$TIMESKETCH_SECRET\'""#\' timesketch.conf\n\n# Set up upload folder\nsed -i \'s#^UPLOAD_ENABLED = False#UPLOAD_ENABLED = True#\' timesketch.conf\nsed -i \'s#^UPLOAD_FOLDER =.*#UPLOAD_FOLDER =  ""/mnt/timesketchvolume/upload""#\' timesketch.conf\n\n# Update scenarios paths\nsed -i \'s#^SCENARIOS_PATH =.*#SCENARIOS_PATH = ""/etc/timesketch/scenarios.yaml""#\' timesketch.conf\nsed -i \'s#^FACETS_PATH =.*#FACETS_PATH = ""/etc/timesketch/facets.yaml""#\' timesketch.conf\nsed -i \'s#^QUESTIONS_PATH =.*#QUESTIONS_PATH = ""/etc/timesketch/questions.yaml""#\' timesketch.conf\n\n# OIDC integration\n\n# Yeti integration\n'}}",2325
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-opensearch-cluster-master', '']","{'kind': 'Service', 'apiVersion': 'v1', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {}}, 'spec': {'type': 'ClusterIP', 'selector': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}, 'ports': [{'name': 'http', 'protocol': 'TCP', 'port': 9200}, {'name': 'transport', 'protocol': 'TCP', 'port': 9300}]}}",651
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-opensearch-cluster-master-headless', '']","{'kind': 'Service', 'apiVersion': 'v1', 'metadata': {'name': 'timesketch-opensearch-cluster-master-headless', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true'}}, 'spec': {'clusterIP': 'None', 'publishNotReadyAddresses': True, 'selector': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}, 'ports': [{'name': 'http', 'port': 9200}, {'name': 'transport', 'port': 9300}, {'name': 'metrics', 'port': 9600}]}}",755
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-postgresql-hl', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'timesketch-postgresql-hl', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}, 'annotations': {'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true'}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'publishNotReadyAddresses': True, 'ports': [{'name': 'tcp-postgresql', 'port': 5432, 'targetPort': 'tcp-postgresql'}], 'selector': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}}",762
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-postgresql', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'type': 'ClusterIP', 'sessionAffinity': 'None', 'ports': [{'name': 'tcp-postgresql', 'port': 5432, 'targetPort': 'tcp-postgresql', 'nodePort': None}], 'selector': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}}",666
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-redis-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'timesketch-redis-headless', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2'}}, 'spec': {'type': 'ClusterIP', 'clusterIP': 'None', 'ports': [{'name': 'tcp-redis', 'port': 6379, 'targetPort': 'redis'}], 'selector': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis'}}}",532
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-redis-master', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}}, 'spec': {'type': 'ClusterIP', 'internalTrafficPolicy': 'Cluster', 'sessionAffinity': 'None', 'ports': [{'name': 'tcp-redis', 'port': 6379, 'targetPort': 'redis', 'nodePort': None}], 'selector': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}}",672
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-frontend-metrics', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'timesketch-frontend-metrics', 'labels': {'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'ports': [{'port': 8080, 'targetPort': 8080, 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}}",561
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch-worker-metrics', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'timesketch-worker-metrics', 'labels': {'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'ports': [{'port': 8080, 'targetPort': 8080, 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}}",557
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/timesketch', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 5000, 'protocol': 'TCP', 'targetPort': 5000}], 'selector': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}}",573
timesketch,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/timesketch', 'spec/template/spec/containers/0/env/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/timesketch', 'spec/template/spec/initContainers/0']","{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}",700
timesketch,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/timesketch', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/timesketch', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/timesketch', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/timesketch', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/timesketch', 'spec/template/spec/containers/0']","{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}",964
timesketch,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/timesketch', 'spec/template/spec/initContainers/0']","{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}",700
timesketch,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/timesketch', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/timesketch-worker', 'spec/template/spec/initContainers/0/env/0']","{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}",700
timesketch,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Deployment/default/timesketch-worker', 'spec/template/spec/initContainers/0']","{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}",700
timesketch,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/default/timesketch-worker', 'spec/template/spec/initContainers/0']","{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}",700
timesketch,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/timesketch-worker', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/timesketch-worker', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/timesketch-worker', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/timesketch-worker', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Deployment/default/timesketch-worker', 'spec/template/spec/initContainers/0']","{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}",700
timesketch,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/timesketch-worker', 'spec/template/spec/containers/0']","{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}",798
timesketch,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/default/timesketch-worker', 'spec/template/spec/initContainers/0']","{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}",700
timesketch,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/timesketch-worker', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/containers/0']","{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}",1511
timesketch,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/initContainers/2']","{'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}",387
timesketch,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/containers/0']","{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}",1511
timesketch,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/initContainers/2']","{'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}",387
timesketch,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/timesketch-opensearch-cluster-master', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
timesketch,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/initContainers/2']","{'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}",387
timesketch,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/containers/0']","{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}",1511
timesketch,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/containers/0']","{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}",1511
timesketch,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/containers/0']","{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}",1511
timesketch,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/containers/0']","{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}",1511
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/timesketch-opensearch-cluster-master', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
timesketch,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/containers/0']","{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}",1511
timesketch,checkov,CKV_K8S_16,check_21,Pod Security Policy,Container should not be privileged,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/initContainers/2']","{'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}",387
timesketch,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['StatefulSet/default/timesketch-opensearch-cluster-master', 'spec/template/spec/initContainers/2']","{'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}",387
timesketch,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/timesketch-opensearch-cluster-master', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
timesketch,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/timesketch-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",2377
timesketch,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['StatefulSet/default/timesketch-postgresql', 'spec/template/spec/containers/0/env/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",2377
timesketch,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/timesketch-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",2377
timesketch,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/timesketch-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",2377
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/timesketch-postgresql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'serviceName': 'timesketch-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'timesketch-postgresql', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'timesketch-postgresql', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'hostNetwork': False, 'hostIPC': False, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'empty-dir', 'emptyDir': {}}, {'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4300
timesketch,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/timesketch-postgresql', 'spec/template/spec/containers/0']","{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}",2377
timesketch,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/timesketch-postgresql', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'serviceName': 'timesketch-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'timesketch-postgresql', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'timesketch-postgresql', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'hostNetwork': False, 'hostIPC': False, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'empty-dir', 'emptyDir': {}}, {'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4300
timesketch,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/timesketch-redis-master', 'spec/template/spec/containers/0']","{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}",1732
timesketch,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['StatefulSet/default/timesketch-redis-master', 'spec/template/spec/containers/0/env/0']","{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}",1732
timesketch,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/timesketch-redis-master', 'spec/template/spec/containers/0']","{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}",1732
timesketch,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/timesketch-redis-master', 'spec/template/spec/containers/0']","{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}",1732
timesketch,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/timesketch-redis-master', 'spec/template/spec/containers/0']","{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}",1732
timesketch,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/timesketch-redis-master', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'serviceName': 'timesketch-redis-headless', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}, 'annotations': {'checksum/configmap': '86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47', 'checksum/health': 'aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9', 'checksum/scripts': '560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5', 'checksum/secret': 'c477334a4d2db44b2b392d8728df92c05f69f3cda179a4e1cdcb6b58a8165133'}}, 'spec': {'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'serviceAccountName': 'timesketch-redis-master', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'enableServiceLinks': True, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}], 'volumes': [{'name': 'start-scripts', 'configMap': {'name': 'timesketch-redis-scripts', 'defaultMode': 493}}, {'name': 'health', 'configMap': {'name': 'timesketch-redis-health', 'defaultMode': 493}}, {'name': 'config', 'configMap': {'name': 'timesketch-redis-configuration'}}, {'name': 'empty-dir', 'emptyDir': {}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'redis-data', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4315
timesketch,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/timesketch-redis-master', 'spec/template/spec/containers/0']","{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}",1732
timesketch,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/timesketch-redis-master', 'spec/template/spec/containers/0']","{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}",1732
timesketch,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/timesketch-redis-master', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'serviceName': 'timesketch-redis-headless', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}, 'annotations': {'checksum/configmap': '86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47', 'checksum/health': 'aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9', 'checksum/scripts': '560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5', 'checksum/secret': 'c477334a4d2db44b2b392d8728df92c05f69f3cda179a4e1cdcb6b58a8165133'}}, 'spec': {'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'serviceAccountName': 'timesketch-redis-master', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'enableServiceLinks': True, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}], 'volumes': [{'name': 'start-scripts', 'configMap': {'name': 'timesketch-redis-scripts', 'defaultMode': 493}}, {'name': 'health', 'configMap': {'name': 'timesketch-redis-health', 'defaultMode': 493}}, {'name': 'config', 'configMap': {'name': 'timesketch-redis-configuration'}}, {'name': 'empty-dir', 'emptyDir': {}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'redis-data', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4315
timesketch,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/timesketch', 'resource_type']",{},37550
timesketch,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/timesketch-worker', 'resource_type']",{},37550
timesketch,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/timesketch-opensearch-cluster-master', 'resource_type']",{},37550
cloudevents,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/cloudevents', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'cloudevents', 'labels': {'app.kubernetes.io/name': 'cloudevents', 'helm.sh/chart': 'cloudevents-0.13.1', 'app.kubernetes.io/instance': 'cloudevents', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': None}, 'automountServiceAccountToken': False}",419
cloudevents,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/cloudevents', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'cloudevents', 'labels': {'app.kubernetes.io/name': 'cloudevents', 'helm.sh/chart': 'cloudevents-0.13.1', 'app.kubernetes.io/instance': 'cloudevents', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'type': 'ClusterIP', 'ipFamilyPolicy': 'PreferDualStack', 'ipFamilies': ['IPv4'], 'ports': [{'name': 'http', 'port': 7070, 'targetPort': 'http', 'protocol': 'TCP', 'appProtocol': None}], 'selector': {'app.kubernetes.io/name': 'cloudevents', 'app.kubernetes.io/instance': 'cloudevents'}}}",649
cloudevents,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/cloudevents-preview', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'cloudevents-preview', 'labels': {'app.kubernetes.io/name': 'cloudevents', 'helm.sh/chart': 'cloudevents-0.13.1', 'app.kubernetes.io/instance': 'cloudevents', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'type': 'ClusterIP', 'ipFamilyPolicy': 'PreferDualStack', 'ipFamilies': ['IPv4'], 'ports': [{'name': 'http', 'port': 7070, 'targetPort': 'http', 'protocol': 'TCP', 'appProtocol': None}], 'selector': {'app.kubernetes.io/name': 'cloudevents', 'app.kubernetes.io/instance': 'cloudevents'}}}",657
cloudevents,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Ingress/default/cloudevents', '']","{'apiVersion': 'networking.k8s.io/v1', 'kind': 'Ingress', 'metadata': {'name': 'cloudevents', 'labels': {'app.kubernetes.io/name': 'cloudevents', 'helm.sh/chart': 'cloudevents-0.13.1', 'app.kubernetes.io/instance': 'cloudevents', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {'cert-manager.io/cluster-issuer': 'cert-manager-production', 'nginx.ingress.kubernetes.io/enable-opentelemetry': 'true', 'nginx.ingress.kubernetes.io/enable-owasp-core-rules': 'true'}}, 'spec': {'ingressClassName': 'nginx', 'rules': [{'http': {'paths': [{'path': '/cloudevents(/|$)(.*)', 'pathType': 'Prefix', 'backend': {'service': {'name': 'shortlink-api-cloudevents', 'port': {'number': 7070}}}}]}, 'host': 'shortlink.best'}]}}",816
wg-access-server,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/wg-access-server', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'config.yaml': ''}}",370
wg-access-server,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/wg-access-server-web', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'wg-access-server-web', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 8000, 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}}",591
wg-access-server,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/wg-access-server-wireguard', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'wg-access-server-wireguard', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'sessionAffinity': 'ClientIP', 'ports': [{'port': 51820, 'targetPort': 51820, 'protocol': 'UDP', 'name': 'wireguard'}], 'selector': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}}",637
wg-access-server,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/wg-access-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/default/wg-access-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/wg-access-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/wg-access-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/wg-access-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_25,check_34,Pod Security Policy,Minimize the admission of containers with added capability,"['Deployment/default/wg-access-server', 'spec/template/spec/containers/0']","{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",575
wg-access-server,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/wg-access-server', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/wg-access-server', 'resource_type']",{},3223
influxdb,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/new/influxdb', 'spec/template/spec/containers/0/envFrom/0']",{'secretRef': {'name': 'influxdb-credens'}},43
influxdb,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/new/influxdb', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'influxdb'}, 'name': 'influxdb', 'namespace': 'new'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'influxdb'}}, 'template': {'metadata': {'labels': {'app': 'influxdb'}}, 'spec': {'containers': [{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}], 'volumes': [{'name': 'var-lib-influxdb', 'persistentVolumeClaim': {'claimName': 'influxdb-perv-claim'}}]}}}}",774
influxdb,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Deployment/new/influxdb', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'influxdb'}, 'name': 'influxdb', 'namespace': 'new'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'influxdb'}}, 'template': {'metadata': {'labels': {'app': 'influxdb'}}, 'spec': {'containers': [{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}], 'volumes': [{'name': 'var-lib-influxdb', 'persistentVolumeClaim': {'claimName': 'influxdb-perv-claim'}}]}}}}",774
influxdb,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/new/influxdb', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'influxdb'}, 'name': 'influxdb', 'namespace': 'new'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'influxdb'}}, 'template': {'metadata': {'labels': {'app': 'influxdb'}}, 'spec': {'containers': [{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}], 'volumes': [{'name': 'var-lib-influxdb', 'persistentVolumeClaim': {'claimName': 'influxdb-perv-claim'}}]}}}}",774
influxdb,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/new/influxdb', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'influxdb'}, 'name': 'influxdb', 'namespace': 'new'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'influxdb'}}, 'template': {'metadata': {'labels': {'app': 'influxdb'}}, 'spec': {'containers': [{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}], 'volumes': [{'name': 'var-lib-influxdb', 'persistentVolumeClaim': {'claimName': 'influxdb-perv-claim'}}]}}}}",774
influxdb,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Deployment/new/influxdb', 'spec/template/spec/containers/0']","{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}",374
influxdb,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/new/influxdb', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'influxdb'}, 'name': 'influxdb', 'namespace': 'new'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'influxdb'}}, 'template': {'metadata': {'labels': {'app': 'influxdb'}}, 'spec': {'containers': [{'envFrom': [{'secretRef': {'name': 'influxdb-credens'}}], 'image': 'docker.io/influxdb:latest', 'name': 'influxdb', 'env': [{'name': 'DOCKER_INFLUXDB_INIT_MODE', 'value': 'setup'}], 'resources': {'requests': {'memory': '256Mi', 'cpu': '512m'}, 'limits': {'memory': '256Mi', 'cpu': '512m'}}, 'volumeMounts': [{'mountPath': '/var/lib/influxdb2', 'name': 'var-lib-influxdb'}]}], 'volumes': [{'name': 'var-lib-influxdb', 'persistentVolumeClaim': {'claimName': 'influxdb-perv-claim'}}]}}}}",774
influxdb,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/new/influxdb', 'resource_type']",{},2166
tailscale-relay,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/tailscale-relay', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'tailscale-relay', 'annotations': None, 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}}}",336
tailscale-relay,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/tailscale-relay-config', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'tailscale-relay-config', 'annotations': None, 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'stringData': {'TAILSCALE_AUTH_KEY': 'foo'}}",398
tailscale-relay,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/tailscale-relay-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'tailscale-relay-config', 'annotations': None, 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {}}",350
tailscale-relay,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Role/default/tailscale-relay', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'Role', 'metadata': {'name': 'tailscale-relay', 'annotations': None, 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}}, 'rules': [{'apiGroups': [''], 'resources': ['secrets'], 'verbs': ['create', 'get', 'update']}]}",448
tailscale-relay,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['RoleBinding/default/tailscale-relay-tailscale-relay', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'name': 'tailscale-relay-tailscale-relay', 'annotations': None, 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'tailscale-relay'}], 'roleRef': {'kind': 'Role', 'name': 'tailscale-relay', 'apiGroup': 'rbac.authorization.k8s.io'}}",541
tailscale-relay,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0/envFrom/0']",{'configMapRef': {'name': 'tailscale-relay-config'}},52
tailscale-relay,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/tailscale-relay', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['StatefulSet/default/tailscale-relay', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/tailscale-relay', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/tailscale-relay', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/tailscale-relay', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_25,check_34,Pod Security Policy,Minimize the admission of containers with added capability,"['StatefulSet/default/tailscale-relay', 'spec/template/spec/containers/0']","{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}",517
tailscale-relay,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/tailscale-relay', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/tailscale-relay', 'resource_type']",{},3758
tailscale-relay,checkov,CKV2_K8S_5,check_59,RBAC and Service Accounts,No ServiceAccount/Node should be able to read all secrets,"['RoleBinding/default/tailscale-relay-tailscale-relay', '']","{'apiVersion': 'rbac.authorization.k8s.io/v1', 'kind': 'RoleBinding', 'metadata': {'name': 'tailscale-relay-tailscale-relay', 'annotations': None, 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}}, 'subjects': [{'kind': 'ServiceAccount', 'name': 'tailscale-relay'}], 'roleRef': {'kind': 'Role', 'name': 'tailscale-relay', 'apiGroup': 'rbac.authorization.k8s.io'}}",541
ping-exporter,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/ping-exporter', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'automountServiceAccountToken': True}",344
ping-exporter,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/ping-exporter-config', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'ping-exporter-config'}, 'data': {'config.yml': 'targets:'}}",123
ping-exporter,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/ping-exporter', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 9427, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}}",518
ping-exporter,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/ping-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/ping-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/ping-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/ping-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_25,check_34,Pod Security Policy,Minimize the admission of containers with added capability,"['Deployment/default/ping-exporter', 'spec/template/spec/containers/0']","{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}",434
ping-exporter,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/ping-exporter', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/ping-exporter-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/ping-exporter-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/ping-exporter-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/ping-exporter-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/ping-exporter-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/ping-exporter-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}",89
ping-exporter,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/ping-exporter-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/ping-exporter', 'resource_type']",{},2786
ping-exporter,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/ping-exporter-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
mojeaplikace,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/mojeaplikace', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}}",302
mojeaplikace,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/mojeaplikace', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 80, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}}",510
mojeaplikace,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/mojeaplikace', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/mojeaplikace', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/mojeaplikace', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/mojeaplikace', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/mojeaplikace', 'spec/template/spec/containers/0']","{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}",316
mojeaplikace,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/mojeaplikace', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_10,check_4,N/A,CPU requests should be set,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_30,check_30,General Policies,Apply security context to your containers,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Pod/default/mojeaplikace-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,checkov,CKV_K8S_29,check_30,General Policies,Apply security context to your pods and containers,"['Pod/default/mojeaplikace-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Pod/default/mojeaplikace-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Pod/default/mojeaplikace-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Pod/default/mojeaplikace-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,checkov,CKV_K8S_12,check_1,N/A,Memory requests should be set,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_14,check_0,N/A,Image Tag should be fixed - not latest or blank,"['Pod/default/mojeaplikace-test-connection', 'spec/containers/0']","{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}",86
mojeaplikace,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Pod/default/mojeaplikace-test-connection', '']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mojeaplikace', 'resource_type']",{},2280
mojeaplikace,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/mojeaplikace-test-connection', 'resource_type']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
pulse,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/pulse', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}}",274
pulse,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Secret/default/pulse', '']","{'apiVersion': 'v1', 'kind': 'Secret', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'type': 'Opaque', 'data': {'api-access-token': 'TUlTU0lORw=='}}",330
pulse,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ConfigMap/default/pulse', '']","{'apiVersion': 'v1', 'kind': 'ConfigMap', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'data': {'processor.yaml': 'provider:\n  type: http\n  url: ${MEZMO_API_SCHEME}://${MEZMO_API_HOST}/v3/pipeline/account/local-deploy/config\n  poll_interval_secs: 15\n  request:\n    headers:\n      authorization: ""Token ${MEZMO_LOCAL_DEPLOY_AUTH_TOKEN}""\n'}}",529
pulse,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/pulse', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'selector': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}, 'ports': [{'name': 'graphql-api', 'port': 8686, 'targetPort': 8686, 'protocol': 'TCP'}]}}",475
pulse,checkov,CKV_K8S_13,check_2,N/A,Memory limits should be set,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_35,check_33,Secrets Management,Prefer using secrets as files over secrets as environment variables,"['Deployment/default/pulse', 'spec/template/spec/containers/0/env/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['Deployment/default/pulse', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['Deployment/default/pulse', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_11,check_5,N/A,CPU limits should be set,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['Deployment/default/pulse', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Deployment/default/pulse', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['Deployment/default/pulse', 'spec/template/spec/containers/0']","{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}",1101
pulse,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['Deployment/default/pulse', '']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/pulse', 'resource_type']",{},3476
tei,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['ServiceAccount/default/tei', '']","{'apiVersion': 'v1', 'kind': 'ServiceAccount', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'automountServiceAccountToken': True}",303
tei,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/tei-headless', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'tei-headless', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'clusterIP': 'None', 'ports': [{'port': 8080, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}}",466
tei,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['Service/default/tei', '']","{'apiVersion': 'v1', 'kind': 'Service', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'type': 'ClusterIP', 'ports': [{'port': 8080, 'targetPort': 'http', 'protocol': 'TCP', 'name': 'http'}], 'selector': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}}",457
tei,checkov,CKV_K8S_37,check_34,Pod Security Policy,Minimize the admission of containers with capabilities assigned,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_15,check_25,N/A,Image Pull Policy should be Always,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_9,check_8,N/A,Readiness Probe Should be Configured,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_31,check_31,General Policies,Ensure that the seccomp profile is set to docker/default or runtime/default,"['StatefulSet/default/tei', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,checkov,CKV_K8S_28,check_34,Pod Security Policy,Minimize the admission of containers with the NET_RAW capability,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_23,check_28,Pod Security Policy,Minimize the admission of root containers,"['StatefulSet/default/tei', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,checkov,CKV_K8S_20,check_22,Pod Security Policy,Containers should not run with allowPrivilegeEscalation,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_38,check_35,RBAC and Service Accounts,Ensure that Service Account Tokens are only mounted where necessary,"['StatefulSet/default/tei', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,checkov,CKV_K8S_22,check_27,N/A,Use read-only filesystem for containers where possible,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_8,check_7,N/A,Liveness Probe Should be Configured,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_21,check_26,General Policies,The default namespace should not be used,"['StatefulSet/default/tei', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,checkov,CKV_K8S_43,check_9,N/A,Image should use digest,"['StatefulSet/default/tei', 'spec/template/spec/containers/0']","{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}",404
tei,checkov,CKV_K8S_40,check_13,N/A,Containers should run as a high UID to avoid host conflict,"['StatefulSet/default/tei', '']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,checkov,CKV2_K8S_6,check_40,Network Policies and CNI,Minimize the admission of pods which lack an associated NetworkPolicy,"['Pod/default/tei', 'resource_type']",{},2561
deis-workflow,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/deis-workflow', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/deis-workflow-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/deis-workflow', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/deis-workflow-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/deis-workflow', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/deis-workflow-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/deis-workflow-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/deis-workflow-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/deis-workflow-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
deis-workflow,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/deis-workflow', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deis-workflow', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow'}}, 'spec': {'topologySpreadConstraints': [{'maxSkew': 1, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'DoNotSchedule', 'labelSelector': {'matchLabels': {'name': 'deis-workflow'}}}], 'serviceAccountName': 'deis-workflow', 'securityContext': {}, 'containers': [{'name': 'deis-workflow', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1182
deis-workflow,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/deis-workflow-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'deis-workflow-test-connection', 'labels': {'helm.sh/chart': 'deis-workflow-0.1.0', 'app.kubernetes.io/name': 'deis-workflow', 'app.kubernetes.io/instance': 'deis-workflow', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['deis-workflow:80']}], 'restartPolicy': 'Never'}}",493
billing,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/billing', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'billing', 'app.kubernetes.io/instance': 'billing'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'billing', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}]}}}}",2549
billing,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['Deployment/billing', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'billing', 'app.kubernetes.io/instance': 'billing'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'billing', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}]}}}}",2549
billing,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/billing', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'billing', 'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': {}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'billing', 'app.kubernetes.io/instance': 'billing'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'billing', 'helm.sh/chart': 'billing-0.1.2', 'app.kubernetes.io/instance': 'billing', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'billing', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': False, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/billing:0.19.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'grpc', 'containerPort': 50051, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_KAFKA_URI', 'value': 'shortlink-kafka-bootstrap.kafka:9092'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'STORE_REDIS_URI', 'value': 'shortlink-redis-master.shortlink-billing:6379'}, {'name': 'STORE_TYPE', 'value': 'postgres'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}, {'name': 'STORE_POSTGRES_URI', 'valueFrom': {'secretKeyRef': {'name': 'shortlink-postgres-pguser-billing', 'key': 'uri'}}}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '32Mi'}}}]}}}}",2549
csi-s3,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['DaemonSet/csi-s3', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/csi-s3-provisioner', '/spec/template/spec/containers/0']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['DaemonSet/csi-s3', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/csi-s3-provisioner', '/spec/template/spec/containers/0']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['DaemonSet/csi-s3', '/spec/template/spec/volumes/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['DaemonSet/csi-s3', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/csi-s3-provisioner', '/spec/template/spec/containers/0']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['DaemonSet/csi-s3', '/metadata']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/csi-s3-provisioner', '/metadata']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['DaemonSet/csi-s3', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/csi-s3-provisioner', '/spec/template/spec/containers/0']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['DaemonSet/csi-s3', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['StatefulSet/csi-s3-provisioner', '/spec/template/spec/containers/0']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
csi-s3,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['DaemonSet/csi-s3', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3', 'namespace': 'default'}, 'spec': {'selector': {'matchLabels': {'app': 'csi-s3'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3'}}, 'spec': {'tolerations': None, 'serviceAccount': 'csi-s3', 'containers': [{'name': 'driver-registrar', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-node-driver-registrar:v1.2.0', 'args': ['--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)', '--v=4', '--csi-address=$(ADDRESS)'], 'env': [{'name': 'ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'DRIVER_REG_SOCK_PATH', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'csi-s3', 'securityContext': {'privileged': True, 'capabilities': {'add': ['SYS_ADMIN']}, 'allowPrivilegeEscalation': True}, 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'stage-dir', 'mountPath': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'mountPropagation': 'Bidirectional'}, {'name': 'pods-mount-dir', 'mountPath': '/var/lib/kubelet/pods', 'mountPropagation': 'Bidirectional'}, {'name': 'fuse-device', 'mountPath': '/dev/fuse'}, {'name': 'systemd-control', 'mountPath': '/run/systemd'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/ru.yandex.s3.csi', 'type': 'DirectoryOrCreate'}}, {'name': 'stage-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/kubernetes.io/csi', 'type': 'DirectoryOrCreate'}}, {'name': 'pods-mount-dir', 'hostPath': {'path': '/var/lib/kubelet/pods', 'type': 'Directory'}}, {'name': 'fuse-device', 'hostPath': {'path': '/dev/fuse'}}, {'name': 'systemd-control', 'hostPath': {'path': '/run/systemd', 'type': 'DirectoryOrCreate'}}]}}}}",2376
csi-s3,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['StatefulSet/csi-s3-provisioner', '/spec/template/spec/containers/0']","{'kind': 'StatefulSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'csi-s3-provisioner', 'namespace': 'default'}, 'spec': {'serviceName': 'csi-provisioner-s3', 'replicas': 1, 'selector': {'matchLabels': {'app': 'csi-s3-provisioner'}}, 'template': {'metadata': {'labels': {'app': 'csi-s3-provisioner'}}, 'spec': {'serviceAccount': 'csi-s3-provisioner-sa', 'tolerations': None, 'containers': [{'name': 'csi-provisioner', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-provisioner:v2.1.0', 'args': ['--csi-address=$(ADDRESS)', '--v=4'], 'env': [{'name': 'ADDRESS', 'value': '/var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}], 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}, {'name': 'csi-s3', 'image': 'cr.yandex/crp9ftr22d26age3hulg/yandex-cloud/csi-s3/csi-s3-driver:0.41.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--nodeid=$(NODE_ID)', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock'}, {'name': 'NODE_ID', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/kubelet/plugins/ru.yandex.s3.csi'}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}]}}}}",1336
test-helm-app1,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
test-helm-app1,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/-deployment', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': '-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': None}}, 'template': {'metadata': {'labels': {'app': None}}, 'spec': {'containers': [{'name': 'my-fastapi-container', 'image': 'hamidyousefi93/saam-test:latest', 'ports': [{'containerPort': 80}]}]}}}}",344
squid,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/squid', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
squid,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/squid', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
squid,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/squid', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
squid,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/squid', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'squid', 'labels': {'app.kubernetes.io/instance': 'squid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'squid', 'helm.sh/chart': 'squid-1.3.0'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'template': {'metadata': {'annotations': {'checksum/config': '1d77c88a68f2c58e31b9784fcf3294c138b56e7c7a7bd58c2438165480979798'}, 'labels': {'app.kubernetes.io/name': 'squid', 'app.kubernetes.io/instance': 'squid'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 31, 'runAsGroup': 31, 'runAsUser': 31}, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'squid', 'image': 'lib42/squid:latest', 'imagePullPolicy': 'Always', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True}, 'ports': [{'name': 'http', 'containerPort': 3128, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'cache', 'mountPath': '/var/cache/squid'}, {'name': 'config', 'mountPath': '/etc/squid/squid.conf', 'subPath': 'squid.conf'}, {'name': 'varlog', 'mountPath': '/var/log/squid'}, {'name': 'varrun', 'mountPath': '/var/run'}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 3128}, 'timeoutSeconds': 1}}], 'volumes': [{'name': 'cache', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'squid-config'}}, {'name': 'varlog', 'emptyDir': {}}, {'name': 'varrun', 'emptyDir': {}}]}}}}",2036
horizon-satellite,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/horizon-satellite', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/horizon-satellite', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/horizon-satellite', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/horizon-satellite', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
horizon-satellite,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/horizon-satellite', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'horizon-satellite', 'labels': {'helm.sh/chart': 'horizon-satellite-0.1.0', 'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite', 'app.kubernetes.io/version': '0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'horizon-satellite', 'app.kubernetes.io/instance': 'horizon-satellite'}}, 'spec': {'serviceAccountName': 'horizon-satellite', 'securityContext': {}, 'containers': [{'name': 'horizon-satellite-sshd', 'securityContext': {}, 'image': 'registry.evertrust.io/horizon-satellite:0.1.0', 'imagePullPolicy': 'IfNotPresent', 'args': None, 'ports': [{'name': 'ssh', 'containerPort': 22, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 'ssh'}}, 'readinessProbe': {'tcpSocket': {'port': 'ssh'}}, 'resources': {}}]}}}}",1056
mimir-openshift-experimental,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['PodSecurityPolicy/mimir-openshift-experimental', '/spec/volumes/0']",{},56155
mimir-openshift-experimental,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/mimir-openshift-experimental-distributor', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/mimir-openshift-experimental-nginx', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/mimir-openshift-experimental-overrides-exporter', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/mimir-openshift-experimental-query-frontend', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/mimir-openshift-experimental-ruler', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/mimir-openshift-experimental-minio', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Job/mimir-openshift-experimental-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Job/mimir-openshift-experimental-minio-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mimir-openshift-experimental-minio', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mimir-openshift-experimental-distributor', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mimir-openshift-experimental-nginx', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mimir-openshift-experimental-overrides-exporter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mimir-openshift-experimental-querier', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['querier']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2686
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mimir-openshift-experimental-query-frontend', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mimir-openshift-experimental-ruler', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/mimir-openshift-experimental-alertmanager', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-alertmanager', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '1Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2642
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/mimir-openshift-experimental-compactor', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-compactor', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['compactor']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2807
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/mimir-openshift-experimental-ingester', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'podManagementPolicy': 'Parallel', 'replicas': 3, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-ingester-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2590
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/mimir-openshift-experimental-store-gateway', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-store-gateway-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['store-gateway']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2811
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Job/mimir-openshift-experimental-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Job/mimir-openshift-experimental-minio-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/mimir-openshift-experimental-minio', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Job/mimir-openshift-experimental-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Job/mimir-openshift-experimental-minio-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/mimir-openshift-experimental-minio', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/mimir-openshift-experimental-distributor', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-distributor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'distributor'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'distributor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'distributor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=distributor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['distributor']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2676
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/mimir-openshift-experimental-overrides-exporter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'annotations': {}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'name': 'mimir-openshift-experimental-overrides-exporter'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'overrides-exporter'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'overrides-exporter'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'overrides-exporter', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=overrides-exporter', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2425
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/mimir-openshift-experimental-querier', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-querier', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'querier'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'querier', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'querier', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=querier', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['querier']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2686
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/mimir-openshift-experimental-query-frontend', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-query-frontend', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'query-frontend'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'query-frontend'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'query-frontend', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=query-frontend', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['query-frontend']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2566
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/mimir-openshift-experimental-ruler', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-ruler', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ruler'}}, 'strategy': {'rollingUpdate': {'maxSurge': 0, 'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ruler', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'containers': [{'name': 'ruler', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ruler', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data', 'subPath': None}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 180, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'storage', 'emptyDir': {}}]}}}}",2422
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/mimir-openshift-experimental-alertmanager', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-alertmanager', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'alertmanager'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-alertmanager', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '1Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'alertmanager', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 60, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'alertmanager', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=alertmanager', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 45}, 'resources': {'requests': {'cpu': '10m', 'memory': '32Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2642
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/mimir-openshift-experimental-compactor', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-compactor', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'compactor'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-compactor', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'compactor', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['compactor']}]}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 100}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'compactor', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=compactor', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2807
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/mimir-openshift-experimental-ingester', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-ingester', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'podManagementPolicy': 'Parallel', 'replicas': 3, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'ingester'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-ingester-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'ingester', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'ingester', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=ingester', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2590
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/mimir-openshift-experimental-store-gateway', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'mimir-openshift-experimental-store-gateway', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'store-gateway'}}, 'updateStrategy': {'type': 'RollingUpdate'}, 'serviceName': 'mimir-openshift-experimental-store-gateway-headless', 'volumeClaimTemplates': [{'metadata': {'name': 'storage'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'store-gateway', 'app.kubernetes.io/part-of': 'memberlist'}, 'annotations': {'checksum/config': 'a2c70438bfa8a3c2f33fc9f09f2be00852336ba9ebb102453038b6a5e5312ec7'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {}, 'initContainers': [], 'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchExpressions': [{'key': 'target', 'operator': 'In', 'values': ['store-gateway']}]}, 'topologyKey': 'kubernetes.io/hostname'}]}}, 'tolerations': [], 'terminationGracePeriodSeconds': 240, 'volumes': [{'name': 'config', 'secret': {'secretName': 'mimir-openshift-experimental-config'}}, {'name': 'runtime-config', 'configMap': {'name': 'mimir-openshift-experimental-runtime'}}], 'containers': [{'name': 'store-gateway', 'image': 'grafana/mimir:2.0.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['-target=store-gateway', '-config.file=/etc/mimir/mimir.yaml'], 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/mimir'}, {'name': 'runtime-config', 'mountPath': '/var/mimir'}, {'name': 'storage', 'mountPath': '/data'}], 'ports': [{'name': 'http-metrics', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'grpc', 'containerPort': 9095, 'protocol': 'TCP'}, {'name': 'memberlist', 'containerPort': 7946, 'protocol': 'TCP'}], 'livenessProbe': None, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 'http-metrics'}, 'initialDelaySeconds': 60}, 'resources': {'requests': {'cpu': '100m', 'memory': '512Mi'}}, 'securityContext': {'readOnlyRootFilesystem': True}, 'env': None}]}}}}",2811
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Job/mimir-openshift-experimental-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Job/mimir-openshift-experimental-minio-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
mimir-openshift-experimental,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/mimir-openshift-experimental-nginx', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Job/mimir-openshift-experimental-make-bucket-job', '/metadata']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/mimir-openshift-experimental-minio', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': '100%', 'maxUnavailable': 0}}, 'selector': {'matchLabels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}}, 'template': {'metadata': {'name': 'mimir-openshift-experimental-minio', 'labels': {'app': 'minio', 'release': 'mimir-openshift-experimental'}, 'annotations': {'checksum/secrets': '438e8e2b58b0c45dbacb109c7855d8857c97c55f97eca9c0e3bf5653bc841eec', 'checksum/config': '63d74c681cf27f816db7ef76eaabfd0d523841e91357b2d6177a53c8fe1ad575'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'fsGroup': 1000}, 'containers': [{'name': 'minio', 'image': 'minio/minio:RELEASE.2021-02-14T04-01-33Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-ce', '/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export'], 'volumeMounts': [{'name': 'export', 'mountPath': '/export'}], 'ports': [{'name': 'http', 'containerPort': 9000}], 'env': [{'name': 'MINIO_ACCESS_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'accesskey'}}}, {'name': 'MINIO_SECRET_KEY', 'valueFrom': {'secretKeyRef': {'name': 'mimir-openshift-experimental-minio', 'key': 'secretkey'}}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}], 'volumes': [{'name': 'export', 'persistentVolumeClaim': {'claimName': 'mimir-openshift-experimental-minio'}}, {'name': 'minio-user', 'secret': {'secretName': 'mimir-openshift-experimental-minio'}}]}}}}",1765
mimir-openshift-experimental,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/mimir-openshift-experimental-nginx', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mimir-openshift-experimental-nginx', 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/component': 'nginx'}}, 'template': {'metadata': {'annotations': {'checksum/config': '606e59aa9156bae1a2100042a6319463a7a72a31a020c74ff263fa2f2b78c706'}, 'labels': {'helm.sh/chart': 'mimir-openshift-experimental-2.1.0', 'app.kubernetes.io/name': 'mimir', 'app.kubernetes.io/instance': 'mimir-openshift-experimental', 'app.kubernetes.io/version': '2.0.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'nginx'}}, 'spec': {'serviceAccountName': 'mimir-service-account', 'securityContext': {'fsGroup': 101, 'runAsGroup': 101, 'runAsNonRoot': True, 'runAsUser': 101}, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'nginx', 'image': 'docker.io/nginxinc/nginx-unprivileged:1.19-alpine', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http-metric', 'containerPort': 8080, 'protocol': 'TCP'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http-metric'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True}, 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'docker-entrypoint-d-override', 'mountPath': '/docker-entrypoint.d'}], 'resources': {}}], 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'component', 'operator': 'In', 'values': ['nginx']}]}, 'topologyKey': 'failure-domain.beta.kubernetes.io/zone'}}]}}, 'volumes': [{'name': 'config', 'configMap': {'name': 'mimir-openshift-experimental-nginx'}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'docker-entrypoint-d-override', 'emptyDir': {}}]}}}}",2363
mimir-openshift-experimental,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Job/mimir-openshift-experimental-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-make-bucket-job', 'namespace': 'default', 'labels': {'app': 'mimir-openshift-experimental-make-bucket-job', 'chart': 'mimir-openshift-experimental-2.1.0', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'mimir-openshift-experimental-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1102
mimir-openshift-experimental,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Job/mimir-openshift-experimental-minio-make-bucket-job', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'mimir-openshift-experimental-minio-make-bucket-job', 'labels': {'app': 'minio-make-bucket-job', 'chart': 'minio-8.0.10', 'release': 'mimir-openshift-experimental', 'heritage': 'Helm'}, 'annotations': {'helm.sh/hook': 'post-install,post-upgrade', 'helm.sh/hook-delete-policy': 'hook-succeeded,before-hook-creation'}}, 'spec': {'template': {'metadata': {'labels': {'app': 'minio-job', 'release': 'mimir-openshift-experimental'}}, 'spec': {'restartPolicy': 'OnFailure', 'volumes': [{'name': 'minio-configuration', 'projected': {'sources': [{'configMap': {'name': 'mimir-openshift-experimental-minio'}}, {'secret': {'name': 'mimir-openshift-experimental-minio'}}]}}], 'serviceAccountName': 'mimir-service-account', 'containers': [{'name': 'minio-mc', 'image': 'minio/mc:RELEASE.2021-02-14T04-28-06Z', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '/config/initialize'], 'env': [{'name': 'MINIO_ENDPOINT', 'value': 'mimir-openshift-experimental-minio'}, {'name': 'MINIO_PORT', 'value': '9000'}], 'volumeMounts': [{'name': 'minio-configuration', 'mountPath': '/config'}], 'resources': {'requests': {'memory': '128Mi'}}}]}}}}",1194
helmchart,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/helmchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/helmchart-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/helmchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/helmchart-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/helmchart-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/helmchart-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/helmchart-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/helmchart', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/helmchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/helmchart-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
helmchart,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/helmchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'helmchart', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart'}}, 'spec': {'serviceAccountName': 'helmchart', 'securityContext': {}, 'containers': [{'name': 'helmchart', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",950
helmchart,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/helmchart-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'helmchart-test-connection', 'labels': {'helm.sh/chart': 'helmchart-0.1.0', 'app.kubernetes.io/name': 'helmchart', 'app.kubernetes.io/instance': 'helmchart', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['helmchart:80']}], 'restartPolicy': 'Never'}}",473
flagsmith,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/flagsmith-flagsmith-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/flagsmith-flagsmith-frontend', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/flagsmith-postgresql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/flagsmith-init', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/flagsmith-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['StatefulSet/flagsmith-postgresql', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/flagsmith-init', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/flagsmith-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/flagsmith-init', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/flagsmith-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/flagsmith-flagsmith-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/flagsmith-flagsmith-frontend', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/flagsmith-postgresql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/flagsmith-init', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/flagsmith-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/flagsmith-postgresql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/flagsmith-init', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/flagsmith-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/flagsmith-init', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/flagsmith-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/flagsmith-flagsmith-api', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/flagsmith-flagsmith-frontend', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/flagsmith-init', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/flagsmith-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
flagsmith,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/flagsmith-postgresql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/flagsmith-flagsmith-api', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-api', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': '3405267d2b43abfc1cd449a36ea406de95863d624acff350a2c93ac4b7c61382'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'api', 'org.oneacrefund.instance': 'flagsmith-flagsmith-api'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-db', 'image': 'jwilder/dockerize:0.6.1', 'args': ['-wait', 'tcp://flagsmith-postgresql.default.svc:5432', '-timeout', '300s']}, {'name': 'init-conf', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'command': ['bash', '-c', 'if [ ! -f /cache/common.py ]; then\n  cp /app/src/app/settings/common.py /cache/\n  cat /config/*.py >> /cache/common.py\nfi\n'], 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache', 'subPath': 'config'}, {'name': 'config', 'mountPath': '/config', 'readOnly': True}]}], 'containers': [{'name': 'api', 'image': 'flagsmith/flagsmith-api:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/app/src/app/settings/common.py', 'subPath': 'config/common.py'}, {'name': 'cache-volume', 'mountPath': '/app/src/static', 'subPath': 'static'}], 'env': [{'name': 'ADMIN_USERNAME', 'value': 'admin'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}, {'name': 'DJANGO_DB_HOST', 'value': 'flagsmith-postgresql.default.svc'}, {'name': 'DJANGO_DB_NAME', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_USER', 'value': 'flagsmith'}, {'name': 'DJANGO_DB_PORT', 'value': '5432'}, {'name': 'DJANGO_ALLOWED_HOSTS', 'value': '*'}, {'name': 'DJANGO_CSRF_TRUSTED_ORIGINS', 'value': '""example.com""'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}], 'ports': [{'containerPort': 8000}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 10, 'periodSeconds': 5, 'failureThreshold': 15}, 'livenessProbe': {'tcpSocket': {'port': 8000}, 'initialDelaySeconds': 60, 'periodSeconds': 5, 'failureThreshold': 5}}], 'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'flagsmith-conf'}}]}}}}",2559
flagsmith,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/flagsmith-flagsmith-frontend', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'flagsmith-flagsmith-frontend', 'namespace': 'default', 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'template': {'metadata': {'annotations': {'checksum/secrets': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'org.oneacrefund.project': 'flagsmith', 'org.oneacrefund.app': 'frontend', 'org.oneacrefund.instance': 'flagsmith-flagsmith-frontend'}}, 'spec': {'securityContext': {'runAsGroup': 1000, 'runAsUser': 1000}, 'initContainers': [{'name': 'wait-api', 'image': 'jwilder/dockerize', 'imagePullPolicy': 'IfNotPresent', 'args': ['-wait', 'http://flagsmith-api.default.svc:8000', '-timeout', '300s']}], 'containers': [{'name': 'frontend', 'image': 'flagsmith/flagsmith-frontend:v2.6.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'API_URL', 'value': 'https://example.com/api/v1/'}, {'name': 'ASSET_URL', 'value': 'https://example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith-frontend'}}], 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': '200m', 'memory': '200Mi'}, 'requests': {'cpu': '50m', 'memory': '100Mi'}}, 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 20, 'periodSeconds': 5, 'failureThreshold': 20}, 'livenessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 600, 'periodSeconds': 5, 'failureThreshold': 5}}]}}}}",1624
flagsmith,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/flagsmith-postgresql', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'flagsmith-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'replicas': 1, 'serviceName': 'flagsmith-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'flagsmith-postgresql', 'labels': {'app.kubernetes.io/name': 'postgresql', 'helm.sh/chart': 'postgresql-11.6.26', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'serviceAccountName': 'default', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/instance': 'flagsmith', 'app.kubernetes.io/component': 'primary'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'hostNetwork': False, 'hostIPC': False, 'initContainers': None, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:14.4.0-debian-11-r23', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'flagsmith-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}, 'storageClassName': 'standard'}}]}}",3536
flagsmith,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Pod/flagsmith-init', '/metadata']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-init', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'post-install,post-upgrade'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'init', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '# Wait for API to be up\ntimeout -t 300 sh -c ""until http --ignore-stdin --check-status ""$API_HOME""; do echo Retrying; sleep 2; done; echo API up""\necho Init users...\nhttp --ignore-stdin --check-status ""$API_HOME/users/init/""\n'], 'env': [{'name': 'API_HOME', 'value': 'http://flagsmith-api.default.svc:8000/api/v1'}, {'name': 'ADMIN_EMAIL', 'value': 'admin@example.com'}], 'envFrom': [{'secretRef': {'name': 'flagsmith-flagsmith'}}]}]}}",755
flagsmith,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Pod/flagsmith-test', '/metadata']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'flagsmith-test', 'namespace': 'default', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'test-http', 'image': 'blacktop/httpie', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-ce', 'http --print bh --ignore-stdin --check-status ""http://flagsmith-api.default.svc:8000/api/v1/""\nhttp --print h --ignore-stdin --check-status ""http://flagsmith-frontend.default.svc:8080/""\n']}]}}",503
oauth2-proxy,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/oauth2-proxy', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/oauth2-proxy', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/oauth2-proxy', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/oauth2-proxy', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
oauth2-proxy,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/oauth2-proxy', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'oauth2-proxy', 'chart': 'oauth2-proxy-6.0.8', 'heritage': 'Helm', 'release': 'oauth2-proxy'}, 'name': 'oauth2-proxy'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'template': {'metadata': {'annotations': {'checksum/config': '14de59cd59786037884253a3468d2b873b842f3615862f4c601e3baae2c673d3', 'checksum/config-emails': '01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b', 'checksum/secret': 'bf69f5759396c6ed8c897537e527e6c10c97971e611f9d923c402befa0556d94', 'checksum/google-secret': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, 'labels': {'app': 'oauth2-proxy', 'release': 'oauth2-proxy'}}, 'spec': {'serviceAccountName': 'oauth2-proxy', 'containers': [{'name': 'oauth2-proxy', 'image': 'quay.io/oauth2-proxy/oauth2-proxy:v7.6.0@sha256:dcb6ff8dd21bf3058f6a22c6fa385fa5b897a9cd3914c88a2cc2bb0a85f8065d', 'imagePullPolicy': 'IfNotPresent', 'args': ['--http-address=0.0.0.0:4180', '--config=/etc/oauth2_proxy/oauth2_proxy.cfg'], 'env': [{'name': 'OAUTH2_PROXY_CLIENT_ID', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-id'}}}, {'name': 'OAUTH2_PROXY_CLIENT_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'client-secret'}}}, {'name': 'OAUTH2_PROXY_COOKIE_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'oauth2-proxy', 'key': 'cookie-secret'}}}], 'ports': [{'containerPort': 4180, 'name': 'http', 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1}, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 'http', 'scheme': 'HTTP'}, 'initialDelaySeconds': 0, 'timeoutSeconds': 1, 'successThreshold': 1, 'periodSeconds': 10}, 'resources': {}, 'volumeMounts': [{'mountPath': '/etc/oauth2_proxy', 'name': 'configmain'}]}], 'volumes': [{'configMap': {'defaultMode': 420, 'name': 'oauth2-proxy'}, 'name': 'configmain'}], 'tolerations': []}}}}",2059
ussigw-configuration,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/configuration', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/configuration', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/configuration', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/configuration', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/configuration', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
ussigw-configuration,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/configuration', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'configuration', 'labels': {'app': 'configuration'}}, 'spec': {'replicas': 3, 'selector': {'matchLabels': {'app': 'configuration'}}, 'template': {'metadata': {'labels': {'app': 'configuration'}}, 'spec': {'containers': [{'name': 'configuration', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-conf-configmap'}}], 'ports': [{'containerPort': 8880}], 'volumeMounts': [{'name': 'ussigw-conf-properties', 'mountPath': '/space/ussigw/properties/configuration', 'readOnly': True}, {'name': 'ussigw-conf-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-conf-properties', 'configMap': {'name': 'ussigw-conf-properties-configmap'}}, {'name': 'ussigw-conf-data', 'configMap': {'name': 'ussigw-conf-data-configmap'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-configuration-log'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1217
ussigw-configuration,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-configuration:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",280
pyspark-notebook,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/pyspark-notebook', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
pyspark-notebook,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/pyspark-notebook', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
pyspark-notebook,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/pyspark-notebook', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
pyspark-notebook,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['StatefulSet/pyspark-notebook', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'pyspark-notebook', 'labels': {'helm.sh/chart': 'pyspark-notebook-0.2.2', 'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'pyspark-notebook-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'pyspark-notebook-notebooks'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '10Gi'}}, 'storageClassName': None, 'volumeMode': 'Filesystem'}}], 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pyspark-notebook', 'app.kubernetes.io/instance': 'pyspark-notebook'}}, 'spec': {'terminationGracePeriodSeconds': 30, 'serviceAccountName': 'pyspark-notebook', 'securityContext': {'fsGroup': 100, 'runAsUser': 1000}, 'volumes': None, 'containers': [{'name': 'pyspark-notebook', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'jupyter/pyspark-notebook:spark-3.1.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['start.sh'], 'args': ['jupyter', 'lab'], 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}, {'name': 'blockmanager', 'containerPort': 7777, 'protocol': 'TCP'}, {'name': 'driver', 'containerPort': 2222, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {'limits': {'cpu': '2000m', 'memory': '16Gi'}, 'requests': {'cpu': '1000m', 'memory': '2Gi'}}, 'volumeMounts': [{'name': 'pyspark-notebook-notebooks', 'mountPath': '/home/jovyan/work/'}], 'env': None}]}}}}",1938
thingsboard,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/thingsboard-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/thingsboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/thingsboard-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/thingsboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/thingsboard-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/thingsboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/thingsboard-rabbitmq', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['StatefulSet/thingsboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['StatefulSet/thingsboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
thingsboard,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/thingsboard-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard-rabbitmq', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'thingsboard-rabbitmq-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 1, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rabbitmq', 'helm.sh/chart': 'rabbitmq-8.11.9', 'app.kubernetes.io/instance': 'thingsboard', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/config': '0188d0665c5f5976a6f3451e36b51ab6f1c62d0b71352df36ad93dc6a604b83a', 'checksum/secret': 'b21cc980060497f7d27c091360b0305077b534a9e112c48c9e0f174ef23b6928'}}, 'spec': {'serviceAccountName': 'thingsboard-rabbitmq', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'runAsUser': 1001}, 'terminationGracePeriodSeconds': 120, 'containers': [{'name': 'rabbitmq', 'image': 'docker.io/bitnami/rabbitmq:3.8.14-debian-10-r24', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_IP', 'valueFrom': {'fieldRef': {'fieldPath': 'status.podIP'}}}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'thingsboard-rabbitmq-headless'}, {'name': 'K8S_ADDRESS_TYPE', 'value': 'hostname'}, {'name': 'RABBITMQ_FORCE_BOOT', 'value': 'no'}, {'name': 'RABBITMQ_NODE_NAME', 'value': 'rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'K8S_HOSTNAME_SUFFIX', 'value': '.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'RABBITMQ_MNESIA_DIR', 'value': '/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)'}, {'name': 'RABBITMQ_LDAP_ENABLE', 'value': 'no'}, {'name': 'RABBITMQ_LOGS', 'value': '-'}, {'name': 'RABBITMQ_ULIMIT_NOFILES', 'value': '65536'}, {'name': 'RABBITMQ_USE_LONGNAME', 'value': 'true'}, {'name': 'RABBITMQ_ERL_COOKIE', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-erlang-cookie'}}}, {'name': 'RABBITMQ_LOAD_DEFINITIONS', 'value': 'no'}, {'name': 'RABBITMQ_SECURE_PASSWORD', 'value': 'yes'}, {'name': 'RABBITMQ_USERNAME', 'value': 'admin'}, {'name': 'RABBITMQ_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'thingsboard-rabbitmq', 'key': 'rabbitmq-password'}}}, {'name': 'RABBITMQ_PLUGINS', 'value': 'rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap'}], 'ports': [{'name': 'amqp', 'containerPort': 5672}, {'name': 'dist', 'containerPort': 25672}, {'name': 'stats', 'containerPort': 15672}, {'name': 'epmd', 'containerPort': 4369}], 'livenessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q ping']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['/bin/bash', '-ec', 'rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms']}, 'initialDelaySeconds': 10, 'periodSeconds': 30, 'timeoutSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'resources': {'limits': {}, 'requests': {}}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-ec', 'if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t ""120"" -d  ""false""\nelse\n    rabbitmqctl stop_app\nfi\n']}}}, 'volumeMounts': [{'name': 'configuration', 'mountPath': '/bitnami/rabbitmq/conf'}, {'name': 'data', 'mountPath': '/bitnami/rabbitmq/mnesia'}]}], 'volumes': [{'name': 'configuration', 'configMap': {'name': 'thingsboard-rabbitmq-config', 'items': [{'key': 'rabbitmq.conf', 'path': 'rabbitmq.conf'}]}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'rabbitmq', 'app.kubernetes.io/instance': 'thingsboard'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",4611
thingsboard,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/thingsboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'thingsboard', 'labels': {'app': 'soprism', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'replicas': 1, 'serviceName': 'thingsboard', 'selector': {'matchLabels': {'app': 'thingsboard', 'release': 'thingsboard'}}, 'template': {'metadata': {'labels': {'app': 'thingsboard', 'chart': 'thingsboard-0.1.2', 'release': 'thingsboard', 'heritage': 'Helm'}}, 'spec': {'containers': [{'name': 'thingsboard', 'securityContext': {}, 'image': 'thingsboard/tb-postgres', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'mqtt', 'containerPort': 1883, 'protocol': 'TCP'}, {'name': 'coap', 'containerPort': 5683, 'protocol': 'UDP'}], 'env': [{'name': 'TB_QUEUE_TYPE', 'value': 'rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_USERNAME', 'value': 'admin'}, {'name': 'TB_QUEUE_RABBIT_MQ_PASSWORD', 'value': 'password1'}, {'name': 'TB_QUEUE_RABBIT_MQ_HOST', 'value': 'thingsboard-rabbitmq'}, {'name': 'TB_QUEUE_RABBIT_MQ_PORT', 'value': '5672'}], 'readinessProbe': {'exec': {'command': ['ls']}, 'initialDelaySeconds': 40, 'periodSeconds': 7}, 'resources': {}}]}}}}",1215
myfirstchart,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/myfirstchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/myfirstchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/myfirstchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/myfirstchart', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
myfirstchart,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/myfirstchart', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'myfirstchart', 'labels': {'helm.sh/chart': 'myfirstchart-0.2.0', 'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart', 'app.kubernetes.io/version': '0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'myfirstchart', 'app.kubernetes.io/instance': 'myfirstchart'}}, 'spec': {'securityContext': {}, 'containers': [{'name': 'myfirstchart', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kubenginxhelm:0.2.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",970
traefik-hub,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/traefik-hub', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-hub', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}, 'strategy': {'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}, 'type': 'RollingUpdate'}, 'minReadySeconds': 0, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/path': '/metrics', 'prometheus.io/port': '9100'}, 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'traefik-hub', 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'name', 'operator': 'In', 'values': ['traefik']}]}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'topologySpreadConstraints': [{'maxSkew': 2, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'ScheduleAnyway', 'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}}], 'terminationGracePeriodSeconds': 30, 'hostNetwork': False, 'priorityClassName': None, 'automountServiceAccountToken': True, 'containers': [{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}], 'securityContext': {'fsGroup': 65532}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}]}}}}",3777
traefik-hub,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/traefik-hub', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-hub', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}, 'strategy': {'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}, 'type': 'RollingUpdate'}, 'minReadySeconds': 0, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/path': '/metrics', 'prometheus.io/port': '9100'}, 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'traefik-hub', 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'name', 'operator': 'In', 'values': ['traefik']}]}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'topologySpreadConstraints': [{'maxSkew': 2, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'ScheduleAnyway', 'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}}], 'terminationGracePeriodSeconds': 30, 'hostNetwork': False, 'priorityClassName': None, 'automountServiceAccountToken': True, 'containers': [{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}], 'securityContext': {'fsGroup': 65532}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}]}}}}",3777
traefik-hub,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/traefik-hub', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-hub', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}, 'strategy': {'rollingUpdate': {'maxSurge': 1, 'maxUnavailable': 0}, 'type': 'RollingUpdate'}, 'minReadySeconds': 0, 'template': {'metadata': {'annotations': {'prometheus.io/scrape': 'true', 'prometheus.io/path': '/metrics', 'prometheus.io/port': '9100'}, 'labels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default', 'helm.sh/chart': 'traefik-hub-4.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'traefik-hub', 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchExpressions': [{'key': 'name', 'operator': 'In', 'values': ['traefik']}]}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'topologySpreadConstraints': [{'maxSkew': 2, 'topologyKey': 'topology.kubernetes.io/zone', 'whenUnsatisfiable': 'ScheduleAnyway', 'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'traefik-hub', 'app.kubernetes.io/instance': 'traefik-hub-default'}}}], 'terminationGracePeriodSeconds': 30, 'hostNetwork': False, 'priorityClassName': None, 'automountServiceAccountToken': True, 'containers': [{'image': 'ghcr.io/traefik/traefik-hub:v2.11.0', 'imagePullPolicy': 'IfNotPresent', 'name': 'traefik', 'args': ['ic', '--entrypoints.metrics.address=:9100', '--entrypoints.traefik.address=:9000', '--entrypoints.web.address=:8000', '--entrypoints.websecure.address=:8443', '--entrypoints.websecure.http.tls=true', '--hub.admission.listenAddr=:7500', '--hub.token=$(HUB_TOKEN)', '--metrics.prometheus.entryPoint=metrics', '--ping.entrypoint=traefik', '--providers.kubernetescrd.allowCrossNamespace=true', '--providers.kubernetescrd.allowEmptyServices=true', '--providers.kubernetescrd.allowExternalNameServices=true', '--providers.kubernetesingress.allowEmptyServices=true', '--providers.kubernetesingress.allowExternalNameServices=true'], 'env': [{'name': 'HUB_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'hub-agent-token', 'key': 'token'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 1, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000, 'scheme': 'HTTP'}, 'failureThreshold': 3, 'initialDelaySeconds': 2, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 2}, 'ports': [{'name': 'admission', 'containerPort': 7500, 'protocol': 'TCP'}, {'name': 'web', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'containerPort': 8443, 'protocol': 'TCP'}, {'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9100, 'protocol': 'TCP'}], 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/var/lib/traefik'}, {'name': 'tmp', 'mountPath': '/tmp'}]}], 'securityContext': {'fsGroup': 65532}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}]}}}}",3777
ussigw-core,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/core', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/core', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/core', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/core', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/core', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
ussigw-core,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/core', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'core', 'labels': {'app': 'core'}}, 'spec': {'replicas': 4, 'selector': {'matchLabels': {'app': 'core'}}, 'template': {'metadata': {'labels': {'app': 'core'}}, 'spec': {'containers': [{'name': 'core', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'envFrom': [{'configMapRef': {'name': 'ussigw-core-configmap'}}], 'ports': [{'containerPort': 8098}], 'volumeMounts': [{'name': 'ussigw-core-properties', 'mountPath': '/space/ussigw/properties/core', 'readOnly': True}, {'name': 'ussigw-cdr', 'mountPath': '/space/ussigw/cdr', 'readOnly': False}, {'name': 'ussigw-es-cdr', 'mountPath': '/space/edr/ussigw/logstash-main/spill', 'readOnly': False}, {'name': 'ussigw-log', 'mountPath': '/space/ussigw/log', 'readOnly': False}, {'name': 'ussigw-core-data', 'mountPath': '/space/ussigw', 'readOnly': True}, {'name': 'ussigw-alarm', 'mountPath': '/space/ussigw/alarm', 'readOnly': False}]}], 'volumes': [{'name': 'ussigw-core-properties', 'configMap': {'name': 'ussigw-core-properties-configmap'}}, {'name': 'ussigw-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-cdr'}}, {'name': 'ussigw-es-cdr', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-es-cdr'}}, {'name': 'ussigw-log', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-core-log'}}, {'name': 'ussigw-core-data', 'configMap': {'name': 'ussigw-core-data-configmap'}}, {'name': 'ussigw-alarm', 'persistentVolumeClaim': {'claimName': 'pvc-ussigw-alarm'}}]}}}}",1502
ussigw-core,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/dummy-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'dummy-test', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'echo', 'image': 'docker.io/gurolakman/ussigw-core:1.0.4', 'command': ['sleep'], 'args': ['30']}], 'restartPolicy': 'Never'}}",271
kubeauth.io,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/kubeauth-controller', '/spec']",{},38927
kubeauth.io,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/kubeauth-metrics', '/spec']",{},38927
kubeauth.io,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/kubeauth-server', '/spec']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/kubeauth-controller', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/kubeauth-metrics', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/kubeauth-monitoring', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/kubeauth-server', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/kubeauth-controller', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/kubeauth-metrics', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/kubeauth-monitoring', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/kubeauth-server', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/kubeauth-controller', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/kubeauth-metrics', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/kubeauth-monitoring', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/kubeauth-server', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/kubeauth-controller', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/kubeauth-metrics', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/kubeauth-monitoring', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/kubeauth-server', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/kubeauth-controller', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/kubeauth-metrics', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/kubeauth-monitoring', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/kubeauth-server', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['Deployment/kubeauth-controller', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['Deployment/kubeauth-metrics', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['Deployment/kubeauth-monitoring', '/spec/template/spec/containers/0']",{},38927
kubeauth.io,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['Deployment/kubeauth-server', '/spec/template/spec/containers/0']",{},38927
traefik-forward-auth-openid,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/traefik-forward-auth-openid', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
traefik-forward-auth-openid,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/traefik-forward-auth-openid', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
traefik-forward-auth-openid,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/traefik-forward-auth-openid', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
traefik-forward-auth-openid,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/traefik-forward-auth-openid', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'traefik-forward-auth-openid', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/version': 'latest', 'helm.sh/chart': 'traefik-forward-auth-openid-1.0.1'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'traefik-forward-auth-openid', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'traefik-forward-auth-openid', 'app.kubernetes.io/name': 'traefik-forward-auth-openid'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'containers': [{'env': [{'name': 'TZ', 'value': 'UTC'}], 'envFrom': [{'configMapRef': {'name': 'traefik-forward-auth-openid'}}, {'secretRef': {'name': 'traefik-forward-auth-openid'}}], 'image': 'thomseddon/traefik-forward-auth:latest', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 4181, 'name': 'http'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}, 'resources': {'limits': {'cpu': '100m', 'memory': '10Mi'}}, 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65534, 'runAsNonRoot': True, 'runAsUser': 65534}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 4181}, 'timeoutSeconds': 1}}]}}}}",2039
rclone,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['CronJob/rclone', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['CronJob/rclone', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['CronJob/rclone', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['CronJob/rclone', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['CronJob/rclone', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
rclone,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['CronJob/rclone', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'rclone'}, 'spec': {'schedule': '0 0/12 * * *', 'successfulJobsHistoryLimit': 8, 'failedJobsHistoryLimit': 5, 'concurrencyPolicy': 'Forbid', 'startingDeadlineSeconds': 43200, 'jobTemplate': {'spec': {'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'rclone', 'app.kubernetes.io/instance': 'rclone'}}, 'spec': {'restartPolicy': 'Never', 'containers': [{'name': 'rclone', 'image': 'rclone/rclone:1.57.0', 'imagePullPolicy': 'IfNotPresent', 'args': ['--config', '/config/rclone/rclone.conf', '--progress', 'copy', '', ''], 'resources': {}, 'volumeMounts': [{'mountPath': '/config/rclone/rclone.conf', 'name': 'rclone-config', 'subPath': 'rclone.conf'}]}], 'volumes': [{'name': 'rclone-config', 'configMap': {'name': 'rclone-rclone-config'}}]}}}}}}",825
meerschaum,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/meerschaum', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/meerschaum', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/meerschaum', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/meerschaum', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
meerschaum,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['Deployment/meerschaum', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'meerschaum', 'labels': {'helm.sh/chart': 'meerschaum-0.2.0', 'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum', 'app.kubernetes.io/version': '2.8.4', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'meerschaum', 'app.kubernetes.io/instance': 'meerschaum'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000, 'runAsGroup': 1000}, 'containers': [{'args': ['start', 'api', '--production', '--port', '8000'], 'env': [{'name': 'MRSM_CONFIG', 'value': '{""meerschaum"":{""api_instance"":""sql:prod"",""connectors"":{""sql"":{""prod"":{""uri"":""sqlite:////meerschaum/sqlite/prod.db""}}},""instance"":""sql:prod""}}'}], 'image': 'bmeares/meerschaum:2.8.4', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'httpGet': {'path': '/healthcheck', 'port': 8000, 'httpHeaders': [{'name': 'Host', 'value': '127.0.0.1'}]}, 'initialDelaySeconds': 30, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 1, 'failureThreshold': 6}, 'name': 'meerschaum', 'ports': [{'containerPort': 8000, 'hostPort': 8000, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'mountPath': '/meerschaum', 'name': 'meerschaum-data'}], 'securityContext': {'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'volumes': [{'name': 'meerschaum-data', 'persistentVolumeClaim': {'claimName': 'meerschaum'}}]}}}, 'status': {}}",1887
ed-cron,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['CronJob/ed-cron', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['CronJob/ed-cron', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['CronJob/ed-cron', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['CronJob/ed-cron', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['CronJob/ed-cron', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['CronJob/ed-cron', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
ed-cron,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['CronJob/ed-cron', '/spec/jobTemplate/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'CronJob', 'metadata': {'name': 'ed-cron', 'annotations': {'checksum/config': 'f81ce2fa86e318c531b044a5445fe66f973da49ffe9d752b84063f1c98877450'}, 'labels': {'helm.sh/chart': 'ed-cron-0.2.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'schedule': '0 * * * *', 'jobTemplate': {'spec': {'template': {'spec': {'restartPolicy': 'OnFailure', 'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'hello-world:latest', 'envFrom': [{'secretRef': {'name': 'ed-cron-env'}}]}]}}}}}}",530
pages,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/contract-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/pages-test-dbconnect-passtest', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/pages-api-test-getmessage', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Job/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/pages-pages-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/contract-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/pages-test-dbconnect-passtest', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/pages-api-test-getmessage', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Job/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/contract-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/pages-api-test-getmessage', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/contract-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/pages-test-dbconnect-passtest', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/pages-api-test-getmessage', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Job/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['Deployment/pages-pages-api', '/spec/template/spec/volumes/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/pages-pages-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/contract-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/pages-test-dbconnect-passtest', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/pages-api-test-getmessage', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Job/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/pages-pages-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/contract-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/pages-test-dbconnect-passtest', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/pages-api-test-getmessage', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Job/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}}, 'spec': {'selector': {'matchLabels': {'app': 'pages-mysql'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'pages-mysql'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'mysql', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'MYSQL_SERVICE_HOST', 'value': 'mysql'}, {'name': 'MYSQL_SERVICE_PORT', 'value': '3306'}, {'name': 'MYSQL_DATABASE', 'value': 'pages'}], 'ports': [{'containerPort': 3306}], 'volumeMounts': [{'name': 'mysql-persistent-storage', 'mountPath': '/var/lib/mysql'}]}], 'volumes': [{'name': 'mysql-persistent-storage', 'persistentVolumeClaim': {'claimName': 'pages-mysql'}}]}}}}",870
pages,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/pages-pages-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
pages,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/contract-test', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'contracts-pages-api', 'helm': 'test'}, 'name': 'contract-test', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'name': 'postman-test', 'image': 'dellcloud/newman:latest', 'command': ['newman', 'run', 'https://cloud-native-labs.s3.ap-south-1.amazonaws.com/J21/labguide/pages-testsuite.json'], 'args': ['--env-var', 'BASE_URL=pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",498
pages,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/pages-test-dbconnect-passtest', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'dbconnect-pages-api', 'helm': 'test'}, 'name': 'pages-test-dbconnect-passtest', 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'image': 'mysql:8.0', 'name': 'pages-test-pass', 'imagePullPolicy': 'Always', 'command': ['/bin/bash'], 'args': ['-c', ""while true; do (mysql -u root -h pages-mysql pages -ppassword  -e 'show tables;' > logs.txt);count=$(cat logs.txt | grep '[p]ages' | wc -l);if [[ $count -gt 0 ]]; then echo 'Found'; exit 0;else echo 'Not Found';exit 1;fi;done""]}], 'restartPolicy': 'Never'}}",592
pages,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/pages-api-test-getmessage', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'labels': {'app': 'message-pages-api', 'helm': 'test'}, 'name': 'pages-api-test-getmessage', 'annotations': {'helm.sh/hook': 'test-success'}}, 'spec': {'containers': [{'image': 'curlimages/curl', 'name': 'pages-api-test', 'imagePullPolicy': 'IfNotPresent', 'command': ['/bin/sh', '-c'], 'args': ['curl  http://pages-pages-api.default.svc.cluster.local:8080']}], 'restartPolicy': 'Never'}}",437
pages,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Job/pages-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pages-mysql', 'labels': {'app': 'pages-mysql'}, 'annotations': {'helm.sh/hook': 'post-install', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'backoffLimit': 16, 'template': {'spec': {'containers': [{'name': 'mysql', 'image': 'flyway/flyway:6.4.4', 'imagePullPolicy': 'IfNotPresent', 'args': ['info', 'migrate', 'info'], 'env': [{'name': 'FLYWAY_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'FLYWAY_USER', 'value': 'root'}, {'name': 'FLYWAY_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}, {'name': 'FLYWAY_PLACEHOLDER_REPLACEMENT', 'value': 'true'}, {'name': 'FLYWAY_PLACEHOLDERS_USERNAME', 'valueFrom': {'configMapKeyRef': {'name': 'pages-mysql', 'key': 'spring.datasource.username'}}}, {'name': 'FLYWAY_PLACEHOLDERS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-mysql', 'key': 'password'}}}], 'volumeMounts': [{'mountPath': '/flyway/sql', 'name': 'sql'}]}], 'volumes': [{'name': 'sql', 'configMap': {'name': 'pages-mysql'}}], 'restartPolicy': 'Never'}}}}",1097
pages,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/pages-pages-api', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'pages-pages-api'}, 'name': 'pages-pages-api'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'pages-pages-api'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxSurge': 2, 'maxUnavailable': 0}}, 'template': {'metadata': {'labels': {'app': 'pages-pages-api'}}, 'spec': {'containers': [{'image': 'dellcloud/pages:monitor', 'name': 'pages-api', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 8080}], 'env': [{'name': 'PAGE_CONTENT', 'valueFrom': {'configMapKeyRef': {'name': 'pages-api', 'key': 'PAGE_CONTENT'}}}, {'name': 'SPRING_DATASOURCE_URL', 'value': 'jdbc:mysql://pages-mysql/pages'}, {'name': 'SPRING_DATASOURCE_USERNAME', 'value': 'root'}, {'name': 'SPRING_DATASOURCE_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pages-pages-api', 'key': 'password'}}}, {'name': 'DEBUG', 'value': 'true'}, {'name': 'LOGGING_FILE_NAME', 'value': 'camden/logs/app.log'}, {'name': 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB', 'value': 'debug'}, {'name': 'LOGGING_LEVEL_ROOT', 'value': 'debug'}, {'name': 'MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE', 'value': '*'}], 'volumeMounts': [{'name': 'node-dir', 'mountPath': '/default'}], 'readinessProbe': {'tcpSocket': {'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}, 'livenessProbe': {'httpGet': {'path': '/actuator/health', 'port': 8080}, 'initialDelaySeconds': 15, 'periodSeconds': 30}}], 'volumes': [{'name': 'node-dir', 'hostPath': {'path': '/default'}}]}}}}",1533
ed-nginx,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['DaemonSet/nginx-ingress', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['DaemonSet/nginx-ingress', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['DaemonSet/nginx-ingress', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['DaemonSet/nginx-ingress', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['DaemonSet/nginx-ingress', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
ed-nginx,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['DaemonSet/nginx-ingress', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'nginx-ingress', 'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ingress-nginx', 'app.kubernetes.io/part-of': 'ingress-nginx'}, 'annotations': {'prometheus.io/port': '10254', 'prometheus.io/scrape': 'true'}}, 'spec': {'terminationGracePeriodSeconds': 300, 'serviceAccountName': 'nginx-ingress', 'dnsPolicy': 'ClusterFirstWithHostNet', 'hostNetwork': False, 'containers': [{'name': 'nginx-ingress-controller', 'image': 'k8s.gcr.io/ingress-nginx/controller:v1.1.0', 'args': ['/nginx-ingress-controller', '--election-id=ingress-controller-leader-nginx', '--controller-class=k8s.io/ingress-nginx', '--configmap=$(POD_NAMESPACE)/ingress-nginx-configuration', '--tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services', '--udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services', '--annotations-prefix=nginx.ingress.kubernetes.io'], 'securityContext': {'allowPrivilegeEscalation': True, 'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'runAsUser': 101}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}], 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}], 'livenessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}, 'readinessProbe': {'failureThreshold': 3, 'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 10}}]}}}}",1988
terraform-enterprise,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/terraform-enterprise', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/terraform-enterprise', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/terraform-enterprise', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/terraform-enterprise', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/terraform-enterprise', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['Deployment/terraform-enterprise', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/terraform-enterprise', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
terraform-enterprise,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/terraform-enterprise', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'terraform-enterprise', 'namespace': 'default', 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'terraform-enterprise'}}, 'template': {'metadata': {'annotations': {'checksum/env-config': 'b2ef3e2ce07af2e1b955cd9ce75b2667efa93387af3f8246ceab14dff50a4cf4', 'checksum/secrets': '1bd9e6733ace006d9f1954d17e71c413d914628246e870c7e3f27c533a072ea0'}, 'labels': {'app': 'terraform-enterprise'}}, 'spec': {'nodeSelector': {}, 'affinity': {}, 'tolerations': [], 'securityContext': {}, 'volumes': [{'name': 'certificates', 'secret': {'secretName': 'terraform-enterprise-certificates'}}], 'imagePullSecrets': [{'name': 'terraform-enterprise'}], 'serviceAccountName': 'default', 'initContainers': None, 'containers': [{'name': 'terraform-enterprise', 'image': 'images.releases.hashicorp.com/hashicorp/terraform-enterprise:<vYYYYMM-#>', 'imagePullPolicy': 'Always', 'securityContext': {}, 'envFrom': [{'configMapRef': {'name': 'terraform-enterprise-env-config'}}, {'secretRef': {'name': 'terraform-enterprise-env-secrets'}}], 'readinessProbe': {'httpGet': {'path': '/_health_check', 'port': 8080, 'scheme': 'HTTP'}}, 'resources': {'requests': {'cpu': '750m', 'memory': '2500Mi'}}, 'volumeMounts': [{'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/cert.pem', 'subPath': 'tls.crt'}, {'name': 'certificates', 'mountPath': '/etc/ssl/private/terraform-enterprise/key.pem', 'subPath': 'tls.key'}], 'ports': [{'containerPort': 8080}, {'containerPort': 8443}]}]}}}}",1596
ed-traefik2,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['DaemonSet/traefik', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'traefik', 'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'serviceAccountName': 'traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}], 'volumes': [{'name': 'data', 'emptyDir': {}}], 'securityContext': {'fsGroup': 65532}}}}}",1797
ed-traefik2,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['DaemonSet/traefik', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'DaemonSet', 'metadata': {'name': 'traefik', 'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'traefik', 'app.kubernetes.io/instance': 'traefik'}}, 'spec': {'serviceAccountName': 'traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'traefik', 'image': 'docker.io/traefik:2.5.6', 'resources': None, 'readinessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 1, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'livenessProbe': {'httpGet': {'path': '/ping', 'port': 9000}, 'failureThreshold': 3, 'initialDelaySeconds': 10, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5}, 'ports': [{'name': 'traefik', 'containerPort': 9000, 'protocol': 'TCP'}, {'name': 'web', 'hostPort': 80, 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'websecure', 'hostPort': 443, 'containerPort': 8443, 'protocol': 'TCP'}], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 65532, 'runAsNonRoot': True, 'runAsUser': 65532}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}], 'args': ['--global.checknewversion', '--global.sendanonymoususage', '--entryPoints.traefik.address=:9000', '--entryPoints.web.address=:8000', '--entryPoints.websecure.address=:8443', '--api.dashboard=true', '--ping=true', '--providers.kubernetescrd', '--providers.kubernetesingress']}], 'volumes': [{'name': 'data', 'emptyDir': {}}], 'securityContext': {'fsGroup': 65532}}}}}",1797
vault-dev,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/vault-dev', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['StatefulSet/vault-dev', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/vault-dev', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/vault-dev', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
vault-dev,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/vault-dev', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'vault-dev', 'labels': {'release': 'vault-dev'}}, 'spec': {'serviceName': 'vault-dev', 'selector': {'matchLabels': {'release': 'vault-dev'}}, 'template': {'metadata': {'labels': {'release': 'vault-dev'}}, 'spec': {'containers': [{'name': 'main', 'image': 'hashicorp/vault', 'command': ['vault', 'server', '-dev', '-dev-root-token-id', 'root', '-dev-listen-address', '0.0.0.0:8200'], 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 8200}], 'livenessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}, 'readinessProbe': {'httpGet': {'path': '/v1/sys/health', 'port': 8200}}}]}}}}",667
akaunting,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/akaunting', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/akaunting-mariadb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/akaunting', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/akaunting-mariadb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/akaunting', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/akaunting-mariadb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/akaunting-mariadb', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
akaunting,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/akaunting', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/akaunting', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akaunting', 'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/version': '3.0.15', 'helm.sh/chart': 'akaunting-1.0.3'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/name': 'akaunting', 'app.kubernetes.io/instance': 'akaunting'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'main', 'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'akaunting'}}, 'spec': {'enableServiceLinks': True, 'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'hostIPC': False, 'hostNetwork': False, 'hostPID': False, 'dnsPolicy': 'ClusterFirst', 'initContainers': [{'command': ['sh', '-c', 'if [ ! -d /pvc/* ]; then cp -R /var/www/html/* /pvc ; fi'], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'name': 'copyfiles', 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'containers': [{'env': [{'name': 'ADMIN_EMAIL', 'value': 'me@company.com'}, {'name': 'ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'admin-password', 'name': 'akaunting-secrets'}}}, {'name': 'APP_URL', 'value': 'http://localhost'}, {'name': 'COMPANY_EMAIL', 'value': 'my@company.com'}, {'name': 'COMPANY_NAME', 'value': 'My Company'}, {'name': 'DB_HOST', 'value': 'akaunting-mariadb'}, {'name': 'DB_NAME', 'value': 'akaunting'}, {'name': 'DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'mariadb-password', 'name': 'mariadb-secrets'}}}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_PREFIX', 'value': 'asd_'}, {'name': 'DB_USERNAME', 'value': 'akaunting'}, {'name': 'LOCALE', 'value': 'en-US'}, {'name': 'TZ', 'value': 'UTC'}], 'image': 'akaunting/akaunting:3.0.15', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'name': 'main', 'ports': [{'containerPort': 80, 'name': 'http', 'protocol': 'TCP'}], 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 0, 'periodSeconds': 10, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 0, 'periodSeconds': 5, 'tcpSocket': {'port': 80}, 'timeoutSeconds': 1}, 'volumeMounts': [{'mountPath': '/var/www/html', 'name': 'data'}]}], 'volumes': [{'name': 'data', 'persistentVolumeClaim': {'claimName': 'akaunting-data'}}]}}}}",2666
akaunting,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/akaunting-mariadb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'akaunting-mariadb', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 10, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'akaunting-mariadb', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '419e0525662334e5aa0d4be9bd2cb1f313586f2ab01fb57c2251d6a86adff132'}, 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/version': '11.1.2', 'helm.sh/chart': 'mariadb-14.0.3', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'akaunting-mariadb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'containers': [{'name': 'mariadb', 'image': 'docker.io/bitnami/mariadb:11.1.2-debian-11-r1', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'privileged': False, 'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MARIADB_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-root-password'}}}, {'name': 'MARIADB_USER', 'value': 'akaunting'}, {'name': 'MARIADB_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'mariadb-secrets', 'key': 'mariadb-password'}}}, {'name': 'MARIADB_DATABASE', 'value': 'akaunting'}], 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 120, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MARIADB_ROOT_PASSWORD:-}""\nif [[ -f ""${MARIADB_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MARIADB_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mariadb'}, {'name': 'custom-init-scripts', 'mountPath': '/docker-entrypoint-initdb.d'}, {'name': 'config', 'mountPath': '/opt/bitnami/mariadb/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'akaunting-mariadb'}}, {'name': 'custom-init-scripts', 'configMap': {'name': 'akaunting-mariadb-init-scripts'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/instance': 'akaunting', 'app.kubernetes.io/name': 'mariadb', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3690
stock-x,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/stock-x', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/stock-x', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/stock-x', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/stock-x', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/stock-x', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/stock-x', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
stock-x,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/stock-x', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'stock-x', 'labels': {'helm.sh/chart': 'stock-x-0.1.5', 'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x', 'app.kubernetes.io/version': '0.0.12', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'stock-x', 'app.kubernetes.io/instance': 'stock-x'}}, 'spec': {'serviceAccountName': 'stock-x-dev', 'securityContext': {}, 'containers': [{'name': 'stock-x', 'securityContext': {}, 'image': 'aerox86/stock-x:latest-stable', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {}}]}}}}",830
umsapp,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/umsapp', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['StatefulSet/umsapp-mysql', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/umsapp-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/umsapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/umsapp-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/umsapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/umsapp-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/umsapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/umsapp-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/umsapp-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/umsapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/umsapp-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/umsapp-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/umsapp-mysql', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/umsapp-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/umsapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/umsapp-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/umsapp-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
umsapp,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/umsapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'umsapp', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp'}}, 'spec': {'serviceAccountName': 'umsapp', 'securityContext': {}, 'initContainers': [{'name': 'init-db', 'image': 'busybox:1.31', 'command': ['sh', '-c', 'echo -e ""Checking for the availability of MySQL Server deployment""; while ! nc -z umsapp-mysql 3306; do sleep 1; printf ""-""; done; echo -e ""  >> MySQL DB Server has started"";']}], 'containers': [{'name': 'umsapp', 'securityContext': {}, 'image': 'ghcr.io/stacksimplify/kube-usermgmt-webapp:1.0.0-mysqldb', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'DB_HOSTNAME', 'value': 'umsapp-mysql'}, {'name': 'DB_PORT', 'value': '3306'}, {'name': 'DB_NAME', 'value': 'webappdb'}, {'name': 'DB_USERNAME', 'value': 'root'}, {'name': 'DB_PASSWORD', 'value': 'dbpassword11'}], 'resources': {}}]}}}}",1342
umsapp,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/umsapp-mysql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'umsapp-mysql', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'podManagementPolicy': '', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}}, 'serviceName': 'umsapp-mysql', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'annotations': {'checksum/configuration': '7a71e10e53e9bb10b3df05dfa4e37dec044a2885b27bcb68d501dcb0f36c1849'}, 'labels': {'app.kubernetes.io/name': 'mysql', 'helm.sh/chart': 'mysql-9.10.8', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'umsapp-mysql', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001}, 'initContainers': None, 'containers': [{'name': 'mysql', 'image': 'docker.io/bitnami/mysql:8.0.34-debian-11-r4', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MYSQL_ROOT_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'umsapp-mysql', 'key': 'mysql-root-password'}}}, {'name': 'MYSQL_DATABASE', 'value': 'webappdb'}], 'envFrom': None, 'ports': [{'name': 'mysql', 'containerPort': 3306}], 'livenessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'readinessProbe': {'failureThreshold': 3, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'startupProbe': {'failureThreshold': 10, 'initialDelaySeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 1, 'exec': {'command': ['/bin/bash', '-ec', 'password_aux=""${MYSQL_ROOT_PASSWORD:-}""\nif [[ -f ""${MYSQL_ROOT_PASSWORD_FILE:-}"" ]]; then\n    password_aux=$(cat ""$MYSQL_ROOT_PASSWORD_FILE"")\nfi\nmysqladmin status -uroot -p""${password_aux}""\n']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/bitnami/mysql'}, {'name': 'config', 'mountPath': '/opt/bitnami/mysql/conf/my.cnf', 'subPath': 'my.cnf'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'umsapp-mysql'}}]}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data', 'labels': {'app.kubernetes.io/name': 'mysql', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/component': 'primary'}, 'annotations': None}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '8Gi'}}}}]}}",3537
umsapp,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/umsapp-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'umsapp-test-connection', 'labels': {'helm.sh/chart': 'umsapp-1.0.0', 'app.kubernetes.io/name': 'umsapp', 'app.kubernetes.io/instance': 'umsapp', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['umsapp:8080']}], 'restartPolicy': 'Never'}}",459
akto,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/akto-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/akto-testing', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/akto-runtime', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/akto-keel', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/akto-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/akto-testing', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/akto-runtime', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/akto-keel', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/akto-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/akto-testing', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/akto-runtime', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/akto-keel', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/akto-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/akto-testing', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/akto-runtime', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/akto-keel', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/akto-dashboard', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/akto-testing', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/akto-runtime', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
akto,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/akto-keel', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-keel', 'labels': {'app': 'keel', 'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-keel', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'command': ['/bin/keel'], 'env': [{'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'AWS_ACCESS_KEY_ID', 'value': ''}, {'name': 'AWS_SECRET_ACCESS_KEY', 'value': ''}, {'name': 'AWS_REGION', 'value': ''}, {'name': 'WEBHOOK_ENDPOINT', 'value': ''}, {'name': 'MATTERMOST_ENDPOINT', 'value': ''}, {'name': 'HIPCHAT_TOKEN', 'value': ''}, {'name': 'HIPCHAT_CHANNELS', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_CHANNEL', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_BOT_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_USER_NAME', 'value': ''}, {'name': 'HIPCHAT_APPROVALS_PASSWORT', 'value': ''}, {'name': 'NOTIFICATION_LEVEL', 'value': 'info'}, {'name': 'INSECURE_REGISTRY', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'keelhq/keel:latest', 'imagePullPolicy': 'Always', 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 9300}, 'initialDelaySeconds': 30, 'timeoutSeconds': 10}, 'name': 'keel', 'ports': [{'containerPort': 9300}], 'resources': {'limits': {'cpu': '100m', 'memory': '128Mi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}}], 'serviceAccountName': 'akto-keel'}}}}",1650
akto,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/akto-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-dashboard', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-dashboard', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-dashboard:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-dashboard', 'ports': [{'containerPort': 8080}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}]}}}}",1978
akto,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/akto-testing', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-testing', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-testing', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'DASHBOARD'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': 'kafka1:19092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://localhost:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-testing:latest', 'name': 'akto-api-security-testing', 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}, {'name': 'akto-api-security-puppeteer-replay', 'image': 'aktosecurity/akto-puppeteer-replay:latest', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 3000}], 'resources': {'limits': {'cpu': 1, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}], 'restartPolicy': 'Always'}}}}",1912
akto,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/akto-runtime', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'akto-runtime', 'annotations': {'keel.sh/policy': 'force', 'keel.sh/trigger': 'poll', 'keel.sh/match-tag': 'true', 'keel.sh/pollSchedule': '@every 60m'}, 'labels': {'helm.sh/chart': 'akto-0.1.9', 'app.kubernetes.io/name': 'akto', 'app.kubernetes.io/version': '0.1.9', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'template': {'metadata': {'labels': {'app': 'akto-runtime', 'app.kubernetes.io/name': 'akto'}}, 'spec': {'containers': [{'env': [{'name': 'AKTO_ACCOUNT_NAME', 'value': 'Helios'}, {'name': 'IS_KUBERNETES', 'value': 'true'}, {'name': 'AKTO_CONFIG_NAME', 'value': 'staging'}, {'name': 'AKTO_INSTANCE_TYPE', 'value': 'RUNTIME'}, {'name': 'AKTO_KAFKA_BROKER_MAL', 'value': 'localhost:29092'}, {'name': 'AKTO_KAFKA_BROKER_URL', 'value': '127.0.0.1:29092'}, {'name': 'AKTO_KAFKA_GROUP_ID_CONFIG', 'value': 'asdf'}, {'name': 'AKTO_KAFKA_MAX_POLL_RECORDS_CONFIG', 'value': '100'}, {'name': 'AKTO_KAFKA_TOPIC_NAME', 'value': 'akto.api.logs'}, {'name': 'AKTO_TRAFFIC_BATCH_SIZE', 'value': '100'}, {'name': 'AKTO_TRAFFIC_BATCH_TIME_SECS', 'value': '10'}, {'name': 'PUPPETEER_REPLAY_SERVICE_URL', 'value': 'http://akto-puppeteer-replay:3000'}, {'name': 'AKTO_MONGO_CONN', 'value': ''}, {'name': 'USE_HOSTNAME', 'value': 'true'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'public.ecr.aws/aktosecurity/akto-api-security-runtime:latest', 'imagePullPolicy': 'IfNotPresent', 'name': 'akto-api-security-runtime', 'resources': {'limits': {'cpu': 3, 'memory': '8Gi'}, 'requests': {'cpu': 2, 'memory': '4Gi'}}}, {'env': [{'name': 'ZOOKEEPER_CLIENT_PORT', 'value': '2181'}, {'name': 'ZOOKEEPER_SERVERS', 'value': 'zoo1:2888:3888'}, {'name': 'ZOOKEEPER_SERVER_ID', 'value': '1'}, {'name': 'KAFKA_OPTS', 'value': '-Dzookeeper.admin.enableServer=false'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-zookeeper:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'zoo1', 'ports': [{'containerPort': 2181}], 'resources': {'limits': {'cpu': 2, 'memory': '4Gi'}, 'requests': {'cpu': 1, 'memory': '2Gi'}}}, {'env': [{'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'KAFKA_ADVERTISED_LISTENERS', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST://localhost:29092, LISTENER_DOCKER_EXTERNAL_DIFFHOST://akto-runtime.default.svc.cluster.local:9092'}, {'name': 'KAFKA_BROKER_ID', 'value': '1'}, {'name': 'KAFKA_CLEANUP_POLICY', 'value': 'delete'}, {'name': 'KAFKA_CREATE_TOPICS', 'value': 'akto.api.logs:3:3'}, {'name': 'KAFKA_INTER_BROKER_LISTENER_NAME', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST'}, {'name': 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP', 'value': 'LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT'}, {'name': 'KAFKA_LOG_CLEANER_ENABLE', 'value': 'true'}, {'name': 'KAFKA_LOG_RETENTION_BYTES', 'value': '10737418240'}, {'name': 'KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS', 'value': '60000'}, {'name': 'KAFKA_LOG_RETENTION_HOURS', 'value': '5'}, {'name': 'KAFKA_LOG_SEGMENT_BYTES', 'value': '104857600'}, {'name': 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR', 'value': '1'}, {'name': 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR', 'value': '1'}, {'name': 'KAFKA_ZOOKEEPER_CONNECT', 'value': '127.0.0.1:2181'}, {'name': 'KUBERNETES_CLUSTER_DOMAIN', 'value': 'cluster.local'}], 'image': 'confluentinc/cp-kafka:6.2.11-1-ubi8', 'imagePullPolicy': 'IfNotPresent', 'name': 'kafka1', 'ports': [{'containerPort': 9092}, {'containerPort': 19092}, {'containerPort': 29092}, {'containerPort': 9999}], 'resources': {'limits': {'cpu': 2, 'memory': '8Gi'}, 'requests': {'cpu': 1, 'memory': '4Gi'}}}], 'restartPolicy': 'Always'}}}}",3919
ed-traefik,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['DaemonSet/ingress-traefik', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['DaemonSet/ingress-traefik', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['DaemonSet/ingress-traefik', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['DaemonSet/ingress-traefik', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['DaemonSet/ingress-traefik', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['DaemonSet/ingress-traefik', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
ed-traefik,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['DaemonSet/ingress-traefik', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'ingress-traefik', 'labels': {'k8s-app': 'traefik-ingress-lb'}}, 'spec': {'selector': {'matchLabels': {'k8s-app': 'traefik-ingress-lb'}}, 'template': {'metadata': {'labels': {'k8s-app': 'traefik-ingress-lb', 'name': 'ingress-traefik'}}, 'spec': {'serviceAccountName': 'ingress-traefik', 'terminationGracePeriodSeconds': 60, 'hostNetwork': False, 'containers': [{'name': 'ingress-traefik', 'image': 'docker.io/traefik:v1.7.34', 'ports': [{'name': 'http', 'containerPort': 80, 'hostPort': 80}, {'name': 'https', 'containerPort': 443, 'hostPort': 443}, {'name': 'admin', 'containerPort': 8080}], 'args': ['--api', '--kubernetes', '--logLevel=INFO', '--defaultentrypoints=http,https', '--entrypoints=Name:https Address::443 TLS', '--entrypoints=Name:http Address::80'], 'securityContext': {'capabilities': {'drop': ['ALL'], 'add': ['NET_BIND_SERVICE']}}}]}}}}",923
grpc-web,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['Rollout/grpc-web', '/spec/template/spec/containers/0']","{'apiVersion': 'argoproj.io/v1alpha1', 'kind': 'Rollout', 'metadata': {'name': 'grpc-web', 'labels': {'app.kubernetes.io/name': 'grpc-web', 'helm.sh/chart': 'grpc-web-0.13.1', 'app.kubernetes.io/instance': 'grpc-web', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': None}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'canary': {'stableService': 'grpc-web', 'canaryService': 'grpc-web-preview', 'minPodsPerReplicaSet': 1, 'dynamicStableScale': True, 'trafficRouting': {'nginx': {'stableIngress': 'grpc-web'}}, 'steps': [{'setWeight': 100}]}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'grpc-web', 'app.kubernetes.io/instance': 'grpc-web'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'grpc-web', 'helm.sh/chart': 'grpc-web-0.13.1', 'app.kubernetes.io/instance': 'grpc-web', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'grpc-web', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': True, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/api-grpc-web:0.17.93', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 7070, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9090, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'AUTH_URI', 'value': 'https://shortlink.best/api/auth'}, {'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'SPICE_DB_API', 'value': 'shortlink.spicedb-operator:50051'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}], 'resources': {'limits': {'cpu': '200m', 'memory': '128Mi'}, 'requests': {'cpu': '15m', 'memory': '64Mi'}}}]}}}}",2590
blackduck-alert,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/blackduck-alert-cfssl', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/blackduck-alert', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/blackduck-alert-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/blackduck-alert-cfssl', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/blackduck-alert', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/blackduck-alert-postgres', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/blackduck-alert-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/blackduck-alert-cfssl', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/blackduck-alert', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/blackduck-alert-postgres', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/blackduck-alert-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/blackduck-alert-cfssl', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/blackduck-alert', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/blackduck-alert-postgres', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/blackduck-alert-rabbitmq', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/blackduck-alert-postgres', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/blackduck-alert-cfssl', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/blackduck-alert', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/blackduck-alert-postgres', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/blackduck-alert-rabbitmq', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
blackduck-alert,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/blackduck-alert-cfssl', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-cfssl', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'cfssl', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-resources': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453'}, 'name': 'blackduck-alert-cfssl'}, 'spec': {'containers': [{'envFrom': [{'configMapRef': {'name': 'blackduck-alert-environs'}}], 'image': 'docker.io/blackducksoftware/blackduck-cfssl:1.0.1', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'http://localhost:8888/api/v1/cfssl/scaninfo']}, 'failureThreshold': 10, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-cfssl', 'ports': [{'containerPort': 8888, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '640Mi'}}, 'volumeMounts': [{'mountPath': '/etc/cfssl', 'name': 'dir-cfssl'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'emptyDir': {}, 'name': 'dir-cfssl'}]}}}}",1269
blackduck-alert,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/blackduck-alert', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'alert', 'name': 'blackduck-alert'}, 'annotations': {'checksum/alert-environ-configmap': '2f1e2c2e2f6788d75f79f645c6e8727add7af085b6b1a7e58363306292e2e453', 'checksum/alert-environ-secret': 'd9446329430c6931649b15d8bb39709c594ffdbf05296ac2207a3dcabce49343', 'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac', 'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert'}, 'spec': {'containers': [{'env': [{'name': 'RUN_SECRETS_DIR', 'value': '/tmp/secrets'}, {'name': 'ALERT_DB_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'ALERT_DB_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-db-config'}}, {'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/usr/local/bin/docker-healthcheck.sh', 'https://localhost:8443/alert/api/about']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert', 'ports': [{'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '2560Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/alert/alert-config', 'name': 'dir-alert'}]}], 'dnsPolicy': 'ClusterFirst', 'volumes': [{'name': 'dir-alert', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-pvc'}}]}}}}",2188
blackduck-alert,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/blackduck-alert-postgres', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-postgres', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'postgres'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'postgres', 'name': 'blackduck-alert'}, 'annotations': {'checksum/postgres-config': '442906e0745ebaad61c457d495e6599d6149c52da0cf8f9802d1ebd2d8d0d9ac'}, 'name': 'blackduck-alert-postgres'}, 'spec': {'containers': [{'env': [{'name': 'POSTGRES_MAX_CONNECTIONS', 'value': '300'}, {'name': 'POSTGRES_SHARED_BUFFERS', 'value': '1024MB'}, {'name': 'POSTGRES_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_ADMIN_USER', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_ADMIN_USERNAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_DB', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_NAME', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_HOST', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_HOST', 'name': 'blackduck-alert-db-config'}}}, {'name': 'ALERT_DB_PORT', 'valueFrom': {'configMapKeyRef': {'key': 'ALERT_DB_PORT', 'name': 'blackduck-alert-db-config'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_USER_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}, {'name': 'POSTGRES_ADMIN_PASSWORD', 'valueFrom': {'secretKeyRef': {'key': 'ALERT_POSTGRES_ADMIN_PASSWORD_FILE', 'name': 'blackduck-alert-db-creds'}}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-db:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/alertdb-healthcheck.sh']}, 'initialDelaySeconds': 120, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'lifecycle': {'preStop': {'exec': {'command': ['/bin/bash', '-c', 'LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D ""${PGDATA}"" -l logfile stop']}}}, 'name': 'blackduck-alert-postgres', 'ports': [{'containerPort': 5432, 'protocol': 'TCP'}], 'readinessProbe': {'exec': {'command': ['/bin/bash', '-c', '/usr/local/bin/pg_isready -U ""${POSTGRES_USER}"" -d ""${POSTGRES_DB}"" -h localhost']}, 'initialDelaySeconds': 30, 'periodSeconds': 30, 'timeoutSeconds': 5, 'failureThreshold': 3, 'successThreshold': 1}, 'resources': {}, 'volumeMounts': [{'mountPath': '/var/lib/postgresql/data', 'name': 'alert-postgres-data-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-postgres-data-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-postgres'}}]}}}}",2846
blackduck-alert,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/blackduck-alert-rabbitmq', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'name': 'blackduck-alert-rabbitmq', 'namespace': 'default'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}}, 'strategy': {'type': 'Recreate'}, 'template': {'metadata': {'labels': {'app': 'alert', 'component': 'rabbitmq', 'name': 'blackduck-alert'}, 'annotations': {'checksum/rabbitmq-config': 'e56e42371b8ed85d51a8afe5aa64472b3515c244b26faf6f340f62402cefb49b'}, 'name': 'blackduck-alert-rabbitmq'}, 'spec': {'containers': [{'env': None, 'envFrom': [{'configMapRef': {'name': 'blackduck-alert-rabbitmq-config'}}, {'configMapRef': {'name': 'blackduck-alert-environs'}}, {'secretRef': {'name': 'blackduck-alert-environs-secret'}}], 'image': 'docker.io/blackducksoftware/blackduck-alert-rabbitmq:8.0.1', 'imagePullPolicy': 'IfNotPresent', 'livenessProbe': {'exec': {'command': ['rabbitmq-diagnostics', '-q', 'status']}, 'failureThreshold': 5, 'initialDelaySeconds': 240, 'periodSeconds': 30, 'timeoutSeconds': 10}, 'name': 'blackduck-alert-rabbitmq', 'ports': [{'containerPort': 5672, 'protocol': 'TCP'}], 'resources': {'limits': {'memory': '1024Mi'}}, 'volumeMounts': [{'mountPath': '/opt/blackduck/rabbitmq/logs', 'name': 'alert-rabbitmq-volume'}]}], 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'blackduck-alert-service-account', 'restartPolicy': 'Always', 'volumes': [{'name': 'alert-rabbitmq-volume', 'persistentVolumeClaim': {'claimName': 'blackduck-alert-rabbitmq-pvc'}}]}}}}",1600
zipkin,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/zipkin-collector', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/zipkin-ui', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/zipkin-collector', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/zipkin-ui', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/zipkin-collector', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/zipkin-ui', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/zipkin-collector', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/zipkin-ui', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
zipkin,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/zipkin-collector', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-collector', 'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'collector', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-collector', 'containers': [{'name': 'zipkin-collector', 'image': 'openzipkin/zipkin:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'QUERY_PORT', 'value': '9411'}], 'ports': [{'name': 'http', 'containerPort': 9411, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1100
zipkin,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/zipkin-ui', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'zipkin-ui', 'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/version': '2.21.0', 'helm.sh/chart': 'zipkin-0.2.0', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/component': 'ui', 'app.kubernetes.io/name': 'zipkin', 'app.kubernetes.io/instance': 'zipkin'}}, 'spec': {'serviceAccountName': 'zipkin-ui', 'volumes': [{'name': 'config', 'configMap': {'name': 'zipkin-ui'}}], 'containers': [{'name': 'zipkin-ui', 'image': 'openzipkin/zipkin-ui:2.21.0', 'imagePullPolicy': 'IfNotPresent', 'volumeMounts': [{'name': 'config', 'mountPath': '/etc/nginx/conf.d/zipkin.conf.template', 'subPath': 'zipkin.conf.template'}], 'env': [{'name': 'ZIPKIN_BASE_URL', 'value': 'http://zipkin-collector:9411'}], 'ports': [{'name': 'http', 'containerPort': 8080, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",1287
ndb-operator,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/ndb-operator-webhook-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/ndb-operator-app', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/ndb-operator-webhook-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/ndb-operator-app', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/ndb-operator-webhook-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/ndb-operator-app', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/ndb-operator-webhook-server', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/ndb-operator-app', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/ndb-operator-app', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/ndb-operator-app', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/ndb-operator-webhook-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/ndb-operator-app', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
ndb-operator,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/ndb-operator-webhook-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-webhook-server', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator-webhook-deployment'}}, 'spec': {'selector': {'matchLabels': {'app': 'ndb-operator-webhook-server'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator-webhook-server'}}, 'spec': {'serviceAccountName': 'ndb-operator-webhook-sa', 'containers': [{'name': 'ndb-operator-webhook', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9443}], 'command': ['ndb-operator-webhook'], 'args': ['-service=ndb-operator-webhook-service'], 'readinessProbe': {'httpGet': {'path': '/health', 'port': 9443, 'scheme': 'HTTPS'}}}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",851
ndb-operator,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/ndb-operator-app', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ndb-operator-app', 'namespace': 'default', 'labels': {'release': '9.1.0-1.6.0', 'app': 'ndb-operator'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'ndb-operator'}}, 'template': {'metadata': {'labels': {'app': 'ndb-operator'}}, 'spec': {'serviceAccountName': 'ndb-operator-app-sa', 'hostname': 'ndb-operator-pod', 'subdomain': 'ndb-operator-svc', 'containers': [{'name': 'ndb-operator-controller', 'image': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['ndb-operator'], 'args': ['-cluster-scoped=true'], 'ports': [{'containerPort': 1186}], 'env': [{'name': 'NDB_OPERATOR_IMAGE', 'value': 'container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0'}, {'name': 'NDB_OPERATOR_IMAGE_PULL_SECRET_NAME', 'value': None}]}]}}, 'strategy': {'rollingUpdate': {'maxUnavailable': 0}}}}",948
scaleway-csi,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/scaleway-csi-controller', '/spec']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['DaemonSet/scaleway-csi-node', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/scaleway-csi-controller', '/spec/template/spec/containers/0']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['DaemonSet/scaleway-csi-node', '/spec/template/spec/containers/1']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/scaleway-csi-controller', '/spec/template/spec/containers/1']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['DaemonSet/scaleway-csi-node', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/scaleway-csi-controller', '/spec/template/spec/containers/0']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['DaemonSet/scaleway-csi-node', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/scaleway-csi-controller', '/spec/template/spec/containers/0']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['DaemonSet/scaleway-csi-node', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/scaleway-csi-controller', '/spec/template/spec/containers/0']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
scaleway-csi,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['DaemonSet/scaleway-csi-node', '/spec/template/spec/volumes/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['DaemonSet/scaleway-csi-node', '/spec/template/spec/containers/0']","{'kind': 'DaemonSet', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-node', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-node'}}, 'spec': {'securityContext': {}, 'serviceAccount': 'scaleway-csi', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'priorityClassName': 'system-node-critical', 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--v=4', '--mode=node'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///csi/csi.sock'}], 'securityContext': {'privileged': True}, 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}, {'name': 'kubelet-dir', 'mountPath': '/var/lib/kubelet', 'mountPropagation': 'Bidirectional'}, {'name': 'device-dir', 'mountPath': '/dev'}]}, {'name': 'csi-node-driver-registrar', 'image': 'registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.11.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=2', '--csi-address=$(CSI_ADDRESS)', '--kubelet-registration-path=$(KUBELET_REGISTRATION_PATH)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}, {'name': 'KUBELET_REGISTRATION_PATH', 'value': '/var/lib/kubelet/plugins/csi.scaleway.com/csi.sock'}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'spec.nodeName'}}}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi/'}, {'name': 'registration-dir', 'mountPath': '/registration/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'plugin-dir', 'mountPath': '/csi'}]}], 'volumes': [{'name': 'registration-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins_registry/', 'type': 'DirectoryOrCreate'}}, {'name': 'plugin-dir', 'hostPath': {'path': '/var/lib/kubelet/plugins/csi.scaleway.com', 'type': 'DirectoryOrCreate'}}, {'name': 'kubelet-dir', 'hostPath': {'path': '/var/lib/kubelet', 'type': 'Directory'}}, {'name': 'device-dir', 'hostPath': {'path': '/dev'}}]}}}}",2884
scaleway-csi,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/scaleway-csi-controller', '/spec/template/spec/containers/0']","{'kind': 'Deployment', 'apiVersion': 'apps/v1', 'metadata': {'name': 'scaleway-csi-controller', 'labels': {'helm.sh/chart': 'scaleway-csi-0.2.0', 'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app.kubernetes.io/version': 'v0.3.2', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'selector': {'matchLabels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'replicas': 1, 'template': {'metadata': {'annotations': {'checksum/webhook-secret': 'dde3d86de3e9990a52ac6923fb63758d44f0cdbed3a307b26c13609c2df42fbb'}, 'labels': {'app.kubernetes.io/name': 'scaleway-csi', 'app.kubernetes.io/instance': 'scaleway-csi', 'app': 'scaleway-csi-controller'}}, 'spec': {'securityContext': {}, 'priorityClassName': 'system-cluster-critical', 'serviceAccount': 'scaleway-csi', 'initContainers': [{'name': 'migration', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'command': ['/sbs-migration'], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'resources': {}}], 'containers': [{'name': 'scaleway-csi-plugin', 'image': 'scaleway/scaleway-csi:v0.3.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--endpoint=$(CSI_ENDPOINT)', '--mode=controller', '--v=4'], 'env': [{'name': 'CSI_ENDPOINT', 'value': 'unix:///var/lib/csi/sockets/pluginproxy/csi.sock'}], 'envFrom': [{'secretRef': {'name': 'scaleway-csi-secret'}}], 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}], 'resources': {}, 'ports': [{'name': 'healthz', 'containerPort': 9808, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 3, 'periodSeconds': 2, 'failureThreshold': 5}}, {'name': 'csi-provisioner', 'image': 'registry.k8s.io/sig-storage/csi-provisioner:v5.0.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election', '--feature-gates=Topology=true', '--default-fstype=ext4'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-attacher', 'image': 'registry.k8s.io/sig-storage/csi-attacher:v4.6.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'csi-snapshotter', 'image': 'registry.k8s.io/sig-storage/csi-snapshotter:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'snapshot-controller', 'image': 'registry.k8s.io/sig-storage/snapshot-controller:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--leader-election'], 'resources': {}}, {'name': 'csi-resizer', 'image': 'registry.k8s.io/sig-storage/csi-resizer:v1.11.2', 'imagePullPolicy': 'IfNotPresent', 'args': ['--v=5', '--csi-address=$(CSI_ADDRESS)', '--leader-election'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/var/lib/csi/sockets/pluginproxy/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/var/lib/csi/sockets/pluginproxy/'}]}, {'name': 'liveness-probe', 'image': 'registry.k8s.io/sig-storage/livenessprobe:v2.13.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--csi-address=$(CSI_ADDRESS)'], 'env': [{'name': 'CSI_ADDRESS', 'value': '/csi/csi.sock'}], 'resources': {}, 'volumeMounts': [{'name': 'socket-dir', 'mountPath': '/csi'}]}, {'name': 'snapshot-validation', 'image': 'registry.k8s.io/sig-storage/snapshot-validation-webhook:v8.0.1', 'imagePullPolicy': 'IfNotPresent', 'args': ['--tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt', '--tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key'], 'ports': [{'containerPort': 443}], 'resources': {}, 'volumeMounts': [{'name': 'snapshot-validation-webhook-certs', 'mountPath': '/etc/snapshot-validation-webhook/certs', 'readOnly': True}]}], 'volumes': [{'name': 'socket-dir', 'emptyDir': {}}, {'name': 'snapshot-validation-webhook-certs', 'secret': {'secretName': 'scaleway-csi-webhook'}}]}}}}",4566
pgbench,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Job/pgbench', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Job/pgbench', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Job/pgbench', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Job/pgbench', '/metadata']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Job/pgbench', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Job/pgbench', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
pgbench,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Job/pgbench', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'pgbench', 'namespace': 'default', 'labels': {'helm.sh/chart': 'pgbench-0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'template': {'spec': {'initContainers': [{'name': 'wait-for-cnpg', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['sh', '-c', 'until psql -c ""SELECT 1""; do echo \'Waiting for pgbench-rw\' sleep 15; done']}, {'name': 'pgbench-init', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--initialize', '--scale', '1']}], 'containers': [{'name': 'pgbench', 'image': 'ghcr.io/cloudnative-pg/postgresql:14.5', 'env': [{'name': 'PGHOST', 'value': 'pgbench-rw'}, {'name': 'PGUSER', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'username'}}}, {'name': 'PGPASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'pgbench-app', 'key': 'password'}}}], 'command': ['pgbench'], 'args': ['--time', '30', '--client', '1', '--jobs', '1']}], 'restartPolicy': 'Never', 'nodeSelector': {'workload': 'pgbench'}}}}}",1538
blueprint,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/blueprint-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/blueprint-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/blueprint', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/blueprint', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/blueprint-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/blueprint', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/blueprint-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/blueprint', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/blueprint-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/blueprint-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
blueprint,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['Deployment/blueprint', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'blueprint', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'default', 'securityContext': {'fsGroup': 0, 'runAsGroup': 0, 'runAsNonRoot': False, 'runAsUser': 0}, 'containers': [{'name': 'blueprint', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {}, 'privileged': False, 'readOnlyRootFilesystem': False, 'runAsNonRoot': False, 'runAsUser': 0, 'seLinuxOptions': {}}, 'image': 'ghcr.io/zazuko/blueprint:v0.1.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'env': [{'name': 'ENDPOINT_URL', 'value': 'http://example.com/query'}, {'name': 'SPARQL_CONSOLE_URL', 'value': 'http://example.com/sparql/#query'}, {'name': 'GRAPH_EXPLORER_URL', 'value': 'http://example.com/graph-explorer/?resource'}, {'name': 'FULL_TEXT_SEARCH_DIALECT', 'value': 'fuseki'}, {'name': 'NEPTUNE_FTS_ENDPOINT', 'value': ''}]}]}}}}",1659
blueprint,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/blueprint-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'blueprint-test-connection', 'labels': {'helm.sh/chart': 'blueprint-0.0.2', 'app.kubernetes.io/name': 'blueprint', 'app.kubernetes.io/instance': 'blueprint', 'app.kubernetes.io/version': 'v0.1.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['blueprint:80']}], 'restartPolicy': 'Never'}}",473
ed-deployment,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/ed-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/ed-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/ed-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/ed-deployment', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/ed-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/ed-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
ed-deployment,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/ed-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ed-deployment', 'annotations': {'checksum/config': 'a1b0ddad042a2f1b87aa1a70c1008d185aec3ba2ac675e5411e797f82620f0f9'}, 'labels': {'helm.sh/chart': 'ed-deployment-0.1.0', 'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'ed-deployment', 'app.kubernetes.io/instance': 'ed-deployment'}}, 'spec': {'containers': [{'name': 'app', 'imagePullPolicy': 'Always', 'image': 'nginxdemos/hello:plain-text', 'envFrom': [{'secretRef': {'name': 'ed-deployment-env'}}]}]}}}}",819
deploy-elibrary,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/deploy-elibrary-deployment', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/deploy-elibrary-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/deploy-elibrary-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/deploy-elibrary-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/deploy-elibrary-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/deploy-elibrary-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
deploy-elibrary,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/deploy-elibrary-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'deploy-elibrary-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'template': {'metadata': {'labels': {'project': 'deploy-elibrary', 'tier': 'application'}}, 'spec': {'containers': [{'name': 'application', 'image': 'diki180502/educative-2:1', 'imagePullPolicy': 'Always', 'ports': [{'containerPort': 3000}]}]}}}}",454
bipeenhelm-chart,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/webapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/webapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/webapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/webapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/webapp', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/webapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/webapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
bipeenhelm-chart,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/webapp', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'webapp'}, 'spec': {'selector': {'matchLabels': {'app': 'webapp'}}, 'replicas': 1, 'template': {'metadata': {'labels': {'app': 'webapp'}}, 'spec': {'containers': [{'name': 'webapp', 'image': 'richardchesterwood/k8s-fleetman-helm-demo'}]}}}}",309
test-helm-app2,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/test-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/test-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/test-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/test-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/test-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/test-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/test-deployment', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
test-helm-app2,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/test-deployment', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'test-deployment'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'test'}}, 'template': {'metadata': {'labels': {'app': 'test'}}, 'spec': {'containers': [{'name': 'test', 'image': 'asdkant/fastapi-hello-world:latest', 'ports': [{'containerPort': 80}]}]}}}}",339
sorry-cypress,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/sorry-cypress-mongodb-arbiter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/sorry-cypress-mongodb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/sorry-cypress-test-dashboard-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/sorry-cypress-test-director-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/sorry-cypress-test-mongodb-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/sorry-cypress-test-api-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/sorry-cypress-api', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/sorry-cypress-dashboard', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/sorry-cypress-director', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/sorry-cypress-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/sorry-cypress-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/sorry-cypress-director', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/sorry-cypress-test-dashboard-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/sorry-cypress-test-director-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/sorry-cypress-test-mongodb-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/sorry-cypress-test-api-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,datree,CONTAINERS_INCORRECT_KEY_HOSTPORT,check_29,N/A,Prevent containers from insecurely exposing workload,"['StatefulSet/sorry-cypress-mongodb-arbiter', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/sorry-cypress-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/sorry-cypress-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/sorry-cypress-director', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/sorry-cypress-mongodb-arbiter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/sorry-cypress-mongodb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/sorry-cypress-test-dashboard-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/sorry-cypress-test-director-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/sorry-cypress-test-mongodb-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/sorry-cypress-test-api-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['Deployment/sorry-cypress-api', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['Deployment/sorry-cypress-dashboard', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['Deployment/sorry-cypress-director', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/sorry-cypress-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/sorry-cypress-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/sorry-cypress-director', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/sorry-cypress-mongodb-arbiter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/sorry-cypress-mongodb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/sorry-cypress-test-dashboard-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/sorry-cypress-test-director-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/sorry-cypress-test-mongodb-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/sorry-cypress-test-api-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/sorry-cypress-test-dashboard-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/sorry-cypress-test-director-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/sorry-cypress-test-mongodb-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/sorry-cypress-test-api-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/sorry-cypress-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/sorry-cypress-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/sorry-cypress-director', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/sorry-cypress-mongodb-arbiter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/sorry-cypress-test-dashboard-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/sorry-cypress-test-director-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/sorry-cypress-test-mongodb-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/sorry-cypress-test-api-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/sorry-cypress-api', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-api', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'template': {'metadata': {'name': 'sorry-cypress-api', 'labels': {'app': 'sorry-cypress-api'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-api'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'APOLLO_PLAYGROUND', 'value': 'false'}, {'name': 'PAGE_ITEMS_LIMIT', 'value': '10'}, {'name': 'MONGODB_DATABASE', 'value': 'sorry-cypress'}, {'name': 'MONGODB_URI', 'value': 'mongodb://sorry-cypress-mongodb-0:27017'}], 'image': 'agoldis/sorry-cypress-api:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-api', 'ports': [{'containerPort': 4000}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/.well-known/apollo/server-health', 'port': 4000}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1600
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/sorry-cypress-dashboard', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'helm.sh/chart': 'sorry-cypress-1.20.0', 'app.kubernetes.io/name': 'sorry-cypress', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/version': '2.5.11', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'template': {'metadata': {'name': 'sorry-cypress-dashboard', 'labels': {'app': 'sorry-cypress-dashboard'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-dashboard'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'GRAPHQL_SCHEMA_URL', 'value': ''}, {'name': 'PORT', 'value': '8080'}], 'image': 'agoldis/sorry-cypress-dashboard:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-dashboard', 'ports': [{'containerPort': 8080}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 8080}, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 2, 'failureThreshold': 5}, 'resources': {}, 'securityContext': {}}], 'restartPolicy': 'Always', 'serviceAccountName': '', 'volumes': None}}}}",1470
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/sorry-cypress-director', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'sorry-cypress-director'}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'template': {'metadata': {'name': 'sorry-cypress-director', 'labels': {'app': 'sorry-cypress-director'}}, 'spec': {'nodeSelector': {}, 'affinity': {'podAntiAffinity': {'requiredDuringSchedulingIgnoredDuringExecution': [{'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'kubernetes.io/hostname'}], 'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app': 'sorry-cypress-director'}}, 'topologyKey': 'topology.kubernetes.io/zone'}}]}}, 'containers': [{'env': [{'name': 'DASHBOARD_URL', 'value': ''}, {'name': 'ALLOWED_KEYS', 'value': None}, {'name': 'PORT', 'value': '1234'}, {'name': 'EXECUTION_DRIVER', 'value': '../execution/in-memory'}, {'name': 'SCREENSHOTS_DRIVER', 'value': '../screenshots/dummy.driver'}, {'name': 'INACTIVITY_TIMEOUT_SECONDS', 'value': ''}, {'name': 'GITLAB_JOB_RETRIES', 'value': 'false'}, {'name': 'BASE_PATH', 'value': ''}], 'image': 'agoldis/sorry-cypress-director:2.5.11', 'imagePullPolicy': 'Always', 'name': 'sorry-cypress-director', 'ports': [{'containerPort': 1234}], 'resources': {}, 'securityContext': {}, 'readinessProbe': {'httpGet': {'path': '/health-check-db', 'port': 1234}, 'periodSeconds': 5, 'timeoutSeconds': 3, 'successThreshold': 2, 'failureThreshold': 5}}], 'restartPolicy': 'Always', 'volumes': None}}}}",1540
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/sorry-cypress-mongodb-arbiter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/sorry-cypress-mongodb', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/sorry-cypress-test-dashboard-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-dashboard-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-dashboard-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-dashboard:8080']}], 'restartPolicy': 'Never'}}",431
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/sorry-cypress-test-director-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-director-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-director-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-director:1234']}], 'restartPolicy': 'Never'}}",428
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/sorry-cypress-test-mongodb-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-mongodb-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-mongodb-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['sorry-cypress-mongodb-headless:27017']}], 'restartPolicy': 'Never'}}",435
sorry-cypress,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/sorry-cypress-test-api-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'sorry-cypress-test-api-connection', 'labels': {'app.kubernetes.io/name': 'sorry-cypress-test-api-connection'}, 'annotations': {'helm.sh/hook': 'test-success', 'helm.sh/hook-delete-policy': 'hook-succeeded'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget', 'sorry-cypress-api:4000/.well-known/apollo/server-health']}], 'restartPolicy': 'Never'}}",436
sorry-cypress,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/sorry-cypress-mongodb-arbiter', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb-arbiter', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-arbiter-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'arbiter'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'arbiter'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'initContainers': None, 'containers': [{'name': 'mongodb-arbiter', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-arbiter-headless'}, {'name': 'MONGODB_REPLICA_SET_MODE', 'value': 'arbiter'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.sorry-cypress-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'MONGODB_ADVERTISED_HOSTNAME', 'value': '$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'mongodb'}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {}}}]}}}}",2700
sorry-cypress,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/sorry-cypress-mongodb', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'sorry-cypress-mongodb', 'namespace': 'default', 'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceName': 'sorry-cypress-mongodb-headless', 'podManagementPolicy': 'OrderedReady', 'replicas': 2, 'updateStrategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mongodb', 'helm.sh/chart': 'mongodb-10.19.0', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'mongodb'}}, 'spec': {'serviceAccountName': 'sorry-cypress-mongodb', 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'mongodb', 'app.kubernetes.io/instance': 'sorry-cypress', 'app.kubernetes.io/component': 'mongodb'}}, 'namespaces': ['default'], 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'sysctls': []}, 'containers': [{'name': 'mongodb', 'image': 'docker.io/bitnami/mongodb:4.4.6-debian-10-r8', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsNonRoot': True, 'runAsUser': 1001}, 'command': ['/scripts/setup.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MY_POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MY_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.namespace'}}}, {'name': 'K8S_SERVICE_NAME', 'value': 'sorry-cypress-mongodb-headless'}, {'name': 'MONGODB_INITIAL_PRIMARY_HOST', 'value': 'sorry-cypress-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local'}, {'name': 'MONGODB_REPLICA_SET_NAME', 'value': 'rs0'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'yes'}, {'name': 'MONGODB_SYSTEM_LOG_VERBOSITY', 'value': '0'}, {'name': 'MONGODB_DISABLE_SYSTEM_LOG', 'value': 'no'}, {'name': 'MONGODB_DISABLE_JAVASCRIPT', 'value': 'no'}, {'name': 'MONGODB_ENABLE_JOURNAL', 'value': 'yes'}, {'name': 'MONGODB_ENABLE_IPV6', 'value': 'no'}, {'name': 'MONGODB_ENABLE_DIRECTORY_PER_DB', 'value': 'no'}], 'ports': [{'containerPort': 27017, 'name': 'mongodb'}], 'livenessProbe': {'exec': {'command': ['mongo', '--disableImplicitSessions', '--eval', ""db.adminCommand('ping')""]}, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'exec': {'command': ['bash', '-ec', '# Run the proper check depending on the version\n[[ $(mongo --version | grep ""MongoDB shell"") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=""$(get_sematic_version ""$VERSION"" 1)""\nVERSION_MINOR=""$(get_sematic_version ""$VERSION"" 2)""\nVERSION_PATCH=""$(get_sematic_version ""$VERSION"" 3)""\nif [[ ""$VERSION_MAJOR"" -ge 4 ]] && [[ ""$VERSION_MINOR"" -ge 4 ]] && [[ ""$VERSION_PATCH"" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.hello().isWritablePrimary || db.hello().secondary\' | grep -q \'true\'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval \'db.isMaster().ismaster || db.isMaster().secondary\' | grep -q \'true\'\nfi\n']}, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'timeoutSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'resources': {'limits': {}, 'requests': {'cpu': '25m', 'memory': '90Mi'}}, 'volumeMounts': [{'name': 'datadir', 'mountPath': '/bitnami/mongodb', 'subPath': None}, {'name': 'scripts', 'mountPath': '/scripts/setup.sh', 'subPath': 'setup.sh'}]}], 'volumes': [{'name': 'scripts', 'configMap': {'name': 'sorry-cypress-mongodb-scripts', 'defaultMode': 493}}, {'name': 'datadir', 'emptyDir': {}}]}}}}",4077
jellyfin,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/jellyfin-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'jellyfin-test-connection', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}], 'restartPolicy': 'Never', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}}}",854
jellyfin,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/jellyfin-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'jellyfin-test-connection', 'labels': {'app.kubernetes.io/name': 'jellyfin', 'helm.sh/chart': 'jellyfin-3.2.6', 'app.kubernetes.io/instance': 'jellyfin', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'args': ['--timeout=5', '-O/dev/null', 'jellyfin:8096/health'], 'command': ['wget'], 'image': 'busybox:musl', 'resources': {'requests': {'cpu': '10m', 'memory': '25Mi'}, 'limits': {'cpu': '100m', 'memory': '25Mi'}}, 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsNonRoot': True, 'runAsUser': 65534, 'runAsGroup': 65534}}], 'restartPolicy': 'Never', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}}}",854
test0,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/apliakce1', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/apliakce2', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/apliakce1', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/apliakce2', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/apliakce1', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/apliakce2', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/apliakce1', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/apliakce2', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/apliakce1', '/spec/template/spec/containers/0']",{},2541
test0,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/apliakce2', '/spec/template/spec/containers/0']",{},2541
plausible,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/plausible', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Job/plausible-schema', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'plausible-schema', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}, 'annotations': {'helm.sh/hook': 'pre-install,pre-upgrade', 'helm.sh/hook-weight': '-15', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'spec': {'ttlSecondsAfterFinished': 1800, 'activeDeadlineSeconds': 600, 'backoffLimit': 0, 'completions': 1, 'parallelism': 1, 'template': {'metadata': {'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}}, 'spec': {'automountServiceAccountToken': False, 'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'activeDeadlineSeconds': 600, 'restartPolicy': 'Never', 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1697
plausible,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/plausible', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/plausible', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Job/plausible-schema', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'plausible-schema', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}, 'annotations': {'helm.sh/hook': 'pre-install,pre-upgrade', 'helm.sh/hook-weight': '-15', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'spec': {'ttlSecondsAfterFinished': 1800, 'activeDeadlineSeconds': 600, 'backoffLimit': 0, 'completions': 1, 'parallelism': 1, 'template': {'metadata': {'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}}, 'spec': {'automountServiceAccountToken': False, 'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'activeDeadlineSeconds': 600, 'restartPolicy': 'Never', 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1697
plausible,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/plausible', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Job/plausible-schema', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'plausible-schema', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}, 'annotations': {'helm.sh/hook': 'pre-install,pre-upgrade', 'helm.sh/hook-weight': '-15', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'spec': {'ttlSecondsAfterFinished': 1800, 'activeDeadlineSeconds': 600, 'backoffLimit': 0, 'completions': 1, 'parallelism': 1, 'template': {'metadata': {'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}}, 'spec': {'automountServiceAccountToken': False, 'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'activeDeadlineSeconds': 600, 'restartPolicy': 'Never', 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1697
plausible,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/plausible', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'plausible', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'rollingUpdate': {'maxUnavailable': 1}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible'}}, 'template': {'metadata': {'annotations': {'checksum/config': '8e7212ee736fb04c455834c9cd983cd8f283ce4fc22a4f0366523ed76e77f326', 'checksum/envs': '4655ca60a5d5601acb5aba75d022ce25120f762174c89598a758e7a3d0767b66'}, 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'automountServiceAccountToken': True, 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'run'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}, {'name': 'LISTEN_IP', 'value': '0.0.0.0'}, {'name': 'PORT', 'value': '8000'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1823
plausible,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Job/plausible-schema', '/spec/template/spec/containers/0']","{'apiVersion': 'batch/v1', 'kind': 'Job', 'metadata': {'name': 'plausible-schema', 'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}, 'annotations': {'helm.sh/hook': 'pre-install,pre-upgrade', 'helm.sh/hook-weight': '-15', 'helm.sh/hook-delete-policy': 'before-hook-creation'}}, 'spec': {'ttlSecondsAfterFinished': 1800, 'activeDeadlineSeconds': 600, 'backoffLimit': 0, 'completions': 1, 'parallelism': 1, 'template': {'metadata': {'labels': {'helm.sh/chart': 'plausible-0.1.5', 'app.kubernetes.io/name': 'plausible', 'app.kubernetes.io/instance': 'plausible', 'app.kubernetes.io/version': 'v2.1.5', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'schema'}}, 'spec': {'automountServiceAccountToken': False, 'enableServiceLinks': False, 'serviceAccountName': 'plausible', 'activeDeadlineSeconds': 600, 'restartPolicy': 'Never', 'securityContext': {'fsGroup': 999, 'fsGroupChangePolicy': 'OnRootMismatch', 'runAsGroup': 9999, 'runAsNonRoot': True, 'runAsUser': 9999}, 'containers': [{'name': 'plausible-schema', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'image': 'ghcr.io/plausible/community-edition:v2.1.5', 'imagePullPolicy': 'IfNotPresent', 'command': ['/entrypoint.sh', 'db', 'migrate'], 'env': [{'name': 'BASE_URL', 'value': 'https://chart-example.local'}], 'envFrom': [{'secretRef': {'name': 'plausible'}}], 'resources': {'requests': {'cpu': '100m', 'memory': '128Mi'}}}]}}}}",1697
heimdall,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/heimdall', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/heimdall', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/heimdall', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/heimdall', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
heimdall,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/heimdall', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'heimdall', 'labels': {'app.kubernetes.io/instance': 'heimdall', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/version': '2.6.1', 'helm.sh/chart': 'heimdall-8.5.4'}}, 'spec': {'revisionHistoryLimit': 3, 'replicas': 1, 'strategy': {'type': 'Recreate'}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'heimdall', 'app.kubernetes.io/instance': 'heimdall'}}, 'spec': {'serviceAccountName': 'default', 'automountServiceAccountToken': True, 'dnsPolicy': 'ClusterFirst', 'enableServiceLinks': True, 'containers': [{'name': 'heimdall', 'image': 'linuxserver/heimdall:2.6.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'PGID', 'value': '1000'}, {'name': 'PUID', 'value': '1000'}, {'name': 'TZ', 'value': 'UTC'}], 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'readinessProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 3, 'timeoutSeconds': 1, 'periodSeconds': 10}, 'startupProbe': {'tcpSocket': {'port': 80}, 'initialDelaySeconds': 0, 'failureThreshold': 30, 'timeoutSeconds': 1, 'periodSeconds': 5}}]}}}}",1444
timesketch,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/timesketch-opensearch-cluster-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
timesketch,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/timesketch-postgresql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'serviceName': 'timesketch-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'timesketch-postgresql', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'timesketch-postgresql', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'hostNetwork': False, 'hostIPC': False, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'empty-dir', 'emptyDir': {}}, {'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4300
timesketch,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['StatefulSet/timesketch-redis-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'serviceName': 'timesketch-redis-headless', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}, 'annotations': {'checksum/configmap': '86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47', 'checksum/health': 'aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9', 'checksum/scripts': '560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5', 'checksum/secret': 'c477334a4d2db44b2b392d8728df92c05f69f3cda179a4e1cdcb6b58a8165133'}}, 'spec': {'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'serviceAccountName': 'timesketch-redis-master', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'enableServiceLinks': True, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}], 'volumes': [{'name': 'start-scripts', 'configMap': {'name': 'timesketch-redis-scripts', 'defaultMode': 493}}, {'name': 'health', 'configMap': {'name': 'timesketch-redis-health', 'defaultMode': 493}}, {'name': 'config', 'configMap': {'name': 'timesketch-redis-configuration'}}, {'name': 'empty-dir', 'emptyDir': {}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'redis-data', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4315
timesketch,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/timesketch', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/timesketch-redis-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'serviceName': 'timesketch-redis-headless', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}, 'annotations': {'checksum/configmap': '86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47', 'checksum/health': 'aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9', 'checksum/scripts': '560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5', 'checksum/secret': 'c477334a4d2db44b2b392d8728df92c05f69f3cda179a4e1cdcb6b58a8165133'}}, 'spec': {'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'serviceAccountName': 'timesketch-redis-master', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'enableServiceLinks': True, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}], 'volumes': [{'name': 'start-scripts', 'configMap': {'name': 'timesketch-redis-scripts', 'defaultMode': 493}}, {'name': 'health', 'configMap': {'name': 'timesketch-redis-health', 'defaultMode': 493}}, {'name': 'config', 'configMap': {'name': 'timesketch-redis-configuration'}}, {'name': 'empty-dir', 'emptyDir': {}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'redis-data', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4315
timesketch,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/timesketch', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/timesketch-worker', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/timesketch', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['Deployment/timesketch-worker', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/timesketch-postgresql', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'serviceName': 'timesketch-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'timesketch-postgresql', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'timesketch-postgresql', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'hostNetwork': False, 'hostIPC': False, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'empty-dir', 'emptyDir': {}}, {'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4300
timesketch,datree,WORKLOAD_INCORRECT_NAMESPACE_VALUE_DEFAULT,check_26,General Policies,Prevent workload from using the default namespace,"['StatefulSet/timesketch-redis-master', '/metadata']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'serviceName': 'timesketch-redis-headless', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}, 'annotations': {'checksum/configmap': '86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47', 'checksum/health': 'aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9', 'checksum/scripts': '560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5', 'checksum/secret': 'c477334a4d2db44b2b392d8728df92c05f69f3cda179a4e1cdcb6b58a8165133'}}, 'spec': {'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'serviceAccountName': 'timesketch-redis-master', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'enableServiceLinks': True, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}], 'volumes': [{'name': 'start-scripts', 'configMap': {'name': 'timesketch-redis-scripts', 'defaultMode': 493}}, {'name': 'health', 'configMap': {'name': 'timesketch-redis-health', 'defaultMode': 493}}, {'name': 'config', 'configMap': {'name': 'timesketch-redis-configuration'}}, {'name': 'empty-dir', 'emptyDir': {}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'redis-data', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4315
timesketch,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/timesketch', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/timesketch-worker', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['StatefulSet/timesketch-opensearch-cluster-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
timesketch,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/timesketch', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/timesketch-worker', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/timesketch', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/timesketch-worker', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/timesketch-opensearch-cluster-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
timesketch,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/timesketch-postgresql', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-postgresql', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'replicas': 1, 'serviceName': 'timesketch-postgresql-hl', 'updateStrategy': {'rollingUpdate': {}, 'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'template': {'metadata': {'name': 'timesketch-postgresql', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/version': '16.3.0', 'helm.sh/chart': 'postgresql-15.3.2', 'app.kubernetes.io/component': 'primary'}}, 'spec': {'serviceAccountName': 'timesketch-postgresql', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'postgresql', 'app.kubernetes.io/component': 'primary'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'hostNetwork': False, 'hostIPC': False, 'containers': [{'name': 'postgresql', 'image': 'docker.io/bitnami/postgresql:16.3.0-debian-12-r6', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'privileged': False, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'POSTGRESQL_PORT_NUMBER', 'value': '5432'}, {'name': 'POSTGRESQL_VOLUME_DIR', 'value': '/bitnami/postgresql'}, {'name': 'PGDATA', 'value': '/bitnami/postgresql/data'}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}, {'name': 'POSTGRES_DATABASE', 'value': 'timesketch'}, {'name': 'POSTGRESQL_ENABLE_LDAP', 'value': 'no'}, {'name': 'POSTGRESQL_ENABLE_TLS', 'value': 'no'}, {'name': 'POSTGRESQL_LOG_HOSTNAME', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_CONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_LOG_DISCONNECTIONS', 'value': 'false'}, {'name': 'POSTGRESQL_PGAUDIT_LOG_CATALOG', 'value': 'off'}, {'name': 'POSTGRESQL_CLIENT_MIN_MESSAGES', 'value': 'error'}, {'name': 'POSTGRESQL_SHARED_PRELOAD_LIBRARIES', 'value': 'pgaudit'}], 'ports': [{'name': 'tcp-postgresql', 'containerPort': 5432}], 'livenessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432']}}, 'readinessProbe': {'failureThreshold': 6, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'timeoutSeconds': 5, 'exec': {'command': ['/bin/sh', '-c', '-e', 'exec pg_isready -U ""postgres"" -d ""dbname=timesketch"" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n']}}, 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/conf', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/postgresql/tmp', 'subPath': 'app-tmp-dir'}, {'name': 'dshm', 'mountPath': '/dev/shm'}, {'name': 'data', 'mountPath': '/bitnami/postgresql'}]}], 'volumes': [{'name': 'empty-dir', 'emptyDir': {}}, {'name': 'dshm', 'emptyDir': {'medium': 'Memory'}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'data'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4300
timesketch,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/timesketch-redis-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-redis-master', 'namespace': 'default', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'serviceName': 'timesketch-redis-headless', 'updateStrategy': {'type': 'RollingUpdate'}, 'template': {'metadata': {'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/version': '7.2.4', 'helm.sh/chart': 'redis-19.3.2', 'app.kubernetes.io/component': 'master'}, 'annotations': {'checksum/configmap': '86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47', 'checksum/health': 'aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9', 'checksum/scripts': '560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5', 'checksum/secret': 'c477334a4d2db44b2b392d8728df92c05f69f3cda179a4e1cdcb6b58a8165133'}}, 'spec': {'securityContext': {'fsGroup': 1001, 'fsGroupChangePolicy': 'Always', 'supplementalGroups': [], 'sysctls': []}, 'serviceAccountName': 'timesketch-redis-master', 'automountServiceAccountToken': False, 'affinity': {'podAffinity': None, 'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'topologyKey': 'kubernetes.io/hostname'}, 'weight': 1}]}, 'nodeAffinity': None}, 'enableServiceLinks': True, 'terminationGracePeriodSeconds': 30, 'containers': [{'name': 'redis', 'image': 'docker.io/bitnami/redis:7.2.4-debian-12-r16', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'runAsGroup': 1001, 'runAsNonRoot': True, 'runAsUser': 1001, 'seLinuxOptions': {}, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'command': ['/bin/bash'], 'args': ['-c', '/opt/bitnami/scripts/start-scripts/start-master.sh'], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'REDIS_REPLICATION_MODE', 'value': 'master'}, {'name': 'ALLOW_EMPTY_PASSWORD', 'value': 'no'}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'REDIS_TLS_ENABLED', 'value': 'no'}, {'name': 'REDIS_PORT', 'value': '6379'}], 'ports': [{'name': 'redis', 'containerPort': 6379}], 'livenessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 6, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_liveness_local.sh 5']}}, 'readinessProbe': {'initialDelaySeconds': 20, 'periodSeconds': 5, 'timeoutSeconds': 2, 'successThreshold': 1, 'failureThreshold': 5, 'exec': {'command': ['sh', '-c', '/health/ping_readiness_local.sh 1']}}, 'resources': {'limits': {}, 'requests': {}}, 'volumeMounts': [{'name': 'start-scripts', 'mountPath': '/opt/bitnami/scripts/start-scripts'}, {'name': 'health', 'mountPath': '/health'}, {'name': 'redis-data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/opt/bitnami/redis/mounted-etc'}, {'name': 'empty-dir', 'mountPath': '/opt/bitnami/redis/etc/', 'subPath': 'app-conf-dir'}, {'name': 'empty-dir', 'mountPath': '/tmp', 'subPath': 'tmp-dir'}]}], 'volumes': [{'name': 'start-scripts', 'configMap': {'name': 'timesketch-redis-scripts', 'defaultMode': 493}}, {'name': 'health', 'configMap': {'name': 'timesketch-redis-health', 'defaultMode': 493}}, {'name': 'config', 'configMap': {'name': 'timesketch-redis-configuration'}}, {'name': 'empty-dir', 'emptyDir': {}}]}}, 'volumeClaimTemplates': [{'apiVersion': 'v1', 'kind': 'PersistentVolumeClaim', 'metadata': {'name': 'redis-data', 'labels': {'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/name': 'redis', 'app.kubernetes.io/component': 'master'}}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}]}}",4315
timesketch,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/timesketch', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/timesketch-worker', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/timesketch-opensearch-cluster-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
timesketch,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/timesketch', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'frontend', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'frontend', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'frontend', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-web'], 'lifecycle': {'postStart': {'exec': {'command': ['/bin/sh', '-c', 'tsctl create-user timesketch --password $TIMESKETCH_USER']}}}, 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'TIMESKETCH_USER', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-user'}}}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",3146
timesketch,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/timesketch-worker', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'timesketch-worker', 'namespace': 'default', 'labels': {'app.kubernetes.io/component': 'worker', 'helm.sh/chart': 'timesketch-1.0.8', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '20240828', 'app.kubernetes.io/managed-by': 'Helm', 'date': '2025-03-29'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'template': {'metadata': {'annotations': {'checksum/config': 'ba2b90947b5f64cdf8b1a55ede65310f4b3d6712036b75b6bbd8f108f261e6cc', 'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}, 'labels': {'app.kubernetes.io/component': 'worker', 'app.kubernetes.io/name': 'timesketch', 'app.kubernetes.io/instance': 'timesketch'}}, 'spec': {'serviceAccountName': 'timesketch-timesketch', 'securityContext': {}, 'initContainers': [{'name': 'init-timesketch', 'image': 'alpine/git', 'command': ['sh', '-c', '/init/init-timesketch.sh'], 'env': [{'name': 'TIMESKETCH_SECRET', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-secret', 'key': 'timesketch-secret'}}}, {'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-redis', 'key': 'redis-password'}}}, {'name': 'POSTGRES_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'timesketch-postgresql', 'key': 'postgres-password'}}}], 'volumeMounts': [{'mountPath': '/init', 'name': 'init-timesketch'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}, {'name': 'authenticated-emails', 'mountPath': '/init/authenticated-emails', 'readOnly': True}]}], 'containers': [{'name': 'worker', 'securityContext': {}, 'image': 'us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:20240828', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', './docker-entrypoint.sh timesketch-worker'], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name', 'apiVersion': 'v1'}}}, {'name': 'WORKER_LOG_LEVEL', 'value': 'DEBUG'}], 'volumeMounts': [{'mountPath': '/mnt/timesketchvolume/upload', 'name': 'timesketchvolume', 'subPath': 'uploads'}, {'mountPath': '/var/log/timesketch', 'name': 'timesketchvolume', 'subPathExpr': 'logs/$(POD_NAME)'}, {'mountPath': '/etc/timesketch', 'name': 'timesketch-configs'}], 'ports': [{'containerPort': 8080}, {'containerPort': 5000}], 'resources': {'limits': {}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}}], 'volumes': [{'name': 'timesketchvolume', 'persistentVolumeClaim': {'claimName': 'timesketch-timesketchvolume-claim', 'readOnly': False}}, {'name': 'init-timesketch', 'configMap': {'name': 'timesketch-init-configmap', 'defaultMode': 484}}, {'name': 'timesketch-configs', 'emptyDir': {}}, {'name': 'authenticated-emails', 'secret': {'items': [{'key': 'authenticated-emails-list', 'path': 'authenticated-emails-list'}], 'secretName': 'timesketch-access-list'}}]}}}}",2981
timesketch,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/timesketch-opensearch-cluster-master', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'majorVersion': '2'}}, 'spec': {'serviceName': 'timesketch-opensearch-cluster-master-headless', 'selector': {'matchLabels': {'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch'}}, 'replicas': 1, 'podManagementPolicy': 'Parallel', 'updateStrategy': {'type': 'RollingUpdate'}, 'volumeClaimTemplates': [{'metadata': {'name': 'timesketch-opensearch-cluster-master'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '2Gi'}}}}], 'template': {'metadata': {'name': 'timesketch-opensearch-cluster-master', 'labels': {'helm.sh/chart': 'opensearch-2.20.0', 'app.kubernetes.io/name': 'opensearch', 'app.kubernetes.io/instance': 'timesketch', 'app.kubernetes.io/version': '2.14.0', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/component': 'timesketch-opensearch-cluster-master'}, 'annotations': {'configchecksum': '995ffce39e91be968b98e04c75b52803ee1d1e30c1d0178481e39cda7a60a7d'}}, 'spec': {'securityContext': {'fsGroup': 1000, 'runAsUser': 1000}, 'automountServiceAccountToken': False, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'topologyKey': 'kubernetes.io/hostname', 'labelSelector': {'matchExpressions': [{'key': 'app.kubernetes.io/instance', 'operator': 'In', 'values': ['timesketch']}, {'key': 'app.kubernetes.io/name', 'operator': 'In', 'values': ['opensearch']}]}}}]}}, 'terminationGracePeriodSeconds': 120, 'volumes': [{'name': 'config', 'configMap': {'name': 'timesketch-opensearch-cluster-master-config'}}, {'emptyDir': {}, 'name': 'config-emptydir'}], 'enableServiceLinks': True, 'initContainers': [{'name': 'fsgroup-volume', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c'], 'args': ['chown -R 1000:1000 /usr/share/opensearch/data'], 'securityContext': {'runAsUser': 0}, 'resources': {}, 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}]}, {'name': 'sysctl', 'image': 'busybox:latest', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', 'set -xe\nDESIRED=""262144""\nCURRENT=$(sysctl -n vm.max_map_count)\nif [ ""$DESIRED"" -gt ""$CURRENT"" ]; then\n  sysctl -w vm.max_map_count=$DESIRED\nfi\n'], 'securityContext': {'runAsUser': 0, 'privileged': True}, 'resources': {}}, {'name': 'configfile', 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'command': ['sh', '-c', '#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n'], 'resources': {}, 'volumeMounts': [{'mountPath': '/tmp/config/', 'name': 'config-emptydir'}, {'name': 'config', 'mountPath': '/tmp/configfolder/opensearch.yml', 'subPath': 'opensearch.yml'}]}], 'containers': [{'name': 'opensearch', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'runAsUser': 1000}, 'image': 'opensearchproject/opensearch:2.14.0', 'imagePullPolicy': 'IfNotPresent', 'readinessProbe': {'failureThreshold': 3, 'periodSeconds': 5, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'startupProbe': {'failureThreshold': 30, 'initialDelaySeconds': 5, 'periodSeconds': 10, 'tcpSocket': {'port': 9200}, 'timeoutSeconds': 3}, 'ports': [{'name': 'http', 'containerPort': 9200}, {'name': 'transport', 'containerPort': 9300}, {'name': 'metrics', 'containerPort': 9600}], 'resources': {'requests': {'cpu': '250m', 'memory': '512Mi'}}, 'env': [{'name': 'node.name', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'cluster.initial_master_nodes', 'value': 'timesketch-opensearch-cluster-master-0,'}, {'name': 'discovery.seed_hosts', 'value': 'opensearch-cluster-master-headless'}, {'name': 'cluster.name', 'value': 'opensearch-cluster'}, {'name': 'network.host', 'value': '0.0.0.0'}, {'name': 'OPENSEARCH_JAVA_OPTS', 'value': '-Xmx512M -Xms512M'}, {'name': 'node.roles', 'value': 'master,ingest,data,remote_cluster_client,'}, {'name': 'DISABLE_INSTALL_DEMO_CONFIG', 'value': 'true'}, {'name': 'DISABLE_SECURITY_PLUGIN', 'value': 'true'}], 'volumeMounts': [{'name': 'timesketch-opensearch-cluster-master', 'mountPath': '/usr/share/opensearch/data'}, {'name': 'config-emptydir', 'mountPath': '/usr/share/opensearch/config/opensearch.yml', 'subPath': 'opensearch.yml'}]}]}}}}",4658
wg-access-server,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/wg-access-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/wg-access-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['Deployment/wg-access-server', '/spec/template/spec/volumes/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/wg-access-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/wg-access-server', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/wg-access-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
wg-access-server,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/wg-access-server', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'wg-access-server', 'labels': {'helm.sh/chart': 'wg-access-server-v0.4.7', 'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server', 'app.kubernetes.io/version': 'v0.4.6', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'strategy': {'type': 'RollingUpdate'}, 'selector': {'matchLabels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'template': {'metadata': {'annotations': {'checksum/configmap': 'f693c742b51a5a842bd151441c279f35162af8918ff127df289ff1b89a4699d5'}, 'labels': {'app': 'wg-access-server', 'app.kubernetes.io/name': 'wg-access-server', 'app.kubernetes.io/instance': 'wg-access-server'}}, 'spec': {'containers': [{'name': 'wg-access-server', 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}, 'image': 'place1/wg-access-server:v0.4.6', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 8000, 'protocol': 'TCP'}, {'name': 'wireguard', 'containerPort': 51820, 'protocol': 'UDP'}], 'env': None, 'volumeMounts': [{'name': 'tun', 'mountPath': '/dev/net/tun'}, {'name': 'data', 'mountPath': '/data'}, {'name': 'config', 'mountPath': '/config.yaml', 'subPath': 'config.yaml'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}], 'volumes': [{'name': 'tun', 'hostPath': {'type': 'CharDevice', 'path': '/dev/net/tun'}}, {'name': 'data', 'emptyDir': {}}, {'name': 'config', 'configMap': {'name': 'wg-access-server'}}]}}}}",1625
cloudevents,datree,CONTAINERS_INCORRECT_RUNASUSER_VALUE_LOWUID,check_13,N/A,Prevent containers from accessing host files by using high UIDs,"['Rollout/cloudevents', '/spec/template/spec/containers/0']","{'apiVersion': 'argoproj.io/v1alpha1', 'kind': 'Rollout', 'metadata': {'name': 'cloudevents', 'labels': {'app.kubernetes.io/name': 'cloudevents', 'helm.sh/chart': 'cloudevents-0.13.1', 'app.kubernetes.io/instance': 'cloudevents', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}, 'annotations': None}, 'spec': {'replicas': 1, 'revisionHistoryLimit': 3, 'strategy': {'canary': {'stableService': 'cloudevents', 'canaryService': 'cloudevents-preview', 'minPodsPerReplicaSet': 1, 'dynamicStableScale': True, 'trafficRouting': {'nginx': {'stableIngress': 'cloudevents'}}, 'steps': [{'setWeight': 100}]}}, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'cloudevents', 'app.kubernetes.io/instance': 'cloudevents'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'cloudevents', 'helm.sh/chart': 'cloudevents-0.13.1', 'app.kubernetes.io/instance': 'cloudevents', 'app.kubernetes.io/managed-by': 'Helm', 'app.kubernetes.io/version': '1.0.0', 'app.kubernetes.io/part-of': 'shortlink', 'track': 'stable'}}, 'spec': {'terminationGracePeriodSeconds': 60, 'automountServiceAccountToken': True, 'serviceAccountName': 'cloudevents', 'securityContext': {'seccompProfile': {'type': 'RuntimeDefault'}}, 'containers': [{'name': 'application', 'securityContext': {'allowPrivilegeEscalation': False, 'runAsNonRoot': True, 'runAsUser': 1000, 'runAsGroup': 1000, 'readOnlyRootFilesystem': True, 'capabilities': {'drop': ['ALL']}}, 'image': 'registry.gitlab.com/shortlink-org/shortlink/api-cloudevents:0.17.111', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 7070, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 9090, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/live', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'terminationGracePeriodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 5, 'timeoutSeconds': 5}, 'readinessProbe': {'httpGet': {'path': '/ready', 'port': 9090}, 'initialDelaySeconds': 5, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 30, 'timeoutSeconds': 5}, 'env': [{'name': 'AUTH_URI', 'value': 'https://shortlink.best/api/auth'}, {'name': 'GRPC_CLIENT_HOST', 'value': 'istio-ingress.istio-ingress'}, {'name': 'MQ_ENABLED', 'value': 'false'}, {'name': 'MQ_TYPE', 'value': 'kafka'}, {'name': 'SPICE_DB_API', 'value': 'shortlink.spicedb-operator:50051'}, {'name': 'TRACER_URI', 'value': 'grafana-tempo.grafana:4317'}], 'resources': {'limits': {'cpu': '200m', 'memory': '128Mi'}, 'requests': {'cpu': '15m', 'memory': '64Mi'}}}]}}}}",2633
tailscale-relay,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/tailscale-relay', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['StatefulSet/tailscale-relay', '/spec/template/spec/volumes/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/tailscale-relay', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['StatefulSet/tailscale-relay', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['StatefulSet/tailscale-relay', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['StatefulSet/tailscale-relay', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
tailscale-relay,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['StatefulSet/tailscale-relay', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tailscale-relay', 'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': None}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay'}}, 'serviceName': 'tailscale-relay', 'template': {'metadata': {'labels': {'helm.sh/chart': 'tailscale-relay-0.2.7', 'app.kubernetes.io/name': 'tailscale-relay', 'app.kubernetes.io/instance': 'tailscale-relay', 'app.kubernetes.io/version': 'v1.68.1', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'checksum/configMap': 'ba4aa06cdb839831931bacaf0d518238bfa5317eb0657355de2b8b8346c72c74', 'checksum/secret': '19a2bba72dd2c409e8af86141c53d909a5a5b3b648775c2064d0279848899897'}}, 'spec': {'hostNetwork': False, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'tailscale-relay', 'containers': [{'name': 'tailscale-relay', 'image': 'docker.io/mvisonneau/tailscale:v1.68.1', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'TAILSCALED_STATE', 'value': 'kube:tailscale-relay-state'}], 'envFrom': [{'configMapRef': {'name': 'tailscale-relay-config'}}, {'secretRef': {'name': 'tailscale-relay-config'}}], 'ports': [{'name': 'exporter', 'containerPort': 8080, 'protocol': 'TCP'}], 'volumeMounts': [{'name': 'lib-modules', 'mountPath': '/lib/modules'}], 'securityContext': {'capabilities': {'add': ['NET_ADMIN']}}}], 'volumes': [{'name': 'lib-modules', 'hostPath': {'path': '/lib/modules'}}]}}}}",1685
influxdb,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/influxdb', '/spec']",{},2166
influxdb,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/influxdb', '/spec/template/spec/containers/0']",{},2166
influxdb,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/influxdb', '/spec/template/spec/containers/0']",{},2166
influxdb,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Deployment/influxdb', '/spec/template/spec/containers/0']",{},2166
influxdb,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/influxdb', '/spec/template/spec/containers/0']",{},2166
influxdb,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/influxdb', '/spec/template/spec/containers/0']",{},2166
mojeaplikace,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/mojeaplikace-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/mojeaplikace-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/mojeaplikace-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/mojeaplikace', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/mojeaplikace-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/mojeaplikace', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/mojeaplikace-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/mojeaplikace', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/mojeaplikace-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
mojeaplikace,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/mojeaplikace', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'mojeaplikace', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace'}}, 'spec': {'serviceAccountName': 'mojeaplikace', 'securityContext': {}, 'containers': [{'name': 'mojeaplikace', 'securityContext': {}, 'image': 'nginx:1.16.0', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 80, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}}]}}}}",980
mojeaplikace,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/mojeaplikace-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'mojeaplikace-test-connection', 'labels': {'helm.sh/chart': 'mojeaplikace-0.1.0', 'app.kubernetes.io/name': 'mojeaplikace', 'app.kubernetes.io/instance': 'mojeaplikace', 'app.kubernetes.io/version': '1.16.0', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['mojeaplikace:80']}], 'restartPolicy': 'Never'}}",488
tei,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['StatefulSet/tei', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['StatefulSet/tei', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['StatefulSet/tei', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,datree,CONTAINERS_INCORRECT_KEY_HOSTPATH,check_47,N/A,Prevent containers from accessing underlying host,"['StatefulSet/tei', '/spec/template/spec']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
tei,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['StatefulSet/tei', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'StatefulSet', 'metadata': {'name': 'tei', 'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceName': 'tei-headless', 'podManagementPolicy': 'Parallel', 'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'tei-1.6.0', 'app.kubernetes.io/name': 'tei', 'app.kubernetes.io/instance': 'tei', 'app.kubernetes.io/version': '1.6.0', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'tei', 'securityContext': {}, 'containers': [{'name': 'tei', 'securityContext': {}, 'image': 'ghcr.io/huggingface/text-embeddings-inference:cpu-1.6', 'imagePullPolicy': 'IfNotPresent', 'args': ['--model-id', 'BAAI/bge-large-en-v1.5'], 'ports': [{'containerPort': 80, 'name': 'http'}], 'resources': {'limits': {'cpu': '8', 'memory': '16Gi'}, 'requests': {'cpu': '4', 'memory': '8Gi'}}, 'volumeMounts': [{'name': 'data-volume', 'mountPath': '/data'}]}], 'volumes': None}}, 'volumeClaimTemplates': [{'metadata': {'name': 'data-volume'}, 'spec': {'accessModes': ['ReadWriteOnce'], 'resources': {'requests': {'storage': '50Gi'}}}}]}}",1335
ping-exporter,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/ping-exporter', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/ping-exporter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Pod/ping-exporter-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/ping-exporter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Pod/ping-exporter-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/ping-exporter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Pod/ping-exporter-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/ping-exporter', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'ping-exporter', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter'}}, 'template': {'metadata': {'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'serviceAccountName': 'ping-exporter', 'securityContext': {}, 'containers': [{'name': 'ping-exporter', 'securityContext': {'capabilities': {'add': ['NET_RAW']}}, 'image': 'czerwonk/ping_exporter:v1.1.3', 'imagePullPolicy': 'IfNotPresent', 'ports': [{'name': 'http', 'containerPort': 9427, 'protocol': 'TCP'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http'}}, 'resources': {}, 'volumeMounts': [{'name': 'config', 'mountPath': '/config'}]}], 'volumes': [{'name': 'config', 'configMap': {'name': 'ping-exporter-config'}}]}}}}",1306
ping-exporter,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Pod/ping-exporter-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Pod/ping-exporter-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Pod/ping-exporter-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
ping-exporter,datree,CONTAINERS_MISSING_IMAGE_VALUE_VERSION,check_0,N/A,Ensure each container image has a pinned (tag) version,"['Pod/ping-exporter-test-connection', '/spec/containers/0']","{'apiVersion': 'v1', 'kind': 'Pod', 'metadata': {'name': 'ping-exporter-test-connection', 'labels': {'helm.sh/chart': 'ping-exporter-0.1.1', 'app.kubernetes.io/name': 'ping-exporter', 'app.kubernetes.io/instance': 'ping-exporter', 'app.kubernetes.io/version': 'v1.1.3', 'app.kubernetes.io/managed-by': 'Helm'}, 'annotations': {'helm.sh/hook': 'test'}}, 'spec': {'containers': [{'name': 'wget', 'image': 'busybox', 'command': ['wget'], 'args': ['ping-exporter:9427']}], 'restartPolicy': 'Never'}}",495
pulse,datree,CONTAINERS_MISSING_LIVENESSPROBE_KEY,check_7,N/A,Ensure each container has a configured liveness probe,"['Deployment/pulse', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,datree,CONTAINERS_MISSING_READINESSPROBE_KEY,check_8,N/A,Ensure each container has a configured readiness probe,"['Deployment/pulse', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,datree,CONTAINERS_MISSING_MEMORY_LIMIT_KEY,check_2,N/A,Ensure each container has a configured memory limit,"['Deployment/pulse', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,datree,CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE,check_27,N/A,Ensure each container has a read-only root filesystem,"['Deployment/pulse', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,datree,CONTAINERS_MISSING_KEY_ALLOWPRIVILEGEESCALATION,check_22,Pod Security Policy,Prevent containers from escalating privileges,"['Deployment/pulse', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,datree,DEPLOYMENT_INCORRECT_REPLICAS_VALUE,check_45,N/A,Ensure Deployment has more than one replica configured,"['Deployment/pulse', '/spec']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
pulse,datree,CONTAINERS_MISSING_MEMORY_REQUEST_KEY,check_1,N/A,Ensure each container has a configured memory request,"['Deployment/pulse', '/spec/template/spec/containers/0']","{'apiVersion': 'apps/v1', 'kind': 'Deployment', 'metadata': {'name': 'pulse', 'labels': {'helm.sh/chart': 'pulse-0.3.1', 'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse', 'app.kubernetes.io/version': '1.17.3', 'app.kubernetes.io/managed-by': 'Helm'}}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'pulse', 'app.kubernetes.io/instance': 'pulse'}}, 'spec': {'serviceAccountName': 'pulse', 'securityContext': {}, 'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'config', 'projected': {'sources': [{'configMap': {'name': 'pulse'}}]}}], 'terminationGracePeriodSeconds': 60, 'containers': [{'name': 'pulse', 'securityContext': {}, 'image': 'mezmohq/vector:1.17.3', 'imagePullPolicy': 'IfNotPresent', 'env': [{'name': 'MEZMO_API_HOST', 'value': 'api.mezmo.com'}, {'name': 'MEZMO_API_SCHEME', 'value': 'https'}, {'name': 'MEZMO_LOCAL_DEPLOY_AUTH_TOKEN', 'valueFrom': {'secretKeyRef': {'name': 'pulse', 'key': 'api-access-token'}}}, {'name': 'MEZMO_METRICS_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/metric/usage'}, {'name': 'MEZMO_TASKS_FETCH_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks'}, {'name': 'MEZMO_TASKS_POST_ENDPOINT_URL', 'value': 'https://api.mezmo.com/v3/pipeline/account/local-deploy/tasks/:task_id/results?pipeline_id=:pipeline_id'}, {'name': 'VECTOR_LOG', 'value': 'info'}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'fieldPath': 'metadata.name'}}}, {'name': 'MEZMO_RESHAPE_MESSAGE', 'value': '1'}], 'args': ['--config-dir', '/etc/vector/'], 'resources': {}, 'volumeMounts': [{'name': 'data', 'mountPath': '/vector-data-dir'}, {'name': 'config', 'mountPath': '/etc/vector/', 'readOnly': True}]}]}}}}",1868
