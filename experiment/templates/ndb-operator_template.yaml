---
# Source: ndb-operator/templates/service-accounts.yaml
# Service account for webhook server
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ndb-operator-webhook-sa
  namespace: default
---
# Source: ndb-operator/templates/service-accounts.yaml
# Service Account for Ndb Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ndb-operator-app-sa
  namespace: default
---
# Source: ndb-operator/templates/cluster-roles.yaml
# ClusterRoles for the WebHook Server to access the non cluster-scoped resources
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ndb-operator-webhook-cr
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
---
# Source: ndb-operator/templates/cluster-roles.yaml
# ClusterRoles for the WebHook Server to access the cluster-scoped resources
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: default-ndb-operator-webhook-cr
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - list
      - patch
---
# Source: ndb-operator/templates/cluster-roles.yaml
# Cluster roles for Ndb Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ndb-operator-cr
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs:
      - list
      - watch
      - delete

  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs:
      - list
      - watch
      - delete
      - create

  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs:
      - list
      - watch
      - delete

  - apiGroups: [""]
    resources: ["services"]
    verbs:
      - list
      - watch
      - create
      - patch
      - delete

  - apiGroups: [""]
    resources: ["configmaps"]
    verbs:
      - get
      - create
      - patch
      - list
      - watch

  - apiGroups: [""]
    resources: ["secrets"]
    verbs:
      - get
      - create
      - delete
      - list
      - watch

  - apiGroups: ["events.k8s.io"]
    resources: ["events"]
    verbs:
      - create
      - patch

  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs:
      - create
      - patch
      - list
      - watch
      - delete

  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs:
      - list
      - watch
      - create

  - apiGroups: ["mysql.oracle.com"]
    resources:
      - ndbclusters
      - ndbclusters/status
    verbs:
      - get
      - list
      - patch
      - update
      - watch
---
# Source: ndb-operator/templates/rolebindings.yaml
# Webhook Server
# ClusterRoleBinding to give the WebhookServer
# cluster-scoped access to ValidatingWebhookConfigurations
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-ndb-operator-webhook-crb
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ndb-operator-webhook-cr
subjects:
  - kind: ServiceAccount
    name: ndb-operator-webhook-sa
    namespace: default
---
# Source: ndb-operator/templates/rolebindings.yaml
# Other RBACs for the WebHook Server
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ndb-operator-webhook-crb
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ndb-operator-webhook-cr
subjects:
  - kind: ServiceAccount
    name: ndb-operator-webhook-sa
    namespace: default
---
# Source: ndb-operator/templates/rolebindings.yaml
# Ndb operator
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ndb-operator-crb
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ndb-operator-cr
subjects:
- kind: ServiceAccount
  name: ndb-operator-app-sa
  namespace: default
---
# Source: ndb-operator/templates/services.yaml
# Service to expose the webhook
apiVersion: v1
kind: Service
metadata:
  name: ndb-operator-webhook-service
  namespace: default
spec:
  ports:
    - port: 9443
  selector:
    app: ndb-operator-webhook-server
---
# Source: ndb-operator/templates/services.yaml
# This service is created to get an FQDN for operator pod.
# The FQDN of this service will be used as the host name
# when creating 'ndb-operator-user' user. Operator
# will use this user account to create/modify/delete the root
# user account.
apiVersion: v1
kind: Service
metadata:
  name: ndb-operator-svc
  namespace: default
spec:
  selector:
    app: ndb-operator
  clusterIP: None
---
# Source: ndb-operator/templates/deployments.yaml
# Deploy the webhook server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ndb-operator-webhook-server
  namespace: default
  labels:
    release: 9.1.0-1.6.0
    app: ndb-operator-webhook-deployment
spec:
  selector:
    matchLabels:
      app: ndb-operator-webhook-server
  template:
    metadata:
      labels:
        app: ndb-operator-webhook-server
    spec:
      # use the account created above to run the server
      serviceAccountName: ndb-operator-webhook-sa
      containers:
        - name: ndb-operator-webhook
          image: container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0
          imagePullPolicy: IfNotPresent
          ports:
            # expose the web server port
            - containerPort: 9443
          command:
            - ndb-operator-webhook
          args:
            - -service=ndb-operator-webhook-service
          readinessProbe:
            httpGet:
              path: /health
              port: 9443
              scheme: HTTPS
  # set maxUnavailable to 0 so that helm will wait for the pod to become ready
  strategy:
    rollingUpdate:
      maxUnavailable: 0
---
# Source: ndb-operator/templates/deployments.yaml
# Deploy Ndb operator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ndb-operator-app
  namespace: default
  labels:
    release: 9.1.0-1.6.0
    app: ndb-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ndb-operator
  template:
    metadata:
      labels:
        app: ndb-operator
    spec:
      serviceAccountName: ndb-operator-app-sa
      hostname: ndb-operator-pod
      subdomain: ndb-operator-svc
      containers:
        - name: ndb-operator-controller
          image: container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0
          imagePullPolicy: IfNotPresent
          command:
            - ndb-operator
          args:
            - -cluster-scoped=true
          ports:
            - containerPort: 1186
          env:
            # Expose the image name via env to the operator app
            - name: NDB_OPERATOR_IMAGE
              value: container-registry.oracle.com/mysql/community-ndb-operator:9.1.0-1.6.0
            - name: NDB_OPERATOR_IMAGE_PULL_SECRET_NAME
              value: 
  # set maxUnavailable to 0 so that helm will wait for the pod to become ready
  strategy:
    rollingUpdate:
      maxUnavailable: 0
---
# Source: ndb-operator/templates/cluster-roles.yaml
# Use ClusterRole if the operator is cluster-scoped
# and Role if the operator is namespace-scoped.
---
# Source: ndb-operator/templates/rolebindings.yaml
# Other RBAC bindings are based on the scope of the Operator.
# Use ClusterRoleBinding if the operator is cluster-scoped
# and RoleBinding if the operator is namespace-scoped.
---
# Source: ndb-operator/templates/mutating-webhook-configs.yaml
# Register the webhook service as a mutating webhook
# since mutating webhook(mwh) is a cluster scoped resource, append release
# namespace along with release name to the vwh name to allow installing multiple
# namespace scoped operators
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: default-ndb-operator-mwc
  labels:
    # This label will be used by the webhook server to
    # list WebhookConfigurations to inject caBundle into
    webhook-server: default-ndb-operator-webhook-service
webhooks:
  - clientConfig:
      # caBundle will be filled in by the webhook server
      service:
        name: ndb-operator-webhook-service
        namespace: default
        path: /ndb/mutate
        port: 9443
    failurePolicy: Fail
    name: mutating-webhook.ndbcluster.mysql.oracle.com
    rules:
      - apiGroups:
          - mysql.oracle.com
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ndbclusters
    admissionReviewVersions:
      - v1
    sideEffects: None
---
# Source: ndb-operator/templates/validating-webhook-configs.yaml
# Register the webhook service as a validating webhook
# since validating webhook(vwh) is a cluster scoped resource, append release
# namespace along with release name to the vwh name to allow installing multiple
# namespace scoped operators
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: default-ndb-operator-vwc
  labels:
    # This label will be used by the webhook server to
    # list WebhookConfigurations to inject caBundle into
    webhook-server: default-ndb-operator-webhook-service
webhooks:
  - clientConfig:
      # caBundle will be filled in by the webhook server
      service:
        name: ndb-operator-webhook-service
        namespace: default
        path: /ndb/validate
        port: 9443
    failurePolicy: Fail
    name: validating-webhook.ndbcluster.mysql.oracle.com
    rules:
      - apiGroups:
          - mysql.oracle.com
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ndbclusters
    admissionReviewVersions:
      - v1
    sideEffects: None
